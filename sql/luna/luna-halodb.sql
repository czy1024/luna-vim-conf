/*
 Navicat Premium Data Transfer

 Source Server         : luna-mysql-collage
 Source Server Type    : MySQL
 Source Server Version : 50718
 Source Host           : cdb-5w1wgodg.bj.tencentcdb.com:10067
 Source Schema         : luna-halodb

 Target Server Type    : MySQL
 Target Server Version : 50718
 File Encoding         : 65001

 Date: 06/12/2020 16:07:00
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for attachments
-- ----------------------------
DROP TABLE IF EXISTS `attachments`;
CREATE TABLE `attachments`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `create_time` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0),
  `deleted` tinyint(4) NULL DEFAULT 0,
  `update_time` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0),
  `file_key` varchar(2047) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '',
  `height` int(11) NULL DEFAULT 0,
  `media_type` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `path` varchar(1023) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `size` bigint(20) NOT NULL,
  `suffix` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '',
  `thumb_path` varchar(1023) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '',
  `type` int(11) NULL DEFAULT 0,
  `width` int(11) NULL DEFAULT 0,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `attachments_media_type`(`media_type`) USING BTREE,
  INDEX `attachments_create_time`(`create_time`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 42 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of attachments
-- ----------------------------
INSERT INTO `attachments` VALUES (1, '2019-12-06 18:54:58', 0, '2019-12-06 18:54:58', 'upload/2019/12/panda-99b045e335e64ca6a15c009f3b4de066.JPG', 1208, 'image/jpeg', 'panda', 'upload/2019/12/panda-99b045e335e64ca6a15c009f3b4de066.JPG', 116326, 'JPG', 'upload/2019/12/panda-99b045e335e64ca6a15c009f3b4de066-thumbnail.JPG', 0, 1080);
INSERT INTO `attachments` VALUES (3, '2019-12-09 11:44:05', 0, '2019-12-09 11:44:42', 'upload/2019/12/图片2-6ccda176c67b43e880d2a7d99b2e7d88.jpg', 415, 'image/jpeg', 'aroundhotel', 'upload/2019/12/图片2-6ccda176c67b43e880d2a7d99b2e7d88.jpg', 29656, 'jpg', 'upload/2019/12/图片2-6ccda176c67b43e880d2a7d99b2e7d88-thumbnail.jpg', 0, 553);
INSERT INTO `attachments` VALUES (8, '2019-12-28 16:51:19', 0, '2020-02-01 00:40:42', 'upload/2019/12/bookmarks-ec0ea2aad23340fabd0b222b44d68c90.html', 0, 'text/html', '书签', 'upload/2019/12/bookmarks-ec0ea2aad23340fabd0b222b44d68c90.html', 187068, 'html', 'upload/2019/12/bookmarks-ec0ea2aad23340fabd0b222b44d68c90.html', 0, 0);
INSERT INTO `attachments` VALUES (11, '2020-02-01 00:41:34', 0, '2020-02-01 00:41:34', 'upload/2020/2/SwitchyOptions-4d7def33ad7845b8aec9c3d01ed622e4.bak', 0, 'application/octet-stream', 'SwitchyOptions', 'upload/2020/2/SwitchyOptions-4d7def33ad7845b8aec9c3d01ed622e4.bak', 11852, 'bak', 'upload/2020/2/SwitchyOptions-4d7def33ad7845b8aec9c3d01ed622e4.bak', 0, 0);
INSERT INTO `attachments` VALUES (12, '2020-02-01 00:41:36', 0, '2020-02-01 00:41:36', 'upload/2020/2/SwitchyRules-c16ea71740f340268568c96facab8dd8.ssrl', 0, 'application/octet-stream', 'SwitchyRules', 'upload/2020/2/SwitchyRules-c16ea71740f340268568c96facab8dd8.ssrl', 229005, 'ssrl', 'upload/2020/2/SwitchyRules-c16ea71740f340268568c96facab8dd8.ssrl', 0, 0);
INSERT INTO `attachments` VALUES (13, '2020-02-01 00:41:36', 0, '2020-02-01 00:41:36', 'upload/2020/2/SwitchyPac-e38c91488e69433db643687504b1f64c.pac', 0, 'application/octet-stream', 'SwitchyPac', 'upload/2020/2/SwitchyPac-e38c91488e69433db643687504b1f64c.pac', 641102, 'pac', 'upload/2020/2/SwitchyPac-e38c91488e69433db643687504b1f64c.pac', 0, 0);
INSERT INTO `attachments` VALUES (15, '2020-02-06 15:45:05', 0, '2020-02-06 15:45:05', 'upload/2020/2/u=3868937815,2912440064&fm=26&gp=0-a0c951d2a5064d56b22f370e0a67a193.jpg', 341, 'image/jpeg', 'u=3868937815,2912440064&fm=26&gp=0', 'upload/2020/2/u=3868937815,2912440064&fm=26&gp=0-a0c951d2a5064d56b22f370e0a67a193.jpg', 12015, 'jpg', 'upload/2020/2/u=3868937815,2912440064&fm=26&gp=0-a0c951d2a5064d56b22f370e0a67a193-thumbnail.jpg', 0, 500);
INSERT INTO `attachments` VALUES (17, '2020-02-06 15:47:09', 0, '2020-02-06 15:47:09', 'upload/2020/2/u=3795141063,2338690031&fm=26&gp=0-b7e737f80a7a488b9b5ae5e362d6fd59.jpg', 300, 'image/jpeg', 'u=3795141063,2338690031&fm=26&gp=0', 'upload/2020/2/u=3795141063,2338690031&fm=26&gp=0-b7e737f80a7a488b9b5ae5e362d6fd59.jpg', 23574, 'jpg', 'upload/2020/2/u=3795141063,2338690031&fm=26&gp=0-b7e737f80a7a488b9b5ae5e362d6fd59-thumbnail.jpg', 0, 500);
INSERT INTO `attachments` VALUES (18, '2020-02-06 15:47:16', 0, '2020-02-06 15:47:16', 'upload/2020/2/下载 (1)-657838880e314d65a4d0f48b14949cb0.jpg', 333, 'image/jpeg', '下载 (1)', 'upload/2020/2/下载 (1)-657838880e314d65a4d0f48b14949cb0.jpg', 12819, 'jpg', 'upload/2020/2/下载 (1)-657838880e314d65a4d0f48b14949cb0-thumbnail.jpg', 0, 500);
INSERT INTO `attachments` VALUES (19, '2020-02-06 15:47:22', 0, '2020-02-06 15:47:22', 'upload/2020/2/下载-ad125cfbd94d4801b695203c3f28f5ff.jpg', 394, 'image/jpeg', '下载', 'upload/2020/2/下载-ad125cfbd94d4801b695203c3f28f5ff.jpg', 131136, 'jpg', 'upload/2020/2/下载-ad125cfbd94d4801b695203c3f28f5ff-thumbnail.jpg', 0, 696);
INSERT INTO `attachments` VALUES (20, '2020-02-06 15:47:26', 0, '2020-02-06 15:47:26', 'upload/2020/2/u=3573756467,3701343599&fm=26&gp=0-08b9a87439e54dc28c6463d6822a2805.jpg', 313, 'image/jpeg', 'u=3573756467,3701343599&fm=26&gp=0', 'upload/2020/2/u=3573756467,3701343599&fm=26&gp=0-08b9a87439e54dc28c6463d6822a2805.jpg', 26907, 'jpg', 'upload/2020/2/u=3573756467,3701343599&fm=26&gp=0-08b9a87439e54dc28c6463d6822a2805-thumbnail.jpg', 0, 500);
INSERT INTO `attachments` VALUES (21, '2020-02-06 15:50:01', 0, '2020-02-06 15:50:01', 'upload/2020/2/u=3536793445,2882105203&fm=26&gp=0-1b8ecace7070400cabacdbfb1421b43f.jpg', 300, 'image/jpeg', 'u=3536793445,2882105203&fm=26&gp=0', 'upload/2020/2/u=3536793445,2882105203&fm=26&gp=0-1b8ecace7070400cabacdbfb1421b43f.jpg', 57243, 'jpg', 'upload/2020/2/u=3536793445,2882105203&fm=26&gp=0-1b8ecace7070400cabacdbfb1421b43f-thumbnail.jpg', 0, 484);
INSERT INTO `attachments` VALUES (22, '2020-02-06 15:54:05', 0, '2020-02-06 15:54:05', 'upload/2020/2/u=1522768993,3570697097&fm=26&gp=0 (1)-ff9f0f5f1b7643c09a5ae79dd0a0f801.jpg', 375, 'image/jpeg', 'u=1522768993,3570697097&fm=26&gp=0 (1)', 'upload/2020/2/u=1522768993,3570697097&fm=26&gp=0 (1)-ff9f0f5f1b7643c09a5ae79dd0a0f801.jpg', 13098, 'jpg', 'upload/2020/2/u=1522768993,3570697097&fm=26&gp=0 (1)-ff9f0f5f1b7643c09a5ae79dd0a0f801-thumbnail.jpg', 0, 500);
INSERT INTO `attachments` VALUES (23, '2020-02-06 15:54:08', 0, '2020-02-06 15:54:08', 'upload/2020/2/u=4161181514,2737045279&fm=26&gp=0-656b032c97b445f99d5ee95983995283.jpg', 313, 'image/jpeg', 'u=4161181514,2737045279&fm=26&gp=0', 'upload/2020/2/u=4161181514,2737045279&fm=26&gp=0-656b032c97b445f99d5ee95983995283.jpg', 20346, 'jpg', 'upload/2020/2/u=4161181514,2737045279&fm=26&gp=0-656b032c97b445f99d5ee95983995283-thumbnail.jpg', 0, 500);
INSERT INTO `attachments` VALUES (24, '2020-02-06 17:02:41', 0, '2020-02-06 17:02:41', 'upload/2020/2/designclass-ZmtPKmVO2Ac-unsplash-a68a6dd1377b4a9d9f7e6864d4c3abae.jpg', 3712, 'image/jpeg', 'designclass-ZmtPKmVO2Ac-unsplash', 'upload/2020/2/designclass-ZmtPKmVO2Ac-unsplash-a68a6dd1377b4a9d9f7e6864d4c3abae.jpg', 3209115, 'jpg', 'upload/2020/2/designclass-ZmtPKmVO2Ac-unsplash-a68a6dd1377b4a9d9f7e6864d4c3abae-thumbnail.jpg', 0, 5568);
INSERT INTO `attachments` VALUES (25, '2020-02-07 17:03:20', 0, '2020-02-07 17:03:20', 'upload/2020/2/photo-1580874841344-df5968a8d7b7-bc0ba4a870304fce979e7c182d502917.jfif', 267, 'image/jpeg', 'photo-1580874841344-df5968a8d7b7', 'upload/2020/2/photo-1580874841344-df5968a8d7b7-bc0ba4a870304fce979e7c182d502917.jfif', 20625, 'jfif', 'upload/2020/2/photo-1580874841344-df5968a8d7b7-bc0ba4a870304fce979e7c182d502917.jfif', 0, 400);
INSERT INTO `attachments` VALUES (26, '2020-02-07 17:03:51', 0, '2020-02-07 17:03:51', 'upload/2020/2/photo-1580960551585-df9b647cc082-9ffb60634bae401e88ca69c6d2ebbcbf.jfif', 600, 'image/jpeg', 'photo-1580960551585-df9b647cc082', 'upload/2020/2/photo-1580960551585-df9b647cc082-9ffb60634bae401e88ca69c6d2ebbcbf.jfif', 36825, 'jfif', 'upload/2020/2/photo-1580960551585-df9b647cc082-9ffb60634bae401e88ca69c6d2ebbcbf.jfif', 0, 400);
INSERT INTO `attachments` VALUES (27, '2020-02-07 17:11:20', 0, '2020-02-07 17:11:20', 'upload/2020/2/u=3180060526,1572949481&fm=26&gp=0-344db8692ba341b8b5202bc64ea4f681.jpg', 500, 'image/jpeg', 'u=3180060526,1572949481&fm=26&gp=0', 'upload/2020/2/u=3180060526,1572949481&fm=26&gp=0-344db8692ba341b8b5202bc64ea4f681.jpg', 14727, 'jpg', 'upload/2020/2/u=3180060526,1572949481&fm=26&gp=0-344db8692ba341b8b5202bc64ea4f681-thumbnail.jpg', 0, 500);
INSERT INTO `attachments` VALUES (28, '2020-02-14 20:48:06', 0, '2020-02-14 20:48:06', 'upload/2020/2/蜡笔小新-1ec873af2e944360934884dd647aa200.jpg', 225, 'image/jpeg', '蜡笔小新', 'upload/2020/2/蜡笔小新-1ec873af2e944360934884dd647aa200.jpg', 6731, 'jpg', 'upload/2020/2/蜡笔小新-1ec873af2e944360934884dd647aa200-thumbnail.jpg', 0, 225);
INSERT INTO `attachments` VALUES (29, '2020-03-11 22:09:47', 0, '2020-03-11 22:09:47', 'upload/2020/3/u=4111600323,3235941168&fm=26&gp=0-1fea7ad4ce724585b6c8e065e641d6bd.jpg', 300, 'image/jpeg', 'u=4111600323,3235941168&fm=26&gp=0', 'upload/2020/3/u=4111600323,3235941168&fm=26&gp=0-1fea7ad4ce724585b6c8e065e641d6bd.jpg', 18727, 'jpg', 'upload/2020/3/u=4111600323,3235941168&fm=26&gp=0-1fea7ad4ce724585b6c8e065e641d6bd-thumbnail.jpg', 0, 627);
INSERT INTO `attachments` VALUES (30, '2020-03-17 22:58:44', 0, '2020-03-17 22:58:44', 'upload/2020/3/shiro-0253c465c05b4020be98273e1e8d40c8.jfif', 329, 'image/jpeg', 'shiro', 'upload/2020/3/shiro-0253c465c05b4020be98273e1e8d40c8.jfif', 8188, 'jfif', 'upload/2020/3/shiro-0253c465c05b4020be98273e1e8d40c8.jfif', 0, 500);
INSERT INTO `attachments` VALUES (31, '2020-03-29 17:48:52', 0, '2020-03-29 17:48:52', 'upload/2020/3/image-3ba4e6b3f99d445aad0417be4b4d70d1.png', 55, 'image/png', 'image', 'upload/2020/3/image-3ba4e6b3f99d445aad0417be4b4d70d1.png', 6710, 'png', 'upload/2020/3/image-3ba4e6b3f99d445aad0417be4b4d70d1-thumbnail.png', 0, 1010);
INSERT INTO `attachments` VALUES (32, '2020-03-30 15:10:08', 0, '2020-03-30 15:10:08', 'upload/2020/3/u=689510063,2684890774&fm=26&gp=0-053490f102584b5a9aa55698f26b6120.jpg', 512, 'image/jpeg', 'u=689510063,2684890774&fm=26&gp=0', 'upload/2020/3/u=689510063,2684890774&fm=26&gp=0-053490f102584b5a9aa55698f26b6120.jpg', 84924, 'jpg', 'upload/2020/3/u=689510063,2684890774&fm=26&gp=0-053490f102584b5a9aa55698f26b6120-thumbnail.jpg', 0, 512);
INSERT INTO `attachments` VALUES (33, '2020-04-01 11:59:26', 0, '2020-04-01 11:59:26', 'upload/2020/4/luna-1da26dd7eae1422396cf77bb3ba2e5e2.png', 4096, 'image/png', 'luna', 'upload/2020/4/luna-1da26dd7eae1422396cf77bb3ba2e5e2.png', 360070, 'png', 'upload/2020/4/luna-1da26dd7eae1422396cf77bb3ba2e5e2-thumbnail.png', 0, 3510);
INSERT INTO `attachments` VALUES (34, '2020-04-05 12:47:39', 0, '2020-04-05 12:47:39', 'upload/2020/4/regular-d522ed9b810b43259a1ac62e2a3a315a.jpg', 300, 'image/jpeg', 'regular', 'upload/2020/4/regular-d522ed9b810b43259a1ac62e2a3a315a.jpg', 13558, 'jpg', 'upload/2020/4/regular-d522ed9b810b43259a1ac62e2a3a315a-thumbnail.jpg', 0, 530);
INSERT INTO `attachments` VALUES (35, '2020-05-18 20:12:09', 0, '2020-05-18 20:12:09', 'upload/2020/05/commons-logo-727d29ca44d04ac4bbdbf8efb936988a.png', 100, 'image/png', 'commons-logo', 'upload/2020/05/commons-logo-727d29ca44d04ac4bbdbf8efb936988a.png', 6067, 'png', 'upload/2020/05/commons-logo-727d29ca44d04ac4bbdbf8efb936988a-thumbnail.png', 0, 350);
INSERT INTO `attachments` VALUES (36, '2020-05-29 14:23:22', 0, '2020-05-29 14:23:22', 'upload/2020/05/opencv-45e4016218034a929f3b17aa1471ff2a.jpg', 148, 'image/jpeg', 'opencv', 'upload/2020/05/opencv-45e4016218034a929f3b17aa1471ff2a.jpg', 4946, 'jpg', 'upload/2020/05/opencv-45e4016218034a929f3b17aa1471ff2a-thumbnail.jpg', 0, 341);
INSERT INTO `attachments` VALUES (37, '2020-05-31 17:17:36', 0, '2020-05-31 17:17:36', 'upload/2020/05/logback-c0e50aebb24f4f88ba632e7e76c9465a.jpg', 135, 'image/jpeg', 'logback', 'upload/2020/05/logback-c0e50aebb24f4f88ba632e7e76c9465a.jpg', 10438, 'jpg', 'upload/2020/05/logback-c0e50aebb24f4f88ba632e7e76c9465a-thumbnail.jpg', 0, 373);
INSERT INTO `attachments` VALUES (38, '2020-06-03 21:47:21', 0, '2020-06-03 21:47:21', 'upload/2020/06/async-23e3c1b368a14361869443fbb109867e.jpg', 156, 'image/jpeg', 'async', 'upload/2020/06/async-23e3c1b368a14361869443fbb109867e.jpg', 8532, 'jpg', 'upload/2020/06/async-23e3c1b368a14361869443fbb109867e-thumbnail.jpg', 0, 322);
INSERT INTO `attachments` VALUES (39, '2020-06-03 21:48:40', 0, '2020-06-03 21:48:40', 'upload/2020/06/redis-a0256cf1354045fd9224e35e5500f97d.jpg', 263, 'image/jpeg', 'redis', 'upload/2020/06/redis-a0256cf1354045fd9224e35e5500f97d.jpg', 72177, 'jpg', 'upload/2020/06/redis-a0256cf1354045fd9224e35e5500f97d-thumbnail.jpg', 0, 700);
INSERT INTO `attachments` VALUES (40, '2020-06-20 19:01:18', 0, '2020-06-20 19:01:18', 'upload/2020/06/images-c392cd43e3ad4c34863588c66be19fab.jpg', 153, 'image/jpeg', 'images', 'upload/2020/06/images-c392cd43e3ad4c34863588c66be19fab.jpg', 8203, 'jpg', 'upload/2020/06/images-c392cd43e3ad4c34863588c66be19fab-thumbnail.jpg', 0, 328);
INSERT INTO `attachments` VALUES (41, '2020-06-20 19:06:06', 0, '2020-06-20 19:06:06', 'upload/2020/06/vue-9a440de4cde848ba8c82070eaff13656.jpg', 159, 'image/jpeg', 'vue', 'upload/2020/06/vue-9a440de4cde848ba8c82070eaff13656.jpg', 1583, 'jpg', 'upload/2020/06/vue-9a440de4cde848ba8c82070eaff13656-thumbnail.jpg', 0, 318);

-- ----------------------------
-- Table structure for categories
-- ----------------------------
DROP TABLE IF EXISTS `categories`;
CREATE TABLE `categories`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `create_time` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0),
  `deleted` tinyint(4) NULL DEFAULT 0,
  `update_time` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0),
  `description` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '',
  `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `parent_id` int(11) NULL DEFAULT 0,
  `slug_name` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `slug` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `thumbnail` varchar(1023) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `UK_oul14ho7bctbefv8jywp5v3i2`(`slug`) USING BTREE,
  UNIQUE INDEX `UK_dnauirmerr5vjtq6ih53j8rj5`(`slug_name`) USING BTREE,
  INDEX `categories_name`(`name`) USING BTREE,
  INDEX `categories_parent_id`(`parent_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 14 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of categories
-- ----------------------------
INSERT INTO `categories` VALUES (1, '2019-12-06 20:28:17', 0, '2020-02-06 15:41:45', '分享描述成型项目', 'Project', 0, 'Project', 'Project', NULL);
INSERT INTO `categories` VALUES (2, '2019-12-06 20:28:43', 0, '2020-02-06 15:41:33', '描述文档,功能模块设计', 'world', 0, 'world', 'world', NULL);
INSERT INTO `categories` VALUES (3, '2019-12-06 20:28:58', 0, '2020-02-06 15:41:22', '', 'Java', 0, 'Java', 'Java', NULL);
INSERT INTO `categories` VALUES (4, '2019-12-06 20:29:14', 0, '2020-02-06 15:41:06', '错误解决办法', '错误解决', 6, 'error or mistake', 'error or mistake', NULL);
INSERT INTO `categories` VALUES (5, '2019-12-09 11:38:28', 0, '2020-02-06 15:39:53', '', 'Spring Boot', 0, 'Spring Boot', 'Spring Boot', NULL);
INSERT INTO `categories` VALUES (6, '2019-12-12 17:01:36', 0, '2020-02-06 15:38:56', '日常错误,技术记录', '日常打卡', 0, 'punch the clock', 'punch the clock', NULL);
INSERT INTO `categories` VALUES (7, '2020-02-06 15:40:17', 0, '2020-02-06 15:40:17', '', 'Spring Could', 0, 'Spring Could', 'Spring Could', NULL);
INSERT INTO `categories` VALUES (8, '2020-02-06 15:41:59', 0, '2020-02-06 15:41:59', '', 'Linux', 0, 'Linux', 'Linux', NULL);
INSERT INTO `categories` VALUES (9, '2020-02-06 15:42:19', 0, '2020-02-06 15:42:19', '介绍各种实用软件', '软件', 0, '软件', '软件', NULL);
INSERT INTO `categories` VALUES (10, '2020-02-06 15:42:48', 0, '2020-02-06 15:42:48', '', 'SQL', 0, 'SQL', 'SQL', NULL);
INSERT INTO `categories` VALUES (11, '2020-03-11 22:09:23', 0, '2020-03-11 22:09:23', '', 'Python', 0, 'python', 'python', NULL);
INSERT INTO `categories` VALUES (12, '2020-04-05 12:47:23', 0, '2020-04-05 12:47:23', '', 'regular', 2, 'regular', 'regular', NULL);
INSERT INTO `categories` VALUES (13, '2020-06-20 19:04:43', 0, '2020-06-20 19:04:43', '', 'vue', 0, NULL, 'js', '');

-- ----------------------------
-- Table structure for comment_black_list
-- ----------------------------
DROP TABLE IF EXISTS `comment_black_list`;
CREATE TABLE `comment_black_list`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `create_time` datetime(6) NULL DEFAULT NULL,
  `update_time` datetime(6) NULL DEFAULT NULL,
  `ban_time` datetime(6) NULL DEFAULT NULL,
  `ip_address` varchar(127) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of comment_black_list
-- ----------------------------

-- ----------------------------
-- Table structure for comments
-- ----------------------------
DROP TABLE IF EXISTS `comments`;
CREATE TABLE `comments`  (
  `type` int(11) NOT NULL DEFAULT 0,
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `create_time` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0),
  `deleted` tinyint(4) NULL DEFAULT 0,
  `update_time` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0),
  `author` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `author_url` varchar(512) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '',
  `content` varchar(1023) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `email` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `gravatar_md5` varchar(128) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '',
  `ip_address` varchar(127) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '',
  `is_admin` tinyint(4) NULL DEFAULT 0,
  `parent_id` bigint(20) NULL DEFAULT 0,
  `post_id` int(11) NOT NULL,
  `status` int(11) NULL DEFAULT 1,
  `top_priority` int(11) NULL DEFAULT 0,
  `user_agent` varchar(512) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '',
  `allow_notification` bit(1) NULL DEFAULT b'1',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `comments_post_id`(`post_id`) USING BTREE,
  INDEX `comments_type_status`(`type`, `status`) USING BTREE,
  INDEX `comments_parent_id`(`parent_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 10 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of comments
-- ----------------------------
INSERT INTO `comments` VALUES (0, 1, '2019-12-06 18:53:44', 0, '2019-12-06 18:56:43', 'Halo Bot', 'https://halo.run', '欢迎使用 Halo，这是你的第一条评论。', 'halo@halo.run', '364a00bb727d259fcba033f44b5740f6', '223.107.140.172', 0, 0, 1, 2, NULL, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.132 Safari/537.36', b'1');
INSERT INTO `comments` VALUES (0, 2, '2019-12-06 19:03:01', 0, '2019-12-06 19:03:01', '木偶', '', '哦哟 不错喔~', '1321763@qq.com', '0353e630c65760ddb16498b742d3ba52', '223.107.140.172', 0, 0, 1, 0, NULL, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.132 Safari/537.36', b'1');
INSERT INTO `comments` VALUES (0, 3, '2019-12-06 20:46:35', 0, '2019-12-06 20:46:35', '星野狗子', '', '哈啊哈啊哈哈哈，我来了', '1615848867@qq.com', 'f22a96c8730dafa72435107573792531', '123.147.250.10', 0, 0, 1, 0, NULL, 'Mozilla/5.0 (iPhone; CPU iPhone OS 12_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/16B92 QQ/8.1.8.429 V1_IPH_SQ_8.1.8_1_APP_A Pixel/1080 Core/UIWebView Device/Apple(iPhone 8Plus) NetType/4G', b'1');
INSERT INTO `comments` VALUES (0, 4, '2019-12-06 20:49:27', 0, '2019-12-06 20:49:27', 'Alert Software', 'http://111.229.114.126', '哈哈哈哈~可以可以', '15696756582@163.com', '062ef4f2cababeb3862f9469f34bdd57', '223.107.140.172', 1, 3, 1, 0, NULL, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.132 Safari/537.36', b'1');
INSERT INTO `comments` VALUES (0, 5, '2019-12-06 21:19:58', 0, '2019-12-06 21:19:58', 'Lianiche', '', '厉害', '1009644016@qq.com', '5227e1e30e6d58ee6022f42d827b8481', '223.104.248.2', 0, 0, 1, 0, NULL, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/534.24 (KHTML, like Gecko) Chrome/71.0.3578.141 Safari/534.24 XiaoMi/MiuiBrowser/11.1.7', b'1');
INSERT INTO `comments` VALUES (0, 6, '2019-12-06 21:26:44', 0, '2019-12-06 21:26:44', '1', '', '厉害', '123@qq.com', '487f87505f619bf9ea08f26bb34f8118', '124.160.214.36', 0, 0, 3, 0, NULL, 'Mozilla/5.0 (Linux; U; Android 9; zh-CN; Mi Note 3 Build/PKQ1.181007.001) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/57.0.2987.108 Quark/3.6.2.122 Mobile Safari/537.36', b'1');
INSERT INTO `comments` VALUES (0, 7, '2020-01-03 22:55:30', 0, '2020-01-03 22:55:30', '12138', '', '接楼求期末别挂科', '12138@qq.con', '6e45e639fd60cc07e19528c8746920fc', '223.67.189.57', 0, 0, 18, 0, NULL, 'Mozilla/5.0 (iPhone; CPU iPhone OS 12_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/16B92 QQ/8.2.0.617 V1_IPH_SQ_8.2.0_1_APP_A Pixel/1080 MiniAppEnable Core/WKWebView Device/Apple(iPhone 8Plus) NetType/WIFI QBWebViewType/1 WKType/1', b'1');
INSERT INTO `comments` VALUES (0, 8, '2020-01-05 23:17:44', 0, '2020-01-05 23:17:44', '球球', '', '加油，生活，乾坤未定，你我皆是黑马', '158167366@qq.com', 'dbeeb2b82a48a1d2cb36aaa72c50b494', '123.147.246.1', 0, 0, 17, 0, NULL, 'Mozilla/5.0 (iPhone; CPU iPhone OS 12_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.0 Mobile/15E148 Safari/604.1', b'1');
INSERT INTO `comments` VALUES (0, 9, '2020-02-27 16:21:22', 0, '2020-02-27 16:21:22', '你爸爸', '', '哈哈哈哈哈哈哈', '1234567890@0987654321.com', '956686345a7a67d874c9cd550d0c23a8', '49.69.242.151', 0, 0, 25, 0, NULL, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.106 Safari/537.36', b'1');

-- ----------------------------
-- Table structure for flyway_schema_history
-- ----------------------------
DROP TABLE IF EXISTS `flyway_schema_history`;
CREATE TABLE `flyway_schema_history`  (
  `installed_rank` int(11) NOT NULL,
  `version` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `description` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `type` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `script` varchar(1000) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `checksum` int(11) NULL DEFAULT NULL,
  `installed_by` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `installed_on` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0),
  `execution_time` int(11) NOT NULL,
  `success` tinyint(1) NOT NULL,
  PRIMARY KEY (`installed_rank`) USING BTREE,
  INDEX `flyway_schema_history_s_idx`(`success`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of flyway_schema_history
-- ----------------------------
INSERT INTO `flyway_schema_history` VALUES (1, '1', '<< Flyway Baseline >>', 'BASELINE', '<< Flyway Baseline >>', NULL, 'root', '2020-04-10 11:21:16', 0, 1);
INSERT INTO `flyway_schema_history` VALUES (2, '2', 'migrate 1.2.0-beta.1 to 1.2.0-beta.2', 'SQL', 'V2__migrate_1.2.0-beta.1_to_1.2.0-beta.2.sql', 623818472, 'root', '2020-04-10 11:21:16', 22, 1);
INSERT INTO `flyway_schema_history` VALUES (3, '3', 'migrate 1.3.0-beta.1 to 1.3.0-beta.2', 'SQL', 'V3__migrate_1.3.0-beta.1_to_1.3.0-beta.2.sql', -417975340, 'root', '2020-04-10 11:21:16', 81, 1);
INSERT INTO `flyway_schema_history` VALUES (4, '4', 'migrate 1.3.0-beta.2 to 1.3.0-beta.3', 'SQL', 'V4__migrate_1.3.0-beta.2_to_1.3.0-beta.3.sql', 589261839, 'root', '2020-04-10 11:21:16', 20, 1);

-- ----------------------------
-- Table structure for journals
-- ----------------------------
DROP TABLE IF EXISTS `journals`;
CREATE TABLE `journals`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `create_time` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0),
  `deleted` tinyint(4) NULL DEFAULT 0,
  `update_time` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0),
  `content` text CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `likes` bigint(20) NULL DEFAULT 0,
  `type` int(11) NULL DEFAULT 1,
  `source_content` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 3 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of journals
-- ----------------------------
INSERT INTO `journals` VALUES (1, '2020-02-06 15:25:25', 0, '2020-02-06 15:25:25', 'UUID\n\n\nimport java.util.UUID;\n\npublic class Test {\n\n    public static void main(String[] args){\n        String uuid = UUID.randomUUID().toString().replaceAll(\"-\", \"\");\n        System.out.println(uuid);\n    }\n}', 0, 0, 'UUID\n\n\nimport java.util.UUID;\n\npublic class Test {\n\n    public static void main(String[] args){\n        String uuid = UUID.randomUUID().toString().replaceAll(\"-\", \"\");\n        System.out.println(uuid);\n    }\n}');
INSERT INTO `journals` VALUES (2, '2020-03-13 17:27:12', 0, '2020-03-13 17:27:12', '在POM 4中，<dependency>中还引入了<scope>，它主要管理依赖的部署。目前<scope>可以使用5个值：\n\n    * compile，缺省值，适用于所有阶段，会随着项目一起发布。\n    * provided，类似compile，期望JDK、容器或使用者会提供这个依赖。如servlet.jar。\n    * runtime，只在运行时使用，如JDBC驱动，适用运行和测试阶段。\n    * test，只在测试时使用，用于编译和运行测试代码。不会随项目发布。\n    * system，类似provided，需要显式提供包含依赖的jar，Maven不会在Repository中查找它。', 0, 0, '在POM 4中，<dependency>中还引入了<scope>，它主要管理依赖的部署。目前<scope>可以使用5个值：\n\n    * compile，缺省值，适用于所有阶段，会随着项目一起发布。\n    * provided，类似compile，期望JDK、容器或使用者会提供这个依赖。如servlet.jar。\n    * runtime，只在运行时使用，如JDBC驱动，适用运行和测试阶段。\n    * test，只在测试时使用，用于编译和运行测试代码。不会随项目发布。\n    * system，类似provided，需要显式提供包含依赖的jar，Maven不会在Repository中查找它。');

-- ----------------------------
-- Table structure for links
-- ----------------------------
DROP TABLE IF EXISTS `links`;
CREATE TABLE `links`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `create_time` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0),
  `deleted` tinyint(4) NULL DEFAULT 0,
  `update_time` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0),
  `description` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '',
  `logo` varchar(1023) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '',
  `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `priority` int(11) NULL DEFAULT 0,
  `team` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '',
  `url` varchar(1023) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `links_name`(`name`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 4 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of links
-- ----------------------------
INSERT INTO `links` VALUES (1, '2019-12-14 14:41:32', 0, '2020-03-11 22:15:42', 'github主页', 'https://github.githubassets.com/favicon.ico', 'gihub主页', 2, '', 'https://github.com/czy1024');
INSERT INTO `links` VALUES (2, '2020-03-11 22:14:05', 0, '2020-03-11 22:17:03', '致力于一体化酒店管理\n', 'http://111.229.114.126:8088/hotel/img/favicon.ico;jsessionid=0842A8F75B6D2C53A6E30824BE6A2FFB', 'AlterSoftware 酒店系统', 1, '', 'http://111.229.114.126:8088/hotel');
INSERT INTO `links` VALUES (3, '2020-03-11 22:18:51', 0, '2020-03-11 22:18:51', '智慧的学情分析,智能的状态检测', 'http://111.229.114.126:8088/hotel/img/favicon.ico', 'genesis 智慧学情分析', 3, '', 'http://111.229.114.126:8088/genesis');

-- ----------------------------
-- Table structure for logs
-- ----------------------------
DROP TABLE IF EXISTS `logs`;
CREATE TABLE `logs`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `create_time` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0),
  `deleted` tinyint(4) NULL DEFAULT 0,
  `update_time` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0),
  `content` varchar(1023) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `ip_address` varchar(127) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '',
  `log_key` varchar(1023) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '',
  `type` int(11) NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `logs_create_time`(`create_time`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 233 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of logs
-- ----------------------------
INSERT INTO `logs` VALUES (1, '2019-12-06 18:53:44', 0, '2019-12-06 18:53:44', '博客已成功初始化', NULL, '', 0);
INSERT INTO `logs` VALUES (2, '2019-12-06 18:53:52', 0, '2019-12-06 18:53:52', 'AlertSoftware', NULL, '', 25);
INSERT INTO `logs` VALUES (3, '2019-12-06 18:55:51', 0, '2019-12-06 18:55:51', 'AlertSoftware', NULL, '', 45);
INSERT INTO `logs` VALUES (4, '2019-12-06 19:02:22', 0, '2019-12-06 19:02:22', 'Hello ', NULL, '', 15);
INSERT INTO `logs` VALUES (5, '2019-12-06 19:38:22', 0, '2019-12-06 19:38:22', 'linux的tomcat部署项目出错解决办法', NULL, '', 5);
INSERT INTO `logs` VALUES (6, '2019-12-06 20:15:47', 0, '2019-12-06 20:15:47', '智●助教学 智能知识点分析系统需求分析文稿', NULL, '', 5);
INSERT INTO `logs` VALUES (7, '2019-12-06 20:16:02', 0, '2019-12-06 20:16:02', '智●助教学 智能知识点分析系统需求分析文稿', NULL, '', 15);
INSERT INTO `logs` VALUES (8, '2019-12-06 20:16:32', 0, '2019-12-06 20:16:32', '智●助教学 智能知识点分析系统需求分析文稿', NULL, '', 15);
INSERT INTO `logs` VALUES (9, '2019-12-06 20:26:59', 0, '2019-12-06 20:26:59', '智●助教学 智能知识点分析系统', NULL, '', 5);
INSERT INTO `logs` VALUES (10, '2019-12-06 20:34:51', 0, '2019-12-06 20:34:51', 'AlterSoftware', NULL, '', 35);
INSERT INTO `logs` VALUES (11, '2019-12-06 20:35:12', 0, '2019-12-06 20:35:12', 'Alert Software', NULL, '', 25);
INSERT INTO `logs` VALUES (12, '2019-12-07 01:12:41', 0, '2019-12-07 01:12:41', 'Alert Software', NULL, '', 25);
INSERT INTO `logs` VALUES (13, '2019-12-07 10:29:56', 0, '2019-12-07 10:29:56', 'Alert Software', NULL, '', 25);
INSERT INTO `logs` VALUES (14, '2019-12-09 11:45:03', 0, '2019-12-09 11:45:03', '12_8.日志->可视化酒店场景分析', NULL, '', 5);
INSERT INTO `logs` VALUES (15, '2019-12-09 11:46:29', 0, '2019-12-09 11:46:29', '12_8.日志->可视化酒店场景分析', NULL, '', 15);
INSERT INTO `logs` VALUES (16, '2019-12-09 11:47:50', 0, '2019-12-09 11:47:50', '12_8.日志->可视化酒店场景分析', NULL, '', 15);
INSERT INTO `logs` VALUES (17, '2019-12-09 11:48:25', 0, '2019-12-09 11:48:25', '12_8.日志->可视化酒店场景分析', NULL, '', 15);
INSERT INTO `logs` VALUES (18, '2019-12-09 11:50:36', 0, '2019-12-09 11:50:36', '12_8.日志->可视化酒店场景分析', NULL, '', 15);
INSERT INTO `logs` VALUES (19, '2019-12-09 11:52:08', 0, '2019-12-09 11:52:08', '12_8.日志->可视化酒店场景分析', NULL, '', 15);
INSERT INTO `logs` VALUES (20, '2019-12-09 11:52:44', 0, '2019-12-09 11:52:44', '12_8.日志->可视化酒店场景分析', NULL, '', 15);
INSERT INTO `logs` VALUES (21, '2019-12-09 11:53:39', 0, '2019-12-09 11:53:39', '12_8.日志->可视化酒店场景分析', NULL, '', 15);
INSERT INTO `logs` VALUES (22, '2019-12-09 11:54:14', 0, '2019-12-09 11:54:14', '12_8.日志->可视化酒店场景分析', NULL, '', 15);
INSERT INTO `logs` VALUES (23, '2019-12-09 11:55:26', 0, '2019-12-09 11:55:26', '12_8.日志->可视化酒店场景分析', NULL, '', 15);
INSERT INTO `logs` VALUES (24, '2019-12-09 11:58:05', 0, '2019-12-09 11:58:05', '12_8.日志->可视化酒店场景分析', NULL, '', 15);
INSERT INTO `logs` VALUES (25, '2019-12-09 11:58:36', 0, '2019-12-09 11:58:36', '12_8.日志->可视化酒店场景分析', NULL, '', 15);
INSERT INTO `logs` VALUES (26, '2019-12-09 12:11:19', 0, '2019-12-09 12:11:19', '12_8.日志->可视化酒店场景分析', NULL, '', 15);
INSERT INTO `logs` VALUES (27, '2019-12-09 12:16:23', 0, '2019-12-09 12:16:23', '12_8.日志->可视化酒店场景分析', NULL, '', 15);
INSERT INTO `logs` VALUES (28, '2019-12-09 12:17:06', 0, '2019-12-09 12:17:06', '12_8.日志->可视化酒店场景分析', NULL, '', 15);
INSERT INTO `logs` VALUES (29, '2019-12-09 12:17:23', 0, '2019-12-09 12:17:23', '12_8.日志->可视化酒店场景分析', NULL, '', 15);
INSERT INTO `logs` VALUES (30, '2019-12-09 12:17:39', 0, '2019-12-09 12:17:39', '12_8.日志->可视化酒店场景分析', NULL, '', 15);
INSERT INTO `logs` VALUES (31, '2019-12-12 17:02:00', 0, '2019-12-12 17:02:00', '12_12英语四级打卡', NULL, '', 5);
INSERT INTO `logs` VALUES (32, '2019-12-12 22:14:27', 0, '2019-12-12 22:14:27', '12_12英语四级打卡', NULL, '', 5);
INSERT INTO `logs` VALUES (33, '2019-12-14 14:43:42', 0, '2019-12-14 14:43:42', '12_14英语打卡', NULL, '', 5);
INSERT INTO `logs` VALUES (34, '2019-12-16 17:23:11', 0, '2019-12-16 17:23:11', '12_16英语打卡', NULL, '', 5);
INSERT INTO `logs` VALUES (35, '2019-12-17 19:48:50', 0, '2019-12-17 19:48:50', '12_16英语打卡', NULL, '', 15);
INSERT INTO `logs` VALUES (36, '2019-12-18 22:39:03', 0, '2019-12-18 22:39:03', '12_18英语打卡', NULL, '', 5);
INSERT INTO `logs` VALUES (37, '2019-12-19 09:00:50', 0, '2019-12-19 09:00:50', 'Alter Software', NULL, '', 45);
INSERT INTO `logs` VALUES (38, '2019-12-19 09:33:52', 0, '2019-12-19 09:33:52', '12_8.日志->可视化酒店场景分析', NULL, '', 15);
INSERT INTO `logs` VALUES (39, '2019-12-19 09:34:03', 0, '2019-12-19 09:34:03', '12_8.日志->可视化酒店场景分析', NULL, '', 15);
INSERT INTO `logs` VALUES (40, '2019-12-19 23:25:19', 0, '2019-12-19 23:25:19', '2019年度个人总结', NULL, '', 5);
INSERT INTO `logs` VALUES (41, '2019-12-19 23:26:08', 0, '2019-12-19 23:26:08', '2019年度个人总结', NULL, '', 15);
INSERT INTO `logs` VALUES (42, '2019-12-20 13:04:20', 0, '2019-12-20 13:04:20', '12_20英语打卡', NULL, '', 5);
INSERT INTO `logs` VALUES (43, '2019-12-20 13:30:08', 0, '2019-12-20 13:30:08', '2019年度个人总结', NULL, '', 15);
INSERT INTO `logs` VALUES (44, '2019-12-20 13:31:05', 0, '2019-12-20 13:31:05', '2019年度个人总结', NULL, '', 15);
INSERT INTO `logs` VALUES (45, '2019-12-20 13:31:41', 0, '2019-12-20 13:31:41', '2019年度个人总结', NULL, '', 15);
INSERT INTO `logs` VALUES (46, '2019-12-20 23:27:01', 0, '2019-12-20 23:27:01', '2019年度个人总结', NULL, '', 15);
INSERT INTO `logs` VALUES (47, '2019-12-20 23:27:58', 0, '2019-12-20 23:27:58', '2019年度个人总结', NULL, '', 15);
INSERT INTO `logs` VALUES (48, '2019-12-20 23:30:03', 0, '2019-12-20 23:30:03', '2019再见,2020你好', NULL, '', 15);
INSERT INTO `logs` VALUES (49, '2019-12-20 23:31:18', 0, '2019-12-20 23:31:18', '2019再见,2020你好', NULL, '', 15);
INSERT INTO `logs` VALUES (50, '2019-12-23 12:27:39', 0, '2019-12-23 12:27:39', '12_23英语打卡', NULL, '', 5);
INSERT INTO `logs` VALUES (51, '2019-12-23 12:27:59', 0, '2019-12-23 12:27:59', '12_20英语打卡', NULL, '', 15);
INSERT INTO `logs` VALUES (52, '2019-12-23 17:42:25', 0, '2019-12-23 17:42:25', '12_8.日志->可视化酒店场景分析', NULL, '', 15);
INSERT INTO `logs` VALUES (53, '2019-12-23 17:42:43', 0, '2019-12-23 17:42:43', '12_8.日志->可视化酒店场景分析', NULL, '', 15);
INSERT INTO `logs` VALUES (54, '2019-12-23 17:43:42', 0, '2019-12-23 17:43:42', '12_23英语打卡', NULL, '', 15);
INSERT INTO `logs` VALUES (55, '2019-12-23 17:43:57', 0, '2019-12-23 17:43:57', '12_20英语打卡', NULL, '', 15);
INSERT INTO `logs` VALUES (56, '2019-12-23 17:44:10', 0, '2019-12-23 17:44:10', '12_18英语打卡', NULL, '', 15);
INSERT INTO `logs` VALUES (57, '2019-12-23 17:44:24', 0, '2019-12-23 17:44:24', '12_16英语打卡', NULL, '', 15);
INSERT INTO `logs` VALUES (58, '2019-12-23 17:44:35', 0, '2019-12-23 17:44:35', '12_14英语打卡', NULL, '', 15);
INSERT INTO `logs` VALUES (59, '2019-12-23 17:44:47', 0, '2019-12-23 17:44:47', '12_14英语打卡', NULL, '', 15);
INSERT INTO `logs` VALUES (60, '2019-12-23 17:45:07', 0, '2019-12-23 17:45:07', '12_12英语打卡', NULL, '', 15);
INSERT INTO `logs` VALUES (61, '2019-12-23 17:45:21', 0, '2019-12-23 17:45:21', '12_12英语打卡', NULL, '', 15);
INSERT INTO `logs` VALUES (62, '2019-12-23 17:53:31', 0, '2019-12-23 17:53:31', 'idea配置mybatisxml提示', NULL, '', 5);
INSERT INTO `logs` VALUES (63, '2019-12-24 21:32:34', 0, '2019-12-24 21:32:34', '英语打卡_12_14', NULL, '', 5);
INSERT INTO `logs` VALUES (64, '2019-12-24 21:32:47', 0, '2019-12-24 21:32:47', '英语打卡12_14', NULL, '', 15);
INSERT INTO `logs` VALUES (65, '2019-12-24 21:33:31', 0, '2019-12-24 21:33:31', '英语打卡12_14', NULL, '', 15);
INSERT INTO `logs` VALUES (66, '2019-12-25 20:24:04', 0, '2019-12-25 20:24:04', '英语打卡12_24', NULL, '', 15);
INSERT INTO `logs` VALUES (67, '2019-12-25 20:24:44', 0, '2019-12-25 20:24:44', '英语打卡12_25', NULL, '', 5);
INSERT INTO `logs` VALUES (68, '2019-12-26 20:59:23', 0, '2019-12-26 20:59:23', '计算机网络知识点', NULL, '', 5);
INSERT INTO `logs` VALUES (69, '2019-12-27 22:50:18', 0, '2019-12-27 22:50:18', '操作系统', NULL, '', 5);
INSERT INTO `logs` VALUES (70, '2019-12-28 16:46:33', 0, '2019-12-28 16:46:33', '操作系统简答题.md', NULL, '', 5);
INSERT INTO `logs` VALUES (71, '2020-01-01 22:42:02', 0, '2020-01-01 22:42:02', '计算机网络知识点', NULL, '', 15);
INSERT INTO `logs` VALUES (72, '2020-01-01 22:42:17', 0, '2020-01-01 22:42:17', '操作系统简答题.md', NULL, '', 20);
INSERT INTO `logs` VALUES (73, '2020-01-01 22:43:00', 0, '2020-01-01 22:43:00', '计算机网络知识点', NULL, '', 15);
INSERT INTO `logs` VALUES (74, '2020-01-06 15:28:36', 0, '2020-01-06 15:28:36', 'AlterSoftware', NULL, '', 35);
INSERT INTO `logs` VALUES (75, '2020-01-06 15:28:47', 0, '2020-01-06 15:28:47', 'AlterSoftware', NULL, '', 35);
INSERT INTO `logs` VALUES (76, '2020-01-06 15:28:55', 0, '2020-01-06 15:28:55', 'AlterSoftware', NULL, '', 35);
INSERT INTO `logs` VALUES (77, '2020-01-06 15:29:02', 0, '2020-01-06 15:29:02', 'AlterSoftware', NULL, '', 35);
INSERT INTO `logs` VALUES (78, '2020-01-06 15:29:27', 0, '2020-01-06 15:29:27', 'AlterSoftware', NULL, '', 35);
INSERT INTO `logs` VALUES (79, '2020-01-06 15:30:39', 0, '2020-01-06 15:30:39', 'AlterSoftware', NULL, '', 35);
INSERT INTO `logs` VALUES (80, '2020-01-06 15:30:48', 0, '2020-01-06 15:30:48', 'AlertSoftware', NULL, '', 35);
INSERT INTO `logs` VALUES (81, '2020-01-06 15:31:09', 0, '2020-01-06 15:31:09', 'AlterSoftware', NULL, '', 35);
INSERT INTO `logs` VALUES (82, '2020-01-06 15:31:20', 0, '2020-01-06 15:31:20', 'AlterSoftware', NULL, '', 35);
INSERT INTO `logs` VALUES (83, '2020-01-06 20:27:56', 0, '2020-01-06 20:27:56', 'Alter Software', NULL, '', 45);
INSERT INTO `logs` VALUES (84, '2020-01-06 20:27:56', 0, '2020-01-06 20:27:56', 'hz*****y', NULL, '', 40);
INSERT INTO `logs` VALUES (85, '2020-01-07 11:07:22', 0, '2020-01-07 11:07:22', 'AlertSoftware', NULL, '', 35);
INSERT INTO `logs` VALUES (86, '2020-01-07 11:07:28', 0, '2020-01-07 11:07:28', 'AlterSoftware', NULL, '', 35);
INSERT INTO `logs` VALUES (87, '2020-01-07 11:07:36', 0, '2020-01-07 11:07:36', 'AlterSoftware', NULL, '', 35);
INSERT INTO `logs` VALUES (88, '2020-01-07 11:07:41', 0, '2020-01-07 11:07:41', 'AlterSoftware', NULL, '', 35);
INSERT INTO `logs` VALUES (89, '2020-01-07 11:07:59', 0, '2020-01-07 11:07:59', 'AlterSoftware', NULL, '', 35);
INSERT INTO `logs` VALUES (90, '2020-01-07 11:08:54', 0, '2020-01-07 11:08:54', 'AlterSoftware', NULL, '', 35);
INSERT INTO `logs` VALUES (91, '2020-01-07 11:09:01', 0, '2020-01-07 11:09:01', 'AlterSoftware', NULL, '', 35);
INSERT INTO `logs` VALUES (92, '2020-01-07 11:09:24', 0, '2020-01-07 11:09:24', 'AlterSoftware', NULL, '', 35);
INSERT INTO `logs` VALUES (93, '2020-01-07 11:09:47', 0, '2020-01-07 11:09:47', 'AlertSoftware', NULL, '', 35);
INSERT INTO `logs` VALUES (94, '2020-01-07 11:10:15', 0, '2020-01-07 11:10:15', 'AlertSoftware', NULL, '', 35);
INSERT INTO `logs` VALUES (95, '2020-01-07 11:10:22', 0, '2020-01-07 11:10:22', 'AlertSoftware', NULL, '', 35);
INSERT INTO `logs` VALUES (96, '2020-01-07 11:10:31', 0, '2020-01-07 11:10:31', 'AlterSoftware', NULL, '', 35);
INSERT INTO `logs` VALUES (97, '2020-01-07 11:10:37', 0, '2020-01-07 11:10:37', 'AlterSoftware', NULL, '', 35);
INSERT INTO `logs` VALUES (98, '2020-01-07 11:11:02', 0, '2020-01-07 11:11:02', 'Alter Software', NULL, '', 25);
INSERT INTO `logs` VALUES (99, '2020-01-07 11:12:52', 0, '2020-01-07 11:12:52', '数据库知识点', NULL, '', 5);
INSERT INTO `logs` VALUES (100, '2020-01-07 11:13:02', 0, '2020-01-07 11:13:02', '数据库知识点', NULL, '', 15);
INSERT INTO `logs` VALUES (101, '2020-01-07 11:15:08', 0, '2020-01-07 11:15:08', '数据库知识点', NULL, '', 15);
INSERT INTO `logs` VALUES (102, '2020-01-07 11:15:45', 0, '2020-01-07 11:15:45', '数据库知识点', NULL, '', 15);
INSERT INTO `logs` VALUES (103, '2020-01-07 18:10:51', 0, '2020-01-07 18:10:51', '数据库增删改查', NULL, '', 5);
INSERT INTO `logs` VALUES (104, '2020-01-07 18:12:22', 0, '2020-01-07 18:12:22', '数据库查询', NULL, '', 5);
INSERT INTO `logs` VALUES (105, '2020-01-07 18:12:39', 0, '2020-01-07 18:12:39', '数据库模式设计', NULL, '', 15);
INSERT INTO `logs` VALUES (106, '2020-01-07 18:14:29', 0, '2020-01-07 18:14:29', '数据库插入修改删除', NULL, '', 5);
INSERT INTO `logs` VALUES (107, '2020-01-07 18:34:17', 0, '2020-01-07 18:34:17', '数据库插入修改删除', NULL, '', 15);
INSERT INTO `logs` VALUES (108, '2020-01-07 18:34:39', 0, '2020-01-07 18:34:39', '数据库查询', NULL, '', 15);
INSERT INTO `logs` VALUES (109, '2020-01-07 18:35:18', 0, '2020-01-07 18:35:18', '数据库模式设计', NULL, '', 15);
INSERT INTO `logs` VALUES (110, '2020-01-08 21:10:27', 0, '2020-01-08 21:10:27', 'Java简答题', NULL, '', 5);
INSERT INTO `logs` VALUES (111, '2020-01-09 11:49:27', 0, '2020-01-09 11:49:27', 'Java简答题', NULL, '', 15);
INSERT INTO `logs` VALUES (112, '2020-01-09 11:54:21', 0, '2020-01-09 11:54:21', 'AlterSoftware', NULL, '', 35);
INSERT INTO `logs` VALUES (113, '2020-01-09 11:54:28', 0, '2020-01-09 11:54:28', 'AlterSoftware', NULL, '', 35);
INSERT INTO `logs` VALUES (114, '2020-01-09 11:55:00', 0, '2020-01-09 11:55:00', '1', NULL, '', 35);
INSERT INTO `logs` VALUES (115, '2020-01-09 11:55:18', 0, '2020-01-09 11:55:18', '10002', NULL, '', 35);
INSERT INTO `logs` VALUES (116, '2020-01-09 11:58:57', 0, '2020-01-09 11:58:57', 'iszychen', NULL, '', 35);
INSERT INTO `logs` VALUES (117, '2020-01-09 11:59:15', 0, '2020-01-09 11:59:15', 'Alter Software', NULL, '', 25);
INSERT INTO `logs` VALUES (118, '2020-01-09 12:01:22', 0, '2020-01-09 12:01:22', 'Alert Software', NULL, '', 35);
INSERT INTO `logs` VALUES (119, '2020-01-09 12:01:27', 0, '2020-01-09 12:01:27', 'Alert Software', NULL, '', 35);
INSERT INTO `logs` VALUES (120, '2020-01-09 12:01:36', 0, '2020-01-09 12:01:36', 'Alter Software', NULL, '', 35);
INSERT INTO `logs` VALUES (121, '2020-01-09 12:01:44', 0, '2020-01-09 12:01:44', 'Alter Software', NULL, '', 25);
INSERT INTO `logs` VALUES (122, '2020-01-09 12:06:04', 0, '2020-01-09 12:06:04', '15696756582@163.com', NULL, '', 35);
INSERT INTO `logs` VALUES (123, '2020-01-09 12:06:18', 0, '2020-01-09 12:06:18', '15696756582@163.com', NULL, '', 35);
INSERT INTO `logs` VALUES (124, '2020-01-09 12:06:31', 0, '2020-01-09 12:06:31', '15696756582@163.com', NULL, '', 35);
INSERT INTO `logs` VALUES (125, '2020-01-09 12:07:02', 0, '2020-01-09 12:07:02', 'Alter Software', NULL, '', 25);
INSERT INTO `logs` VALUES (126, '2020-01-11 19:39:40', 0, '2020-01-11 19:39:40', 'Alter Software', NULL, '', 25);
INSERT INTO `logs` VALUES (127, '2020-01-15 22:18:33', 0, '2020-01-15 22:18:33', 'Alter Software', NULL, '', 25);
INSERT INTO `logs` VALUES (128, '2020-01-19 13:33:30', 0, '2020-01-19 13:33:30', 'VO，DO，DTO的概念和使用', NULL, '', 5);
INSERT INTO `logs` VALUES (129, '2020-01-23 00:45:01', 0, '2020-01-23 00:45:01', 'AlterSoftware', NULL, '', 35);
INSERT INTO `logs` VALUES (130, '2020-01-23 00:45:11', 0, '2020-01-23 00:45:11', 'AlterSoftware', NULL, '', 35);
INSERT INTO `logs` VALUES (131, '2020-01-23 00:45:18', 0, '2020-01-23 00:45:18', 'Alter Software', NULL, '', 25);
INSERT INTO `logs` VALUES (132, '2020-02-01 00:40:14', 0, '2020-02-01 00:40:14', 'Alter Software', NULL, '', 25);
INSERT INTO `logs` VALUES (133, '2020-02-06 15:19:35', 0, '2020-02-06 15:19:35', 'Alter Software', NULL, '', 25);
INSERT INTO `logs` VALUES (134, '2020-02-06 15:22:12', 0, '2020-02-06 15:22:12', 'ImmutableMap', NULL, '', 5);
INSERT INTO `logs` VALUES (135, '2020-02-06 15:24:52', 0, '2020-02-06 15:24:52', 'ImmutableMap', NULL, '', 15);
INSERT INTO `logs` VALUES (136, '2020-02-06 15:44:25', 0, '2020-02-06 15:44:25', '数据库查询', NULL, '', 15);
INSERT INTO `logs` VALUES (137, '2020-02-06 15:45:27', 0, '2020-02-06 15:45:27', 'ImmutableMap', NULL, '', 15);
INSERT INTO `logs` VALUES (138, '2020-02-06 15:47:34', 0, '2020-02-06 15:47:34', 'idea配置mybatisxml提示', NULL, '', 15);
INSERT INTO `logs` VALUES (139, '2020-02-06 15:47:54', 0, '2020-02-06 15:47:54', '数据库知识点', NULL, '', 15);
INSERT INTO `logs` VALUES (140, '2020-02-06 15:49:07', 0, '2020-02-06 15:49:07', 'ImmutableMap', NULL, '', 15);
INSERT INTO `logs` VALUES (141, '2020-02-06 15:49:19', 0, '2020-02-06 15:49:19', 'VO，DO，DTO的概念和使用', NULL, '', 15);
INSERT INTO `logs` VALUES (142, '2020-02-06 15:50:06', 0, '2020-02-06 15:50:06', 'Java简答题', NULL, '', 15);
INSERT INTO `logs` VALUES (143, '2020-02-06 15:50:20', 0, '2020-02-06 15:50:20', 'Java简答题', NULL, '', 15);
INSERT INTO `logs` VALUES (144, '2020-02-06 15:50:34', 0, '2020-02-06 15:50:34', 'ImmutableMap', NULL, '', 15);
INSERT INTO `logs` VALUES (145, '2020-02-06 15:51:45', 0, '2020-02-06 15:51:45', '数据库插入修改删除', NULL, '', 15);
INSERT INTO `logs` VALUES (146, '2020-02-06 15:52:29', 0, '2020-02-06 15:52:29', '数据库查询', NULL, '', 15);
INSERT INTO `logs` VALUES (147, '2020-02-06 15:52:48', 0, '2020-02-06 15:52:48', '数据库模式设计', NULL, '', 15);
INSERT INTO `logs` VALUES (148, '2020-02-06 15:54:13', 0, '2020-02-06 15:54:13', '操作系统', NULL, '', 15);
INSERT INTO `logs` VALUES (149, '2020-02-06 15:54:27', 0, '2020-02-06 15:54:27', '计算机网络知识点', NULL, '', 15);
INSERT INTO `logs` VALUES (150, '2020-02-06 15:54:59', 0, '2020-02-06 15:54:59', 'linux的tomcat部署项目出错解决办法', NULL, '', 15);
INSERT INTO `logs` VALUES (151, '2020-02-06 15:55:58', 0, '2020-02-06 15:55:58', '智●助教学 智能知识点分析系统', NULL, '', 15);
INSERT INTO `logs` VALUES (152, '2020-02-06 15:56:22', 0, '2020-02-06 15:56:22', '数据库查询', NULL, '', 15);
INSERT INTO `logs` VALUES (153, '2020-02-09 02:53:04', 0, '2020-02-09 02:53:04', 'Alter Software', NULL, '', 25);
INSERT INTO `logs` VALUES (154, '2020-02-09 22:33:34', 0, '2020-02-09 22:33:34', 'IDEA 插件集合', NULL, '', 5);
INSERT INTO `logs` VALUES (155, '2020-02-09 22:34:09', 0, '2020-02-09 22:34:09', 'IDEA 插件集合', NULL, '', 15);
INSERT INTO `logs` VALUES (156, '2020-02-14 20:47:27', 0, '2020-02-14 20:47:27', 'Alter Software', NULL, '', 25);
INSERT INTO `logs` VALUES (157, '2020-02-16 16:03:31', 0, '2020-02-16 16:03:31', 'Alter Software', NULL, '', 25);
INSERT INTO `logs` VALUES (158, '2020-02-19 23:58:24', 0, '2020-02-19 23:58:24', 'Data.md', NULL, '', 5);
INSERT INTO `logs` VALUES (159, '2020-02-20 00:00:44', 0, '2020-02-20 00:00:44', '时间,字符串,数字的相互转化', NULL, '', 15);
INSERT INTO `logs` VALUES (160, '2020-02-20 00:03:14', 0, '2020-02-20 00:03:14', '时间,字符串,数字的相互转化', NULL, '', 15);
INSERT INTO `logs` VALUES (161, '2020-02-20 00:18:22', 0, '2020-02-20 00:18:22', 'Alter Software', NULL, '', 25);
INSERT INTO `logs` VALUES (162, '2020-03-03 13:16:48', 0, '2020-03-03 13:16:48', 'Alter Software', NULL, '', 25);
INSERT INTO `logs` VALUES (163, '2020-03-03 13:28:02', 0, '2020-03-03 13:28:02', 'Luna', NULL, '', 45);
INSERT INTO `logs` VALUES (164, '2020-03-11 22:05:48', 0, '2020-03-11 22:05:48', 'Luna', NULL, '', 25);
INSERT INTO `logs` VALUES (165, '2020-03-11 22:09:54', 0, '2020-03-11 22:09:54', 'Python的Get/Set', NULL, '', 5);
INSERT INTO `logs` VALUES (166, '2020-03-17 22:58:52', 0, '2020-03-17 22:58:52', 'Shiro的三个组件', NULL, '', 5);
INSERT INTO `logs` VALUES (167, '2020-03-29 17:36:08', 0, '2020-03-29 17:36:08', 'Luna', NULL, '', 25);
INSERT INTO `logs` VALUES (168, '2020-03-29 17:54:06', 0, '2020-03-29 17:54:06', 'SpringMVC的页面跳转', NULL, '', 5);
INSERT INTO `logs` VALUES (169, '2020-03-30 00:41:30', 0, '2020-03-30 00:41:30', 'SpringMVC的页面跳转', NULL, '', 15);
INSERT INTO `logs` VALUES (170, '2020-03-30 00:41:57', 0, '2020-03-30 00:41:57', 'SpringMVC的页面跳转', NULL, '', 15);
INSERT INTO `logs` VALUES (171, '2020-03-30 15:03:30', 0, '2020-03-30 15:03:30', 'Luna', NULL, '', 25);
INSERT INTO `logs` VALUES (172, '2020-03-30 15:08:40', 0, '2020-03-30 15:08:40', 'Alibaba JSON', NULL, '', 5);
INSERT INTO `logs` VALUES (173, '2020-03-30 15:13:00', 0, '2020-03-30 15:13:00', 'Alibaba JSON', NULL, '', 5);
INSERT INTO `logs` VALUES (174, '2020-04-01 11:56:06', 0, '2020-04-01 11:56:06', 'Luna', NULL, '', 25);
INSERT INTO `logs` VALUES (175, '2020-04-02 23:21:09', 0, '2020-04-02 23:21:09', 'Luna', NULL, '', 25);
INSERT INTO `logs` VALUES (176, '2020-04-02 23:39:41', 0, '2020-04-02 23:39:41', 'Luna', NULL, '', 25);
INSERT INTO `logs` VALUES (177, '2020-04-04 12:50:28', 0, '2020-04-04 12:50:28', 'Luna', NULL, '', 25);
INSERT INTO `logs` VALUES (178, '2020-04-04 12:53:15', 0, '2020-04-04 12:53:15', '2020-04-04-12-53-15', NULL, '', 5);
INSERT INTO `logs` VALUES (179, '2020-04-04 12:56:51', 0, '2020-04-04 12:56:51', 'Java Util', NULL, '', 15);
INSERT INTO `logs` VALUES (180, '2020-04-04 12:59:05', 0, '2020-04-04 12:59:05', 'Java Util', NULL, '', 15);
INSERT INTO `logs` VALUES (181, '2020-04-05 12:43:26', 0, '2020-04-05 12:43:26', 'Luna', NULL, '', 25);
INSERT INTO `logs` VALUES (182, '2020-04-05 12:47:54', 0, '2020-04-05 12:47:54', '正则表达式 ', NULL, '', 5);
INSERT INTO `logs` VALUES (183, '2020-04-12 23:44:41', 0, '2020-04-12 23:44:41', 'luna', '125.62.6.124', 'luna', 35);
INSERT INTO `logs` VALUES (184, '2020-04-12 23:44:52', 0, '2020-04-12 23:44:52', 'luna', '125.62.6.124', 'luna', 35);
INSERT INTO `logs` VALUES (185, '2020-04-12 23:44:57', 0, '2020-04-12 23:44:57', 'Luna', '125.62.6.124', 'Luna', 25);
INSERT INTO `logs` VALUES (186, '2020-04-12 23:48:48', 0, '2020-04-12 23:48:48', 'Java注解获取', '125.62.6.124', '36', 5);
INSERT INTO `logs` VALUES (187, '2020-04-13 00:40:21', 0, '2020-04-13 00:40:21', 'Luna', '125.62.6.124', 'Luna', 25);
INSERT INTO `logs` VALUES (188, '2020-04-13 00:54:40', 0, '2020-04-13 00:54:40', 'Luna', '125.62.6.124', 'Luna', 25);
INSERT INTO `logs` VALUES (189, '2020-04-13 01:03:16', 0, '2020-04-13 01:03:16', 'Luna', '125.62.6.124', 'Luna', 25);
INSERT INTO `logs` VALUES (190, '2020-04-13 01:08:35', 0, '2020-04-13 01:08:35', 'Luna', '125.62.6.124', 'Luna', 25);
INSERT INTO `logs` VALUES (191, '2020-04-13 01:42:37', 0, '2020-04-13 01:42:37', 'Luna', '125.62.6.124', 'Luna', 25);
INSERT INTO `logs` VALUES (192, '2020-04-15 09:29:19', 0, '2020-04-15 09:29:19', 'Luna', '125.62.6.12', 'Luna', 25);
INSERT INTO `logs` VALUES (193, '2020-04-15 09:32:38', 0, '2020-04-15 09:32:38', 'Luna', '125.62.6.12', '1', 45);
INSERT INTO `logs` VALUES (194, '2020-04-15 09:34:48', 0, '2020-04-15 09:34:48', 'Hello ', '125.62.6.12', '1', 15);
INSERT INTO `logs` VALUES (195, '2020-04-15 09:35:28', 0, '2020-04-15 09:35:28', 'Java注解获取', '125.62.6.12', '36', 15);
INSERT INTO `logs` VALUES (196, '2020-04-15 10:05:39', 0, '2020-04-15 10:05:39', 'Java注解获取', '125.62.6.12', '36', 15);
INSERT INTO `logs` VALUES (197, '2020-04-15 10:05:48', 0, '2020-04-15 10:05:48', 'Java注解获取', '125.62.6.12', '36', 15);
INSERT INTO `logs` VALUES (198, '2020-04-15 10:06:19', 0, '2020-04-15 10:06:19', '正则表达式 ', '125.62.6.12', '35', 15);
INSERT INTO `logs` VALUES (199, '2020-04-15 10:07:03', 0, '2020-04-15 10:07:03', 'Java Util', '125.62.6.12', '34', 15);
INSERT INTO `logs` VALUES (200, '2020-04-15 10:07:32', 0, '2020-04-15 10:07:32', 'Alibaba JSON', '125.62.6.12', '33', 15);
INSERT INTO `logs` VALUES (201, '2020-04-15 10:08:34', 0, '2020-04-15 10:08:34', 'SpringMVC的页面跳转', '125.62.6.12', '31', 15);
INSERT INTO `logs` VALUES (202, '2020-04-15 10:09:24', 0, '2020-04-15 10:09:24', 'Shiro的三个组件', '125.62.6.12', '30', 15);
INSERT INTO `logs` VALUES (203, '2020-04-15 10:09:53', 0, '2020-04-15 10:09:53', 'Python的Get/Set', '125.62.6.12', '29', 15);
INSERT INTO `logs` VALUES (204, '2020-04-15 10:10:22', 0, '2020-04-15 10:10:22', '时间,字符串,数字的相互转化', '125.62.6.12', '28', 15);
INSERT INTO `logs` VALUES (205, '2020-04-15 10:10:55', 0, '2020-04-15 10:10:55', 'IDEA 插件集合', '125.62.6.12', '27', 15);
INSERT INTO `logs` VALUES (206, '2020-04-15 10:11:17', 0, '2020-04-15 10:11:17', 'ImmutableMap', '125.62.6.12', '26', 15);
INSERT INTO `logs` VALUES (207, '2020-04-15 10:11:37', 0, '2020-04-15 10:11:37', 'VO，DO，DTO的概念和使用', '125.62.6.12', '25', 15);
INSERT INTO `logs` VALUES (208, '2020-05-07 13:40:33', 0, '2020-05-07 13:40:33', 'Luna', '125.62.6.117', 'Luna', 25);
INSERT INTO `logs` VALUES (209, '2020-05-07 13:44:14', 0, '2020-05-07 13:44:14', 'luna-common Java工具集', '125.62.6.117', '37', 5);
INSERT INTO `logs` VALUES (210, '2020-05-18 20:06:06', 0, '2020-05-18 20:06:06', 'Luna', '125.62.5.64', 'Luna', 25);
INSERT INTO `logs` VALUES (211, '2020-05-18 20:12:17', 0, '2020-05-18 20:12:17', 'Apache Commons Collections4迭代器', '125.62.5.64', '38', 5);
INSERT INTO `logs` VALUES (212, '2020-05-18 21:13:38', 0, '2020-05-18 21:13:38', 'Luna', '125.62.5.64', 'Luna', 25);
INSERT INTO `logs` VALUES (213, '2020-05-18 21:14:47', 0, '2020-05-18 21:14:47', 'Apache-commons-lang3-DateUtils', '125.62.5.64', '39', 5);
INSERT INTO `logs` VALUES (214, '2020-05-29 14:22:32', 0, '2020-05-29 14:22:32', 'Luna', '125.62.6.80', 'Luna', 25);
INSERT INTO `logs` VALUES (215, '2020-05-29 14:23:29', 0, '2020-05-29 14:23:29', 'JavaCV操作', '125.62.6.80', '40', 5);
INSERT INTO `logs` VALUES (216, '2020-05-29 15:52:47', 0, '2020-05-29 15:52:47', 'Luna', '125.62.6.80', 'Luna', 25);
INSERT INTO `logs` VALUES (217, '2020-05-29 16:47:49', 0, '2020-05-29 16:47:49', 'Luna', '125.62.6.80', 'Luna', 25);
INSERT INTO `logs` VALUES (218, '2020-05-31 17:16:38', 0, '2020-05-31 17:16:38', 'Luna', '125.62.6.80', 'Luna', 25);
INSERT INTO `logs` VALUES (219, '2020-05-31 17:17:50', 0, '2020-05-31 17:17:50', ' SpringBoot + LogBack 配置', '125.62.6.80', '41', 5);
INSERT INTO `logs` VALUES (220, '2020-06-03 21:46:19', 0, '2020-06-03 21:46:19', 'Luna', '125.62.6.80', 'Luna', 25);
INSERT INTO `logs` VALUES (221, '2020-06-03 21:47:28', 0, '2020-06-03 21:47:28', 'Springboot的异步方法调用与线程池配置', '125.62.6.80', '42', 5);
INSERT INTO `logs` VALUES (222, '2020-06-03 21:49:20', 0, '2020-06-03 21:49:20', 'redis与springboot整合', '125.62.6.80', '43', 5);
INSERT INTO `logs` VALUES (223, '2020-06-03 21:53:47', 0, '2020-06-03 21:53:47', 'SpringBoot Https配置', '125.62.6.80', '44', 5);
INSERT INTO `logs` VALUES (224, '2020-06-20 18:58:13', 0, '2020-06-20 18:58:13', 'Luna', '125.62.5.14', 'Luna', 25);
INSERT INTO `logs` VALUES (225, '2020-06-20 18:59:31', 0, '2020-06-20 18:59:31', 'Springboot的异步方法调用与线程池配置', '125.62.5.14', '45', 5);
INSERT INTO `logs` VALUES (226, '2020-06-20 19:01:35', 0, '2020-06-20 19:01:35', 'spring aop', '125.62.5.14', '46', 5);
INSERT INTO `logs` VALUES (227, '2020-06-20 19:03:38', 0, '2020-06-20 19:03:38', 'springBoot 统一异常处理', '125.62.5.14', '47', 5);
INSERT INTO `logs` VALUES (228, '2020-06-20 19:06:12', 0, '2020-06-20 19:06:12', 'vue.js', '125.62.5.14', '48', 5);
INSERT INTO `logs` VALUES (229, '2020-07-16 14:55:13', 0, '2020-07-16 14:55:13', 'Luna', '125.62.5.75', 'Luna', 25);
INSERT INTO `logs` VALUES (230, '2020-08-06 18:35:27', 0, '2020-08-06 18:35:27', 'Luna', '125.62.6.33', 'Luna', 25);
INSERT INTO `logs` VALUES (231, '2020-08-06 18:36:48', 0, '2020-08-06 18:36:48', 'replay', '125.62.6.33', '49', 5);
INSERT INTO `logs` VALUES (232, '2020-09-22 14:46:35', 0, '2020-09-22 14:46:35', 'Luna', '112.3.32.232', 'Luna', 25);

-- ----------------------------
-- Table structure for menus
-- ----------------------------
DROP TABLE IF EXISTS `menus`;
CREATE TABLE `menus`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `create_time` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0),
  `deleted` tinyint(4) NULL DEFAULT 0,
  `update_time` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0),
  `icon` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '',
  `name` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `parent_id` int(11) NULL DEFAULT 0,
  `priority` int(11) NULL DEFAULT 0,
  `target` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '_self',
  `team` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '',
  `url` varchar(1023) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `menus_parent_id`(`parent_id`) USING BTREE,
  INDEX `menus_name`(`name`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 3 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of menus
-- ----------------------------
INSERT INTO `menus` VALUES (1, '2019-12-06 18:53:44', 0, '2019-12-06 18:53:44', '', '首页', 0, 1, '_self', '', '/');
INSERT INTO `menus` VALUES (2, '2019-12-06 18:53:44', 0, '2019-12-06 18:53:44', '', '归档', 0, 2, '_self', '', '/archives');

-- ----------------------------
-- Table structure for metas
-- ----------------------------
DROP TABLE IF EXISTS `metas`;
CREATE TABLE `metas`  (
  `type` int(11) NOT NULL DEFAULT 0,
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `create_time` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0),
  `deleted` tinyint(4) NULL DEFAULT 0,
  `update_time` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0),
  `meta_key` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `post_id` int(11) NOT NULL,
  `meta_value` varchar(1023) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of metas
-- ----------------------------

-- ----------------------------
-- Table structure for options
-- ----------------------------
DROP TABLE IF EXISTS `options`;
CREATE TABLE `options`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `create_time` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0),
  `deleted` tinyint(4) NULL DEFAULT 0,
  `update_time` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0),
  `option_key` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `option_value` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `type` int(11) NULL DEFAULT 0,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 67 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of options
-- ----------------------------
INSERT INTO `options` VALUES (1, '2019-12-06 18:53:42', 0, '2019-12-06 18:53:42', 'birthday', '1575629621822', 0);
INSERT INTO `options` VALUES (2, '2019-12-06 18:53:42', 0, '2020-03-03 13:17:28', 'blog_title', 'Luna', 0);
INSERT INTO `options` VALUES (3, '2019-12-06 18:53:42', 0, '2019-12-06 18:53:42', 'blog_locale', 'zh', 0);
INSERT INTO `options` VALUES (4, '2019-12-06 18:53:42', 0, '2020-05-29 15:53:13', 'blog_url', 'http://luna.iszychen.club/blog', 0);
INSERT INTO `options` VALUES (5, '2019-12-06 18:53:42', 0, '2019-12-06 18:53:42', 'is_installed', 'true', 0);
INSERT INTO `options` VALUES (6, '2019-12-06 18:56:56', 0, '2019-12-06 18:56:56', 'post_index_sort', 'createTime', 0);
INSERT INTO `options` VALUES (7, '2019-12-06 18:56:56', 0, '2020-03-03 13:25:38', 'email_ssl_port', '465', 0);
INSERT INTO `options` VALUES (8, '2019-12-06 18:56:56', 0, '2019-12-06 18:56:56', 'oss_qiniu_zone', 'auto', 0);
INSERT INTO `options` VALUES (9, '2019-12-06 18:56:56', 0, '2020-03-03 13:19:31', 'comment_new_notice', 'true', 0);
INSERT INTO `options` VALUES (10, '2019-12-06 18:56:56', 0, '2020-03-03 13:19:31', 'email_enabled', 'true', 0);
INSERT INTO `options` VALUES (11, '2019-12-06 18:56:56', 0, '2019-12-06 18:56:56', 'attachment_upload_max_parallel_uploads', '3', 0);
INSERT INTO `options` VALUES (12, '2019-12-06 18:56:56', 0, '2019-12-06 18:56:56', 'attachment_upload_max_files', '50', 0);
INSERT INTO `options` VALUES (13, '2019-12-06 18:56:56', 0, '2019-12-06 18:56:56', 'email_protocol', 'smtp', 0);
INSERT INTO `options` VALUES (14, '2019-12-06 18:56:56', 0, '2019-12-06 18:56:56', 'comment_api_enabled', 'true', 0);
INSERT INTO `options` VALUES (15, '2019-12-06 18:56:56', 0, '2019-12-06 18:56:56', 'rss_page_size', '20', 0);
INSERT INTO `options` VALUES (16, '2019-12-06 18:56:56', 0, '2020-07-16 15:02:56', 'theme', 'viosey_material', 0);
INSERT INTO `options` VALUES (17, '2019-12-06 18:56:56', 0, '2019-12-06 18:56:56', 'comment_pass_notice', 'false', 0);
INSERT INTO `options` VALUES (18, '2019-12-06 18:56:56', 0, '2019-12-06 18:56:56', 'seo_spider_disabled', 'false', 0);
INSERT INTO `options` VALUES (19, '2019-12-06 18:56:56', 0, '2019-12-06 18:56:56', 'comment_internal_plugin_js', '//cdn.jsdelivr.net/gh/halo-dev/halo-comment@latest/dist/halo-comment.min.js', 0);
INSERT INTO `options` VALUES (20, '2019-12-06 18:56:56', 0, '2019-12-06 18:56:56', 'api_enabled', 'false', 0);
INSERT INTO `options` VALUES (21, '2019-12-06 18:56:56', 0, '2019-12-06 18:56:56', 'post_index_page_size', '10', 0);
INSERT INTO `options` VALUES (22, '2019-12-06 18:56:56', 0, '2019-12-06 18:56:56', 'comment_new_need_check', 'false', 0);
INSERT INTO `options` VALUES (23, '2019-12-06 18:56:56', 0, '2019-12-06 18:56:56', 'comment_page_size', '10', 0);
INSERT INTO `options` VALUES (24, '2019-12-06 18:56:56', 0, '2019-12-06 18:57:02', 'comment_gravatar_default', 'monsterid', 0);
INSERT INTO `options` VALUES (25, '2019-12-06 18:56:56', 0, '2019-12-06 18:56:56', 'attachment_upload_image_preview_enable', 'true', 0);
INSERT INTO `options` VALUES (26, '2019-12-06 18:56:56', 0, '2019-12-06 18:56:56', 'attachment_type', 'LOCAL', 0);
INSERT INTO `options` VALUES (27, '2019-12-06 18:56:56', 0, '2020-03-03 13:19:31', 'comment_reply_notice', 'true', 0);
INSERT INTO `options` VALUES (28, '2019-12-06 18:56:56', 0, '2019-12-06 18:56:56', 'post_summary_length', '150', 0);
INSERT INTO `options` VALUES (29, '2019-12-06 18:57:55', 0, '2019-12-06 18:57:55', 'oss_upyun_operator', 'AlertSoftware', 0);
INSERT INTO `options` VALUES (30, '2019-12-06 18:57:55', 0, '2019-12-06 18:57:55', 'oss_upyun_password', 'hzxqwczy', 0);
INSERT INTO `options` VALUES (31, '2019-12-06 18:57:55', 0, '2020-03-03 13:21:14', 'email_username', '1173282254@qq.com', 0);
INSERT INTO `options` VALUES (32, '2019-12-06 18:57:55', 0, '2020-03-03 13:33:18', 'email_password', 'xycwovkvcxqlgiba', 0);
INSERT INTO `options` VALUES (33, '2019-12-06 18:57:55', 0, '2019-12-06 18:58:04', 'blog_footer_info', '欢迎访问本系统~\n', 0);
INSERT INTO `options` VALUES (34, '2020-03-03 13:17:28', 0, '2020-05-29 15:53:13', 'blog_logo', 'http://luna.iszychen.club/blog/upload/2020/4/luna-1da26dd7eae1422396cf77bb3ba2e5e2.png', 0);
INSERT INTO `options` VALUES (35, '2020-03-03 13:17:28', 0, '2020-05-29 15:53:13', 'blog_favicon', 'http://luna.iszychen.club/blog/upload/2020/2/u=3180060526,1572949481&fm=26&gp=0-344db8692ba341b8b5202bc64ea4f681.jpg', 0);
INSERT INTO `options` VALUES (36, '2020-03-03 13:19:31', 0, '2020-03-03 13:19:31', 'email_from_name', 'Luna', 0);
INSERT INTO `options` VALUES (37, '2020-03-03 13:19:31', 0, '2020-03-03 13:19:31', 'email_host', 'smtp.qq.com', 0);
INSERT INTO `options` VALUES (38, '2020-04-01 12:00:36', 0, '2020-04-01 12:00:36', 'seo_keywords', 'iszychen,luna,陈章月，博客，个人博客', 0);
INSERT INTO `options` VALUES (39, '2020-04-01 12:00:36', 0, '2020-04-01 12:00:36', 'seo_description', '个人技术文档', 0);
INSERT INTO `options` VALUES (40, '2020-04-02 23:22:53', 0, '2020-07-16 15:03:48', 'blog_statistics_code', '<script>\nvar _hmt = _hmt || [];\n(function() {\n  var hm = document.createElement(\"script\");\n  hm.src = \"https://hm.baidu.com/hm.js?9c41e3a03479cda3b67bf3878abe4430\";\n  var s = document.getElementsByTagName(\"script\")[0]; \n  s.parentNode.insertBefore(hm, s);\n})();\n</script>\n<script src=\"https://api.vvhan.com/api/yinghua\"></script>\n', 0);
INSERT INTO `options` VALUES (41, '2020-04-13 01:43:10', 0, '2020-04-13 01:43:10', 'static_deploy_type', 'GIT', 0);
INSERT INTO `options` VALUES (42, '2020-04-13 01:43:10', 0, '2020-04-13 01:43:10', 'global_absolute_path_enabled', 'true', 0);
INSERT INTO `options` VALUES (43, '2020-04-13 01:43:10', 0, '2020-04-13 01:43:10', 'developer_mode', 'false', 0);
INSERT INTO `options` VALUES (44, '2020-04-13 01:43:10', 0, '2020-04-13 01:43:10', 'default_editor', 'MARKDOWN', 0);
INSERT INTO `options` VALUES (45, '2020-04-13 01:43:10', 0, '2020-04-13 01:43:10', 'photos_title', '图库', 0);
INSERT INTO `options` VALUES (46, '2020-04-13 01:43:10', 0, '2020-04-13 01:43:10', 'comment_range', '30', 0);
INSERT INTO `options` VALUES (47, '2020-04-13 01:43:10', 0, '2020-04-13 01:43:10', 'archives_prefix', 'archives', 0);
INSERT INTO `options` VALUES (48, '2020-04-13 01:43:10', 0, '2020-04-13 01:43:10', 'journals_prefix', 'journals', 0);
INSERT INTO `options` VALUES (49, '2020-04-13 01:43:10', 0, '2020-04-13 01:43:10', 'journals_page_size', '10', 0);
INSERT INTO `options` VALUES (50, '2020-04-13 01:43:10', 0, '2020-04-13 01:43:10', 'journals_title', '日志', 0);
INSERT INTO `options` VALUES (51, '2020-04-13 01:43:10', 0, '2020-04-13 01:43:10', 'comment_ban_time', '10', 0);
INSERT INTO `options` VALUES (52, '2020-04-13 01:43:10', 0, '2020-04-13 01:43:10', 'oss_qiniu_domain_protocol', 'https://', 0);
INSERT INTO `options` VALUES (53, '2020-04-13 01:43:10', 0, '2020-04-13 01:43:10', 'oss_upyun_domain_protocol', 'https://', 0);
INSERT INTO `options` VALUES (54, '2020-04-13 01:43:10', 0, '2020-04-13 01:43:10', 'photos_page_size', '10', 0);
INSERT INTO `options` VALUES (55, '2020-04-13 01:43:11', 0, '2020-04-13 01:43:11', 'git_static_deploy_branch', 'master', 0);
INSERT INTO `options` VALUES (56, '2020-04-13 01:43:11', 0, '2020-04-13 01:43:11', 'links_prefix', 'links', 0);
INSERT INTO `options` VALUES (57, '2020-04-13 01:43:11', 0, '2020-04-13 01:43:11', 'sheet_prefix', 's', 0);
INSERT INTO `options` VALUES (58, '2020-04-13 01:43:11', 0, '2020-04-13 01:43:11', 'tags_prefix', 'tags', 0);
INSERT INTO `options` VALUES (59, '2020-04-13 01:43:11', 0, '2020-04-13 01:43:11', 'post_permalink_type', 'DEFAULT', 0);
INSERT INTO `options` VALUES (60, '2020-04-13 01:43:11', 0, '2020-04-13 01:43:11', 'rss_content_type', 'full', 0);
INSERT INTO `options` VALUES (61, '2020-04-13 01:43:11', 0, '2020-04-13 01:43:11', 'categories_prefix', 'categories', 0);
INSERT INTO `options` VALUES (62, '2020-04-13 01:43:11', 0, '2020-04-13 01:43:11', 'photos_prefix', 'photos', 0);
INSERT INTO `options` VALUES (63, '2020-04-13 01:43:11', 0, '2020-04-13 01:43:11', 'oss_ali_domain_protocol', 'https://', 0);
INSERT INTO `options` VALUES (64, '2020-04-13 01:43:11', 0, '2020-04-13 01:43:11', 'post_archives_page_size', '10', 0);
INSERT INTO `options` VALUES (65, '2020-04-13 01:43:11', 0, '2020-04-13 01:43:11', 'links_title', '友情链接', 0);
INSERT INTO `options` VALUES (66, '2020-07-16 14:59:16', 0, '2020-07-16 15:00:22', 'blog_custom_head', '', 0);

-- ----------------------------
-- Table structure for photos
-- ----------------------------
DROP TABLE IF EXISTS `photos`;
CREATE TABLE `photos`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `create_time` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0),
  `deleted` tinyint(4) NULL DEFAULT 0,
  `update_time` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0),
  `description` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '',
  `location` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '',
  `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `take_time` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0),
  `team` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '',
  `thumbnail` varchar(1023) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '',
  `url` varchar(1023) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `photos_team`(`team`) USING BTREE,
  INDEX `photos_create_time`(`create_time`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of photos
-- ----------------------------

-- ----------------------------
-- Table structure for post_categories
-- ----------------------------
DROP TABLE IF EXISTS `post_categories`;
CREATE TABLE `post_categories`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `create_time` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0),
  `deleted` tinyint(4) NULL DEFAULT 0,
  `update_time` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0),
  `category_id` int(11) NULL DEFAULT NULL,
  `post_id` int(11) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `post_categories_post_id`(`post_id`) USING BTREE,
  INDEX `post_categories_category_id`(`category_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 181 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of post_categories
-- ----------------------------
INSERT INTO `post_categories` VALUES (29, '2019-12-20 23:31:18', 0, '2019-12-20 23:31:18', 2, 11);
INSERT INTO `post_categories` VALUES (33, '2019-12-23 17:42:43', 0, '2019-12-23 17:42:43', 5, 5);
INSERT INTO `post_categories` VALUES (34, '2019-12-23 17:43:42', 0, '2019-12-23 17:43:42', 6, 13);
INSERT INTO `post_categories` VALUES (35, '2019-12-23 17:43:57', 0, '2019-12-23 17:43:57', 6, 12);
INSERT INTO `post_categories` VALUES (36, '2019-12-23 17:44:10', 0, '2019-12-23 17:44:10', 6, 10);
INSERT INTO `post_categories` VALUES (37, '2019-12-23 17:44:24', 0, '2019-12-23 17:44:24', 6, 9);
INSERT INTO `post_categories` VALUES (39, '2019-12-23 17:44:47', 0, '2019-12-23 17:44:47', 6, 8);
INSERT INTO `post_categories` VALUES (40, '2019-12-23 17:45:07', 0, '2019-12-23 17:45:07', 6, 6);
INSERT INTO `post_categories` VALUES (41, '2019-12-23 17:45:21', 0, '2019-12-23 17:45:21', 6, 7);
INSERT INTO `post_categories` VALUES (49, '2019-12-25 20:24:04', 0, '2019-12-25 20:24:04', 2, 15);
INSERT INTO `post_categories` VALUES (50, '2019-12-25 20:24:04', 0, '2019-12-25 20:24:04', 6, 15);
INSERT INTO `post_categories` VALUES (51, '2019-12-25 20:24:44', 0, '2019-12-25 20:24:44', 6, 16);
INSERT INTO `post_categories` VALUES (81, '2020-02-06 15:47:34', 0, '2020-02-06 15:47:34', 4, 14);
INSERT INTO `post_categories` VALUES (82, '2020-02-06 15:47:54', 0, '2020-02-06 15:47:54', 2, 20);
INSERT INTO `post_categories` VALUES (83, '2020-02-06 15:47:54', 0, '2020-02-06 15:47:54', 10, 20);
INSERT INTO `post_categories` VALUES (89, '2020-02-06 15:50:19', 0, '2020-02-06 15:50:19', 2, 24);
INSERT INTO `post_categories` VALUES (90, '2020-02-06 15:50:20', 0, '2020-02-06 15:50:20', 3, 24);
INSERT INTO `post_categories` VALUES (91, '2020-02-06 15:50:20', 0, '2020-02-06 15:50:20', 4, 24);
INSERT INTO `post_categories` VALUES (94, '2020-02-06 15:51:45', 0, '2020-02-06 15:51:45', 2, 23);
INSERT INTO `post_categories` VALUES (95, '2020-02-06 15:51:45', 0, '2020-02-06 15:51:45', 10, 23);
INSERT INTO `post_categories` VALUES (98, '2020-02-06 15:52:48', 0, '2020-02-06 15:52:48', 2, 21);
INSERT INTO `post_categories` VALUES (99, '2020-02-06 15:52:48', 0, '2020-02-06 15:52:48', 10, 21);
INSERT INTO `post_categories` VALUES (100, '2020-02-06 15:54:13', 0, '2020-02-06 15:54:13', 2, 18);
INSERT INTO `post_categories` VALUES (101, '2020-02-06 15:54:13', 0, '2020-02-06 15:54:13', 8, 18);
INSERT INTO `post_categories` VALUES (102, '2020-02-06 15:54:27', 0, '2020-02-06 15:54:27', 6, 17);
INSERT INTO `post_categories` VALUES (103, '2020-02-06 15:55:58', 0, '2020-02-06 15:55:58', 3, 4);
INSERT INTO `post_categories` VALUES (104, '2020-02-06 15:55:58', 0, '2020-02-06 15:55:58', 5, 4);
INSERT INTO `post_categories` VALUES (105, '2020-02-06 15:56:22', 0, '2020-02-06 15:56:22', 2, 22);
INSERT INTO `post_categories` VALUES (106, '2020-02-06 15:56:22', 0, '2020-02-06 15:56:22', 10, 22);
INSERT INTO `post_categories` VALUES (135, '2020-04-15 10:05:47', 0, '2020-04-15 10:05:47', 3, 36);
INSERT INTO `post_categories` VALUES (136, '2020-04-15 10:05:48', 0, '2020-04-15 10:05:48', 12, 36);
INSERT INTO `post_categories` VALUES (137, '2020-04-15 10:06:18', 0, '2020-04-15 10:06:18', 12, 35);
INSERT INTO `post_categories` VALUES (138, '2020-04-15 10:07:03', 0, '2020-04-15 10:07:03', 2, 34);
INSERT INTO `post_categories` VALUES (139, '2020-04-15 10:07:03', 0, '2020-04-15 10:07:03', 3, 34);
INSERT INTO `post_categories` VALUES (140, '2020-04-15 10:07:32', 0, '2020-04-15 10:07:32', 2, 33);
INSERT INTO `post_categories` VALUES (141, '2020-04-15 10:07:32', 0, '2020-04-15 10:07:32', 3, 33);
INSERT INTO `post_categories` VALUES (142, '2020-04-15 10:08:33', 0, '2020-04-15 10:08:33', 3, 31);
INSERT INTO `post_categories` VALUES (143, '2020-04-15 10:08:33', 0, '2020-04-15 10:08:33', 5, 31);
INSERT INTO `post_categories` VALUES (144, '2020-04-15 10:09:23', 0, '2020-04-15 10:09:23', 3, 30);
INSERT INTO `post_categories` VALUES (145, '2020-04-15 10:09:23', 0, '2020-04-15 10:09:23', 4, 30);
INSERT INTO `post_categories` VALUES (146, '2020-04-15 10:09:53', 0, '2020-04-15 10:09:53', 4, 29);
INSERT INTO `post_categories` VALUES (147, '2020-04-15 10:09:53', 0, '2020-04-15 10:09:53', 11, 29);
INSERT INTO `post_categories` VALUES (148, '2020-04-15 10:10:22', 0, '2020-04-15 10:10:22', 3, 28);
INSERT INTO `post_categories` VALUES (149, '2020-04-15 10:10:22', 0, '2020-04-15 10:10:22', 4, 28);
INSERT INTO `post_categories` VALUES (150, '2020-04-15 10:10:54', 0, '2020-04-15 10:10:54', 9, 27);
INSERT INTO `post_categories` VALUES (151, '2020-04-15 10:11:17', 0, '2020-04-15 10:11:17', 3, 26);
INSERT INTO `post_categories` VALUES (152, '2020-04-15 10:11:17', 0, '2020-04-15 10:11:17', 4, 26);
INSERT INTO `post_categories` VALUES (153, '2020-04-15 10:11:36', 0, '2020-04-15 10:11:36', 3, 25);
INSERT INTO `post_categories` VALUES (154, '2020-04-15 10:11:36', 0, '2020-04-15 10:11:36', 4, 25);
INSERT INTO `post_categories` VALUES (155, '2020-05-07 13:44:14', 0, '2020-05-07 13:44:14', 3, 37);
INSERT INTO `post_categories` VALUES (156, '2020-05-18 20:12:17', 0, '2020-05-18 20:12:17', 3, 38);
INSERT INTO `post_categories` VALUES (157, '2020-05-18 21:14:47', 0, '2020-05-18 21:14:47', 3, 39);
INSERT INTO `post_categories` VALUES (158, '2020-05-29 14:23:29', 0, '2020-05-29 14:23:29', 3, 40);
INSERT INTO `post_categories` VALUES (159, '2020-05-31 17:17:49', 0, '2020-05-31 17:17:49', 3, 41);
INSERT INTO `post_categories` VALUES (160, '2020-05-31 17:17:50', 0, '2020-05-31 17:17:50', 5, 41);
INSERT INTO `post_categories` VALUES (161, '2020-06-03 21:47:28', 0, '2020-06-03 21:47:28', 3, 42);
INSERT INTO `post_categories` VALUES (162, '2020-06-03 21:47:28', 0, '2020-06-03 21:47:28', 5, 42);
INSERT INTO `post_categories` VALUES (163, '2020-06-03 21:49:20', 0, '2020-06-03 21:49:20', 3, 43);
INSERT INTO `post_categories` VALUES (164, '2020-06-03 21:49:20', 0, '2020-06-03 21:49:20', 5, 43);
INSERT INTO `post_categories` VALUES (165, '2020-06-03 21:53:47', 0, '2020-06-03 21:53:47', 3, 44);
INSERT INTO `post_categories` VALUES (166, '2020-06-03 21:53:47', 0, '2020-06-03 21:53:47', 5, 44);
INSERT INTO `post_categories` VALUES (167, '2020-06-20 18:59:31', 0, '2020-06-20 18:59:31', 3, 45);
INSERT INTO `post_categories` VALUES (168, '2020-06-20 18:59:31', 0, '2020-06-20 18:59:31', 4, 45);
INSERT INTO `post_categories` VALUES (169, '2020-06-20 18:59:31', 0, '2020-06-20 18:59:31', 5, 45);
INSERT INTO `post_categories` VALUES (170, '2020-06-20 19:01:35', 0, '2020-06-20 19:01:35', 3, 46);
INSERT INTO `post_categories` VALUES (171, '2020-06-20 19:01:35', 0, '2020-06-20 19:01:35', 5, 46);
INSERT INTO `post_categories` VALUES (172, '2020-06-20 19:01:35', 0, '2020-06-20 19:01:35', 12, 46);
INSERT INTO `post_categories` VALUES (173, '2020-06-20 19:03:38', 0, '2020-06-20 19:03:38', 3, 47);
INSERT INTO `post_categories` VALUES (174, '2020-06-20 19:03:38', 0, '2020-06-20 19:03:38', 5, 47);
INSERT INTO `post_categories` VALUES (175, '2020-06-20 19:03:38', 0, '2020-06-20 19:03:38', 12, 47);
INSERT INTO `post_categories` VALUES (176, '2020-06-20 19:06:12', 0, '2020-06-20 19:06:12', 3, 48);
INSERT INTO `post_categories` VALUES (177, '2020-06-20 19:06:12', 0, '2020-06-20 19:06:12', 12, 48);
INSERT INTO `post_categories` VALUES (178, '2020-06-20 19:06:12', 0, '2020-06-20 19:06:12', 13, 48);
INSERT INTO `post_categories` VALUES (179, '2020-08-06 18:36:48', 0, '2020-08-06 18:36:48', 4, 49);
INSERT INTO `post_categories` VALUES (180, '2020-08-06 18:36:48', 0, '2020-08-06 18:36:48', 12, 49);

-- ----------------------------
-- Table structure for post_tags
-- ----------------------------
DROP TABLE IF EXISTS `post_tags`;
CREATE TABLE `post_tags`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `create_time` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0),
  `deleted` tinyint(4) NULL DEFAULT 0,
  `update_time` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0),
  `post_id` int(11) NOT NULL,
  `tag_id` int(11) NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `post_tags_post_id`(`post_id`) USING BTREE,
  INDEX `post_tags_tag_id`(`tag_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 186 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of post_tags
-- ----------------------------
INSERT INTO `post_tags` VALUES (5, '2019-12-06 20:16:32', 0, '2019-12-06 20:16:32', 3, 5);
INSERT INTO `post_tags` VALUES (53, '2019-12-20 23:31:18', 0, '2019-12-20 23:31:18', 11, 1);
INSERT INTO `post_tags` VALUES (58, '2019-12-23 17:42:43', 0, '2019-12-23 17:42:43', 5, 1);
INSERT INTO `post_tags` VALUES (59, '2019-12-23 17:42:43', 0, '2019-12-23 17:42:43', 5, 5);
INSERT INTO `post_tags` VALUES (60, '2019-12-23 17:43:42', 0, '2019-12-23 17:43:42', 13, 1);
INSERT INTO `post_tags` VALUES (61, '2019-12-23 17:43:57', 0, '2019-12-23 17:43:57', 12, 1);
INSERT INTO `post_tags` VALUES (62, '2019-12-23 17:44:10', 0, '2019-12-23 17:44:10', 10, 1);
INSERT INTO `post_tags` VALUES (63, '2019-12-23 17:44:24', 0, '2019-12-23 17:44:24', 9, 1);
INSERT INTO `post_tags` VALUES (65, '2019-12-23 17:44:47', 0, '2019-12-23 17:44:47', 8, 1);
INSERT INTO `post_tags` VALUES (66, '2019-12-23 17:45:07', 0, '2019-12-23 17:45:07', 6, 1);
INSERT INTO `post_tags` VALUES (67, '2019-12-23 17:45:21', 0, '2019-12-23 17:45:21', 7, 1);
INSERT INTO `post_tags` VALUES (73, '2019-12-25 20:24:04', 0, '2019-12-25 20:24:04', 15, 1);
INSERT INTO `post_tags` VALUES (74, '2019-12-25 20:24:44', 0, '2019-12-25 20:24:44', 16, 1);
INSERT INTO `post_tags` VALUES (98, '2020-02-06 15:47:34', 0, '2020-02-06 15:47:34', 14, 1);
INSERT INTO `post_tags` VALUES (99, '2020-02-06 15:47:34', 0, '2020-02-06 15:47:34', 14, 5);
INSERT INTO `post_tags` VALUES (100, '2020-02-06 15:47:54', 0, '2020-02-06 15:47:54', 20, 1);
INSERT INTO `post_tags` VALUES (105, '2020-02-06 15:50:19', 0, '2020-02-06 15:50:19', 24, 1);
INSERT INTO `post_tags` VALUES (108, '2020-02-06 15:51:45', 0, '2020-02-06 15:51:45', 23, 1);
INSERT INTO `post_tags` VALUES (110, '2020-02-06 15:52:48', 0, '2020-02-06 15:52:48', 21, 1);
INSERT INTO `post_tags` VALUES (111, '2020-02-06 15:54:13', 0, '2020-02-06 15:54:13', 18, 1);
INSERT INTO `post_tags` VALUES (112, '2020-02-06 15:54:27', 0, '2020-02-06 15:54:27', 17, 1);
INSERT INTO `post_tags` VALUES (113, '2020-02-06 15:54:59', 0, '2020-02-06 15:54:59', 2, 4);
INSERT INTO `post_tags` VALUES (114, '2020-02-06 15:55:58', 0, '2020-02-06 15:55:58', 4, 5);
INSERT INTO `post_tags` VALUES (115, '2020-02-06 15:56:22', 0, '2020-02-06 15:56:22', 22, 1);
INSERT INTO `post_tags` VALUES (139, '2020-04-15 09:34:48', 0, '2020-04-15 09:34:48', 1, 3);
INSERT INTO `post_tags` VALUES (144, '2020-04-15 10:05:47', 0, '2020-04-15 10:05:47', 36, 1);
INSERT INTO `post_tags` VALUES (145, '2020-04-15 10:05:47', 0, '2020-04-15 10:05:47', 36, 2);
INSERT INTO `post_tags` VALUES (146, '2020-04-15 10:06:18', 0, '2020-04-15 10:06:18', 35, 1);
INSERT INTO `post_tags` VALUES (147, '2020-04-15 10:07:03', 0, '2020-04-15 10:07:03', 34, 1);
INSERT INTO `post_tags` VALUES (148, '2020-04-15 10:07:03', 0, '2020-04-15 10:07:03', 34, 2);
INSERT INTO `post_tags` VALUES (149, '2020-04-15 10:07:32', 0, '2020-04-15 10:07:32', 33, 1);
INSERT INTO `post_tags` VALUES (150, '2020-04-15 10:07:32', 0, '2020-04-15 10:07:32', 33, 2);
INSERT INTO `post_tags` VALUES (151, '2020-04-15 10:08:33', 0, '2020-04-15 10:08:33', 31, 1);
INSERT INTO `post_tags` VALUES (152, '2020-04-15 10:08:33', 0, '2020-04-15 10:08:33', 31, 2);
INSERT INTO `post_tags` VALUES (153, '2020-04-15 10:09:23', 0, '2020-04-15 10:09:23', 30, 1);
INSERT INTO `post_tags` VALUES (154, '2020-04-15 10:09:23', 0, '2020-04-15 10:09:23', 30, 2);
INSERT INTO `post_tags` VALUES (155, '2020-04-15 10:09:53', 0, '2020-04-15 10:09:53', 29, 1);
INSERT INTO `post_tags` VALUES (156, '2020-04-15 10:10:22', 0, '2020-04-15 10:10:22', 28, 1);
INSERT INTO `post_tags` VALUES (157, '2020-04-15 10:10:22', 0, '2020-04-15 10:10:22', 28, 2);
INSERT INTO `post_tags` VALUES (158, '2020-04-15 10:10:54', 0, '2020-04-15 10:10:54', 27, 7);
INSERT INTO `post_tags` VALUES (159, '2020-04-15 10:11:16', 0, '2020-04-15 10:11:16', 26, 2);
INSERT INTO `post_tags` VALUES (160, '2020-04-15 10:11:17', 0, '2020-04-15 10:11:17', 26, 5);
INSERT INTO `post_tags` VALUES (161, '2020-04-15 10:11:36', 0, '2020-04-15 10:11:36', 25, 1);
INSERT INTO `post_tags` VALUES (162, '2020-05-07 13:44:14', 0, '2020-05-07 13:44:14', 37, 2);
INSERT INTO `post_tags` VALUES (163, '2020-05-18 20:12:17', 0, '2020-05-18 20:12:17', 38, 1);
INSERT INTO `post_tags` VALUES (164, '2020-05-18 20:12:17', 0, '2020-05-18 20:12:17', 38, 2);
INSERT INTO `post_tags` VALUES (165, '2020-05-18 21:14:47', 0, '2020-05-18 21:14:47', 39, 1);
INSERT INTO `post_tags` VALUES (166, '2020-05-18 21:14:47', 0, '2020-05-18 21:14:47', 39, 2);
INSERT INTO `post_tags` VALUES (167, '2020-05-29 14:23:29', 0, '2020-05-29 14:23:29', 40, 1);
INSERT INTO `post_tags` VALUES (168, '2020-05-29 14:23:29', 0, '2020-05-29 14:23:29', 40, 2);
INSERT INTO `post_tags` VALUES (169, '2020-05-31 17:17:49', 0, '2020-05-31 17:17:49', 41, 1);
INSERT INTO `post_tags` VALUES (170, '2020-05-31 17:17:49', 0, '2020-05-31 17:17:49', 41, 2);
INSERT INTO `post_tags` VALUES (171, '2020-06-03 21:47:28', 0, '2020-06-03 21:47:28', 42, 1);
INSERT INTO `post_tags` VALUES (172, '2020-06-03 21:47:28', 0, '2020-06-03 21:47:28', 42, 2);
INSERT INTO `post_tags` VALUES (173, '2020-06-03 21:49:19', 0, '2020-06-03 21:49:19', 43, 1);
INSERT INTO `post_tags` VALUES (174, '2020-06-03 21:49:20', 0, '2020-06-03 21:49:20', 43, 2);
INSERT INTO `post_tags` VALUES (175, '2020-06-03 21:53:47', 0, '2020-06-03 21:53:47', 44, 1);
INSERT INTO `post_tags` VALUES (176, '2020-06-03 21:53:47', 0, '2020-06-03 21:53:47', 44, 2);
INSERT INTO `post_tags` VALUES (177, '2020-06-20 18:59:31', 0, '2020-06-20 18:59:31', 45, 1);
INSERT INTO `post_tags` VALUES (178, '2020-06-20 18:59:31', 0, '2020-06-20 18:59:31', 45, 2);
INSERT INTO `post_tags` VALUES (179, '2020-06-20 19:01:34', 0, '2020-06-20 19:01:34', 46, 1);
INSERT INTO `post_tags` VALUES (180, '2020-06-20 19:01:34', 0, '2020-06-20 19:01:34', 46, 2);
INSERT INTO `post_tags` VALUES (181, '2020-06-20 19:03:37', 0, '2020-06-20 19:03:37', 47, 1);
INSERT INTO `post_tags` VALUES (182, '2020-06-20 19:03:38', 0, '2020-06-20 19:03:38', 47, 2);
INSERT INTO `post_tags` VALUES (183, '2020-06-20 19:06:12', 0, '2020-06-20 19:06:12', 48, 1);
INSERT INTO `post_tags` VALUES (184, '2020-06-20 19:06:12', 0, '2020-06-20 19:06:12', 48, 6);
INSERT INTO `post_tags` VALUES (185, '2020-08-06 18:36:48', 0, '2020-08-06 18:36:48', 49, 1);

-- ----------------------------
-- Table structure for posts
-- ----------------------------
DROP TABLE IF EXISTS `posts`;
CREATE TABLE `posts`  (
  `type` int(11) NOT NULL DEFAULT 0,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `create_time` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0),
  `deleted` tinyint(4) NULL DEFAULT 0,
  `update_time` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0),
  `create_from` int(11) NULL DEFAULT 0,
  `disallow_comment` int(11) NULL DEFAULT 0,
  `edit_time` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0),
  `format_content` text CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `likes` bigint(20) NULL DEFAULT 0,
  `original_content` text CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `password` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '',
  `status` int(11) NULL DEFAULT 1,
  `summary` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `template` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '',
  `thumbnail` varchar(1023) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '',
  `title` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `top_priority` int(11) NULL DEFAULT 0,
  `url` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `visits` bigint(20) NULL DEFAULT 0,
  `editor_type` int(11) NULL DEFAULT 0,
  `meta_description` varchar(1023) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `meta_keywords` varchar(511) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `slug` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `UK_qmmso8qxjpbxwegdtp0l90390`(`slug`) USING BTREE,
  UNIQUE INDEX `UK_dpu82t5n0rytvpeooomd612ct`(`url`) USING BTREE,
  INDEX `posts_type_status`(`type`, `status`) USING BTREE,
  INDEX `posts_create_time`(`create_time`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 50 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of posts
-- ----------------------------
INSERT INTO `posts` VALUES (0, 1, '2019-12-06 18:53:44', 0, '2020-04-15 09:34:47', 0, 0, '2020-04-15 09:34:47', '<h2 id=\"welcome\">welcome!</h2>\n<p>欢迎访问本系统~希望能帮助到您.</p>\n<p>来自-&gt;<em>Iszychen</em></p>\n', 0, '## welcome!\n\n欢迎访问本系统~希望能帮助到您.\n\n来自->*Iszychen*\n\n', '', 0, 'welcome!欢迎访问本系统~希望能帮助到您.来自-&gt;Iszychen', '', 'http://111.229.114.126:8089/upload/2019/12/panda-99b045e335e64ca6a15c009f3b4de066.JPG', 'Hello ', 1, 'hello', 181, 0, NULL, NULL, 'hello');
INSERT INTO `posts` VALUES (0, 2, '2019-12-06 19:38:22', 0, '2020-02-06 15:54:59', 0, 0, '2020-02-06 15:54:59', '<p><img src=\"https://img-blog.csdnimg.cn/20191204215026986.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDEzNDMzOA==,size_16,color_FFFFFF,t_70\" alt=\"天坑\" />\n真的莫名其妙,各种配置 conf 论坛百度,总结一下吧,有错误欢迎指出:\n<strong>1</strong>.部署步骤就不将了  讲一下查错,首先本地服务器部署一下,能访问测试页面说明部署成功,能访问项目证明项目没问题,如果是jar包,直接 <em><strong>java -jar 包名.jar</strong></em> 想要后台执行的可以百度,war包部署在docker里的镜像和普通tomcat是一样的方法.具体这里不细说.</p>\n<p><strong>2</strong>.tomcat启动成功但是不加载项目,不打印日志,查看本地项目是否依赖网络资源</p>\n<p><strong>3</strong>.tomcat版本和jdk版本一定一致  一定 一定  我的另一个项目就是这样死的,也是各种查,有个特点,这个问题放在服务器上可以运行测试页面,进入管理页面显示false也就是没有启动项目,可以往这方面靠,另外日志也有提示.</p>\n<p><strong>4</strong>.防火墙,这个应该在最开始,不能访问端口就可以查出.</p>\n<p><strong>5</strong>.pom中的name标签,也是我想说的一点,我不确定是不是这个原因,反正我上述所有问题都测试了 ,然后呢,莫名看到这儿有个大写,手贱(幸好)改了,让后就可以了,也算跳坑了,这问题憋了好几天.</p>\n<p><strong>6</strong>.最后附上我的天坑代码,因为还没有搞域名 所以将就吧<a href=\"http://106.54.220.61:8088/genesis/index\">http://106.54.220.61:8088/genesis/index</a>\n在gihub开源了-&gt;<a href=\"https://github.com/czy1024/genesis\">https://github.com/czy1024/genesis</a> 需要测试账号的可以联系我,是我参加学习比赛的一个项目</p>\n<p><strong>7</strong>,附上tomcat403 页面解决办法\n安装tomcat，配置好tomcat环境变量以后，访问manager app页面，出现403 Access Denied错误，解决的方法如下：</p>\n<p>首先在conf/tomcat-users.xml文件里面，在</tomcat-users>前面添加如下代码：</p>\n<pre><code class=\"language-bash\">&lt;role rolename=&quot;manager-gui&quot;/&gt;\n&lt;user password=&quot;admin&quot; roles=&quot;manager-gui&quot; username=&quot;tomcat&quot;/&gt;\n</code></pre>\n<p>然后重启tomcat，重新访问manager app页面，如果此时仍然出现403 Access Denied错误，那么就是访问的ip地受到了限制，\n我们打开/webapps/manager/META-INF/目录下context.xml文件，不是conf/目录下的context.xml文件，一定不要搞错了</p>\n<p>我们将里面的内容注释掉或者修改为</p>\n<pre><code class=\"language-bash\">&lt;Valve className=&quot;org.apache.catalina.valves.RemoteAddrValve&quot;\nallow=&quot;127\\.\\d+\\.\\d+\\.\\d+|::1|0:0:0:0:0:0:0:1|\\d+\\.\\d+\\.\\d+\\.\\d+&quot; /&gt;\n</code></pre>\n<p>保存，然后重启tomcat，重新访问manager app页面，OK，问题得到解决。</p>\n<p><strong>8</strong>.还有其他问题欢迎留言.</p>\n', 0, '![天坑](https://img-blog.csdnimg.cn/20191204215026986.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDEzNDMzOA==,size_16,color_FFFFFF,t_70)\n真的莫名其妙,各种配置 conf 论坛百度,总结一下吧,有错误欢迎指出:\n**1**.部署步骤就不将了  讲一下查错,首先本地服务器部署一下,能访问测试页面说明部署成功,能访问项目证明项目没问题,如果是jar包,直接 ***java -jar 包名.jar*** 想要后台执行的可以百度,war包部署在docker里的镜像和普通tomcat是一样的方法.具体这里不细说.\n\n**2**.tomcat启动成功但是不加载项目,不打印日志,查看本地项目是否依赖网络资源\n\n**3**.tomcat版本和jdk版本一定一致  一定 一定  我的另一个项目就是这样死的,也是各种查,有个特点,这个问题放在服务器上可以运行测试页面,进入管理页面显示false也就是没有启动项目,可以往这方面靠,另外日志也有提示.\n\n**4**.防火墙,这个应该在最开始,不能访问端口就可以查出.\n\n**5**.pom中的name标签,也是我想说的一点,我不确定是不是这个原因,反正我上述所有问题都测试了 ,然后呢,莫名看到这儿有个大写,手贱(幸好)改了,让后就可以了,也算跳坑了,这问题憋了好几天.\n\n**6**.最后附上我的天坑代码,因为还没有搞域名 所以将就吧[http://106.54.220.61:8088/genesis/index](http://106.54.220.61:8088/genesis/index)\n在gihub开源了->[https://github.com/czy1024/genesis](https://github.com/czy1024/genesis) 需要测试账号的可以联系我,是我参加学习比赛的一个项目\n\n**7**,附上tomcat403 页面解决办法\n安装tomcat，配置好tomcat环境变量以后，访问manager app页面，出现403 Access Denied错误，解决的方法如下：\n\n首先在conf/tomcat-users.xml文件里面，在</tomcat-users>前面添加如下代码：\n\n\n```bash\n<role rolename=\"manager-gui\"/>\n<user password=\"admin\" roles=\"manager-gui\" username=\"tomcat\"/>\n```\n\n\n然后重启tomcat，重新访问manager app页面，如果此时仍然出现403 Access Denied错误，那么就是访问的ip地受到了限制，\n我们打开/webapps/manager/META-INF/目录下context.xml文件，不是conf/目录下的context.xml文件，一定不要搞错了\n\n\n\n我们将里面的内容注释掉或者修改为\n\n```bash\n<Valve className=\"org.apache.catalina.valves.RemoteAddrValve\"\nallow=\"127\\.\\d+\\.\\d+\\.\\d+|::1|0:0:0:0:0:0:0:1|\\d+\\.\\d+\\.\\d+\\.\\d+\" />\n```\n\n\n保存，然后重启tomcat，重新访问manager app页面，OK，问题得到解决。\n\n**8**.还有其他问题欢迎留言.\n', '', 0, 'linux的tomcat部署项目出错解决办法', '', 'http://111.229.114.126/upload/2020/2/%E4%B8%8B%E8%BD%BD%20(1)-657838880e314d65a4d0f48b14949cb0.jpg', 'linux的tomcat部署项目出错解决办法', 0, 'Linux-tomcat', 56, 0, NULL, NULL, 'Linux-tomcat');
INSERT INTO `posts` VALUES (0, 3, '2019-12-06 20:15:47', 0, '2019-12-06 20:16:32', 0, 0, '2019-12-06 20:16:32', '<h1 id=\"需求分析\">需求分析</h1>\n<h2 id=\"一功能\">一：功能</h2>\n<h3 id=\"需求\">需求:</h3>\n<pre><code>根据投影仪识别PPT 分析知识点轻重 智能知识点识别\n</code></pre>\n<p>知识点学情智能分析系统:\n1:识别字体大小,重难点\n2:通过判断ppt中字体大小—得固定 根据知识点出现锁定老师上课时间\n3:步骤细化,确定需求\n4:在呈现知识点时学生所反映的状态\n5:基本增删改查</p>\n<h3 id=\"具体功能\">具体功能</h3>\n<p><img src=\"https://img-blog.csdnimg.cn/20191025182702266.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDEzNDMzOA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n<h2 id=\"二-对象\">二: 对象</h2>\n<p>1:对象有那些</p>\n<p>2:对象的属性\n<img src=\"https://img-blog.csdnimg.cn/20191025182745559.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDEzNDMzOA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n<h2 id=\"数据库设计\">数据库设计</h2>\n<h3 id=\"需求分析-1\">需求分析</h3>\n<p>调查和分析用户的业务活动和数据的使用情况，弄清所用数据的种类、范围、数量以及它们在业务活动中交流的情况，确定用户对数据库系统的使用要求和各种约束条件等，形成用户需求规约。\n需求分析是在用户调查的基础上，<em><strong>通过分析，逐步明确用户对系统的需求</strong></em>，包括数据需求和围绕这些数据的业务处理需求。在需求分析中，通过自顶向下，逐步分解的方法分析系统，分析的结果采用数据流程图(DFD)进行图形化的描述。\n概念设计\n<strong>通过对其中诸处的分类、聚集和概括，建立抽象的概念数据模型</strong>。这个概念模型应反映现实世界各部门的信息结构、信息流动情况、信息间的互相制约关系以及各部门对信息储存、查询和加工的要求等。**所建立的模型应避开数据库在计算机上的具体实现细节，用一种抽象的形式表示出来。**以扩充的实体—（E-R模型）联系模型方法为例，第一步先明确现实世界各部门所含的各种实体及其属性、实体间的联系以及对信息的制约条件等，从而给出各部门内所用信息的局部描述(在数据库中称为用户的局部视图)。<strong>第二步再将前面得到的多个用户的局部视图集成为一个全局视图，即用户要描述的现实世界的概念数据模型</strong>。</p>\n<h3 id=\"逻辑设计\">逻辑设计</h3>\n<p>主要工作是将现实世界的<strong>概念数据模型设计成数据库的一种逻辑模式</strong>，即适应于某种特定数据库管理系统所支持的逻辑数据模式。与此同时，可能还需为各种数据处理应用领域产生相应的逻辑子模式。这一步设计的结果就是所谓“逻辑数据库”。</p>\n<h3 id=\"er图\">ER图</h3>\n<h3 id=\"物理设计\">物理设计</h3>\n<p>根据特定数据库管理系统所提供的多种存储结构和存取方法等依赖于具体计算机结构的各项物理设计措施，对具体的应用任务选定最合适的物理存储结构(包括文件类型、索引结构和数据的存放次序与位逻辑等)、存取方法和存取路径等。这一步设计的结果就是所谓“物理数据库”。</p>\n<h3 id=\"验证设计\">验证设计</h3>\n<p>在上述设计的基础上，收集数据并具体建立一个数据库，运行一些典型的应用任务来验证数据库设计的正确性和合理性。一般，一个大型数据库的设计过程往往需要经过多次循环反复。当设计的某步发现问题时，可能就需要返回到前面去进行修改。因此，在做上述数据库设计时就应考虑到今后修改设计的可能性和方便性。</p>\n', 0, '# 需求分析\n## 一：功能\n###  需求:\n	根据投影仪识别PPT 分析知识点轻重 智能知识点识别\n知识点学情智能分析系统:\n	1:识别字体大小,重难点\n	2:通过判断ppt中字体大小—得固定 根据知识点出现锁定老师上课时间\n	3:步骤细化,确定需求\n	4:在呈现知识点时学生所反映的状态\n	5:基本增删改查\n### 具体功能\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191025182702266.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDEzNDMzOA==,size_16,color_FFFFFF,t_70)\n\n## 二: 对象\n1:对象有那些\n\n2:对象的属性\n	![在这里插入图片描述](https://img-blog.csdnimg.cn/20191025182745559.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDEzNDMzOA==,size_16,color_FFFFFF,t_70)\n\n\n## 数据库设计\n### 需求分析\n调查和分析用户的业务活动和数据的使用情况，弄清所用数据的种类、范围、数量以及它们在业务活动中交流的情况，确定用户对数据库系统的使用要求和各种约束条件等，形成用户需求规约。\n需求分析是在用户调查的基础上，***通过分析，逐步明确用户对系统的需求***，包括数据需求和围绕这些数据的业务处理需求。在需求分析中，通过自顶向下，逐步分解的方法分析系统，分析的结果采用数据流程图(DFD)进行图形化的描述。\n概念设计\n**通过对其中诸处的分类、聚集和概括，建立抽象的概念数据模型**。这个概念模型应反映现实世界各部门的信息结构、信息流动情况、信息间的互相制约关系以及各部门对信息储存、查询和加工的要求等。**所建立的模型应避开数据库在计算机上的具体实现细节，用一种抽象的形式表示出来。**以扩充的实体—（E-R模型）联系模型方法为例，第一步先明确现实世界各部门所含的各种实体及其属性、实体间的联系以及对信息的制约条件等，从而给出各部门内所用信息的局部描述(在数据库中称为用户的局部视图)。**第二步再将前面得到的多个用户的局部视图集成为一个全局视图，即用户要描述的现实世界的概念数据模型**。\n\n### 逻辑设计\n主要工作是将现实世界的**概念数据模型设计成数据库的一种逻辑模式**，即适应于某种特定数据库管理系统所支持的逻辑数据模式。与此同时，可能还需为各种数据处理应用领域产生相应的逻辑子模式。这一步设计的结果就是所谓“逻辑数据库”。\n### ER图\n### 物理设计\n根据特定数据库管理系统所提供的多种存储结构和存取方法等依赖于具体计算机结构的各项物理设计措施，对具体的应用任务选定最合适的物理存储结构(包括文件类型、索引结构和数据的存放次序与位逻辑等)、存取方法和存取路径等。这一步设计的结果就是所谓“物理数据库”。\n### 验证设计\n在上述设计的基础上，收集数据并具体建立一个数据库，运行一些典型的应用任务来验证数据库设计的正确性和合理性。一般，一个大型数据库的设计过程往往需要经过多次循环反复。当设计的某步发现问题时，可能就需要返回到前面去进行修改。因此，在做上述数据库设计时就应考虑到今后修改设计的可能性和方便性。', '', 0, '智●助教学 智能知识点分析系统需求分析文稿', '', 'http://111.229.114.126/upload/2019/12/panda-99b045e335e64ca6a15c009f3b4de066.JPG', '智●助教学 智能知识点分析系统需求分析文稿', 0, 'genesis', 44, 0, NULL, NULL, 'genesis');
INSERT INTO `posts` VALUES (0, 4, '2019-12-06 20:26:59', 0, '2020-02-06 15:55:58', 0, 0, '2020-02-06 15:55:58', '<p>智 助教学\n——智能知识点分析系统</p>\n<ol>\n<li>2019年10月，哈工大人工智能研究院副院长，哈工大社会计算与信息检索研究中心主任刘挺教授的报告《智能教育的理念变革与技术落地》，展望智能时代下的未来教育。人工智能的发展，推动教育内容和模式的变革，已星星之火可以燎原。</li>\n<li>课堂教学仍是学校教育的主阵地，学生对知识点的掌握情况直接影响教师教学目标的调整和措施的采取。现有的教学模式，教师通过观察或课后测试的方式获取学生对课程知识点的掌握情况。观察的方式具有局限性，如教师只能观察某时间段视野范围内的学生情况；测试的方式需要苛刻的条件，如题目与知识点的对应情况，考试环境的安排。基于以上原因，我们设计了一款智助教学—智能知识点分析系统。该系统主要目的帮助教师了解学生在教学过程中对某一知识点的掌握情况，及时调整教学内容和教学方法。</li>\n<li>为实现这一目的，系统包含以下四个核心功能：知识点设置、PPT知识点识别、知识点比对、知识点学情反馈。具体功能实现流程如下：首先，教师课前通过系统预先设置某课时的知识点，上课过程中有一台球机始终对准教师所用PPT屏幕，用于获取整堂课PPT播放情况视频；还有一台对准学生，用于获取学生的课堂表现情况视频。接着，课后系统将在空闲时间对PPT视频处理后进行知识点关键字的识别，与教师预设的知识点进行比对，获取知识点对应的时间段。然后，对知识点出现的时间段进行学生状态的检测。最后，统计对应知识点学生的掌握情况并可视化展示。</li>\n<li>本系统采用SSM架构，利用spring+mybatis和shiro权限管理框架实现，数据存储使用mysql数据库，其中使用图像识别、文字识别、球机远程控制、字符串匹配等核心技术。(注:<a href=\"http://111.229.114.126:8088/genesis/index\">本项目</a>已在github开源:<a href=\"https://github.com/czy1024/genesis/\">下载地址</a>)\n<img src=\"https://img-blog.csdnimg.cn/20191206201951285.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDEzNDMzOA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" />\n<img src=\"https://img-blog.csdnimg.cn/20191206202016348.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDEzNDMzOA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" />\n<img src=\"https://img-blog.csdnimg.cn/20191206201907376.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDEzNDMzOA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n</ol>\n<p><em>需要测试账号请留言i-&gt;iszzychen</em></p>\n', 0, '智 助教学\n——智能知识点分析系统\n \n\n 1. 2019年10月，哈工大人工智能研究院副院长，哈工大社会计算与信息检索研究中心主任刘挺教授的报告《智能教育的理念变革与技术落地》，展望智能时代下的未来教育。人工智能的发展，推动教育内容和模式的变革，已星星之火可以燎原。\n 2. 课堂教学仍是学校教育的主阵地，学生对知识点的掌握情况直接影响教师教学目标的调整和措施的采取。现有的教学模式，教师通过观察或课后测试的方式获取学生对课程知识点的掌握情况。观察的方式具有局限性，如教师只能观察某时间段视野范围内的学生情况；测试的方式需要苛刻的条件，如题目与知识点的对应情况，考试环境的安排。基于以上原因，我们设计了一款智助教学—智能知识点分析系统。该系统主要目的帮助教师了解学生在教学过程中对某一知识点的掌握情况，及时调整教学内容和教学方法。\n 3. 为实现这一目的，系统包含以下四个核心功能：知识点设置、PPT知识点识别、知识点比对、知识点学情反馈。具体功能实现流程如下：首先，教师课前通过系统预先设置某课时的知识点，上课过程中有一台球机始终对准教师所用PPT屏幕，用于获取整堂课PPT播放情况视频；还有一台对准学生，用于获取学生的课堂表现情况视频。接着，课后系统将在空闲时间对PPT视频处理后进行知识点关键字的识别，与教师预设的知识点进行比对，获取知识点对应的时间段。然后，对知识点出现的时间段进行学生状态的检测。最后，统计对应知识点学生的掌握情况并可视化展示。\n 4. 本系统采用SSM架构，利用spring+mybatis和shiro权限管理框架实现，数据存储使用mysql数据库，其中使用图像识别、文字识别、球机远程控制、字符串匹配等核心技术。(注:[本项目](http://111.229.114.126:8088/genesis/index)已在github开源:[下载地址](https://github.com/czy1024/genesis/))\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191206201951285.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDEzNDMzOA==,size_16,color_FFFFFF,t_70)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191206202016348.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDEzNDMzOA==,size_16,color_FFFFFF,t_70)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191206201907376.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDEzNDMzOA==,size_16,color_FFFFFF,t_70)\n\n\n	                                                                              \n*需要测试账号请留言i->iszzychen*\n\n', '', 0, '', '', 'http://111.229.114.126/upload/2019/12/panda-99b045e335e64ca6a15c009f3b4de066.JPG', '智●助教学 智能知识点分析系统', 0, 'genesis-content', 88, 0, NULL, NULL, 'genesis-content');
INSERT INTO `posts` VALUES (0, 5, '2019-12-09 11:45:03', 0, '2019-12-23 17:42:43', 0, 0, '2019-12-23 17:42:43', '<p><ins>默认酒店和公安联网</ins>\n走进宽敞的酒店大堂，北面墙边放着一台机器，一块液晶屏上显示着酒店房型和价格，机器的右上角有个面部识别系统。\n<img src=\"http://111.229.114.126/upload/2019/12/%E5%9B%BE%E7%89%872-6ccda176c67b43e880d2a7d99b2e7d88.jpg\" alt=\"aroundhotel\" /></p>\n<ol>\n<li>线上预定酒店填写的信息包括那些部分\n基本信息,能辨识是否本人</li>\n<li>到了酒店分人工和智能区\n<ul>\n<li>a)	智能区-&gt;入住\n预定用户</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>\n<ul>\n<li>.填手机验证</li>\n</ul>\n</li>\n<li>\n<ul>\n<li>.若已有房间信息存在,提示你一有一个账户,是否需要另开一个房间\n未预定用户</li>\n</ul>\n</li>\n<li>\n<ul>\n<li>.自动注册账户之后验证</li>\n</ul>\n</li>\n<li>\n<ul>\n<li>.不同时间段入住:预定用户需要填入需要入住的人员信息以便后续人员验证</li>\n<li>b)人工区-&gt;入住</li>\n</ul>\n</li>\n<li>\n<ul>\n<li>i.不录入人脸,从身份证识别,人脸从公安调入人脸信息</li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li>进入电梯问题\n在电梯门前设定门闸,人脸识别,通过门闸后才能进入电梯.\n<ul>\n<li>a)	门闸放哪儿?\n在电梯门口设定摄像头识别</li>\n<li>b)	设定一块识别区域?</li>\n</ul>\n</li>\n<li>入住门框\n使用智能门锁\n通过记入的图片识别人脸开门.</li>\n<li>入住电控!\n<ul>\n<li>a)	可通过模块供电</li>\n<li>b)	在用户登记入住后,供电,若在指定时间内未检测到用户入住</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>\n<ul>\n<li>指定时间-&gt;计算普通用户到达他预定的房间分钟数</li>\n</ul>\n</li>\n<li>\n<ul>\n<li>在检测到房间内住户为空的时候断电</li>\n<li>c)	在登记后可在用户系统上定制想要的房间信息</li>\n</ul>\n</li>\n<li>\n<ul>\n<li>空调温度</li>\n</ul>\n</li>\n<li>\n<ul>\n<li>灯控等</li>\n</ul>\n</li>\n</ul>\n<ol start=\"6\">\n<li>可以个人系统上预约房间打扫</li>\n<li>其他服务产品\n<ul>\n<li>a)	健身房游泳池根据用户等级开放</li>\n<li>b)	餐饮服务可在系统上预定-&gt;反馈到后台并且在到时间后提前用户用餐</li>\n<li>c)	发票由前台人员开具</li>\n</ul>\n</li>\n</ol>\n<p><a href=\"http://assets.processon.com/chart_image/5df9e2dde4b0cfc88c3f14ec.png\">需求分析脑图</a></p>\n', 0, '++默认酒店和公安联网++\n走进宽敞的酒店大堂，北面墙边放着一台机器，一块液晶屏上显示着酒店房型和价格，机器的右上角有个面部识别系统。\n![aroundhotel](http://111.229.114.126/upload/2019/12/%E5%9B%BE%E7%89%872-6ccda176c67b43e880d2a7d99b2e7d88.jpg)\n\n1. 线上预定酒店填写的信息包括那些部分\n   基本信息,能辨识是否本人\n2. 到了酒店分人工和智能区\n   - a)	智能区->入住\n     预定用户\n\n- - .填手机验证\n- - .若已有房间信息存在,提示你一有一个账户,是否需要另开一个房间\n    未预定用户\n- - .自动注册账户之后验证\n- - .不同时间段入住:预定用户需要填入需要入住的人员信息以便后续人员验证\n  - b)人工区->入住\n- - i.不录入人脸,从身份证识别,人脸从公安调入人脸信息\n\n3. 进入电梯问题\n   在电梯门前设定门闸,人脸识别,通过门闸后才能进入电梯.\n   - a)	门闸放哪儿?\n     在电梯门口设定摄像头识别\n   - b)	设定一块识别区域?\n4. 入住门框\n   使用智能门锁\n      	通过记入的图片识别人脸开门.\n5. 入住电控!\n   - a)	可通过模块供电\n   - b)	在用户登记入住后,供电,若在指定时间内未检测到用户入住\n\n- - 指定时间->计算普通用户到达他预定的房间分钟数\n- - 在检测到房间内住户为空的时候断电\n  - c)	在登记后可在用户系统上定制想要的房间信息\n- - 空调温度\n- - 灯控等\n\n6. 可以个人系统上预约房间打扫\n7. 其他服务产品\n   - a)	健身房游泳池根据用户等级开放\n   - b)	餐饮服务可在系统上预定->反馈到后台并且在到时间后提前用户用餐\n   - c)	发票由前台人员开具\n\n[需求分析脑图](http://assets.processon.com/chart_image/5df9e2dde4b0cfc88c3f14ec.png)', '', 0, '', '', 'http://111.229.114.126/upload/2019/12/%E5%9B%BE%E7%89%872-6ccda176c67b43e880d2a7d99b2e7d88.jpg', '12_8.日志->可视化酒店场景分析', 0, 'hotel', 61, 0, NULL, NULL, 'hotel');
INSERT INTO `posts` VALUES (0, 6, '2019-12-12 17:02:00', 0, '2019-12-23 17:45:07', 0, 0, '2019-12-23 17:45:07', '<p>Special 专家</p>\n<p>Specialist 专业人士</p>\n<p>Fame 名声</p>\n<p>Search 寻找</p>\n<p>Search for 寻找 Seek 寻求</p>\n<p>Hunt 狩猎</p>\n<p>Study 学习,研究</p>\n<p>Term 名词-学期;术语 Computer term 计算机术语 一段时间,一段时期 in the long short of</p>\n<p>run 跑 v-运营 run a company n-一段时期 in the long term =in the long run 在长期</p>\n<p>School 学校 学院 ;学派流派; 鱼群 a school of fish  一群鱼 v-教育  教学 schooling</p>\n<p>curriculum 课程表,全部课程</p>\n<p>curricular 课程表的</p>\n<p>Extra 额外的 Extra-curricular activities 课外活动</p>\n<p>course 课程 n 一道菜 -&gt;过程  in the  course of 在...过程中</p>\n<p>lesson 课程 ,教训</p>\n<p>applicant 申请人  申请者</p>\n<p>apply 申请 for  a job Apply to 应用于. ..适用于</p>\n<p>apply ... to ,, 将..应用于...</p>\n<p>applic<strong>able</strong>  可应用的  可使用的</p>\n<p>available  可行的 可靠的</p>\n<p>avail 效用</p>\n<p>science 科学 and techno<strong>logy</strong> 技术 (技术,和技术学-总称 )</p>\n<p>technique 技术的手段 具体的技术</p>\n<p>technological 技术的</p>\n<p>digital 数字的 economy</p>\n<p>digital technology 数字技术</p>\n<p>data 数据</p>\n<p>rate 率  百分之多少 速度 等级 级别 v-&gt; 评估 jobless rate 失业率 n =speed</p>\n<p>as the rate of =at the speed of以什么什么的速度</p>\n<p>等级 the first rate =the first class</p>\n<p>价格money</p>\n<p>over 在...之上 多 超过</p>\n<p>under 在...之下 少 没有</p>\n<p>overrate 高估 underrate 低估</p>\n<p>estimate 估计 value 价值 价值观 -&gt;values</p>\n<p>-&gt;v . 估值  估价 珍惜 重视</p>\n<p>overvalue undervalue</p>\n<p>percent 百分比 20% twenty percent</p>\n<p>percent<strong>age</strong> age 名称后最 language marriage 婚姻</p>\n<p>百分比 总称</p>\n<p>century 世纪</p>\n<p>decade 十年</p>\n<p>during 在...期间</p>\n<p>information 信息,情报 search for <strong>inform</strong>ation   通知 v&gt;   inform  form 形式 格式 v 形成</p>\n<p>massage  信息  send message  发信息 send a short message</p>\n<p>perform<strong>ance</strong>  表演 表现 ence 名称后缀  pre 在..之前 pre 完全 每一个 per day 每一天 per year 每一年</p>\n<p>perform v 表演 表现 执行 履行</p>\n<p>show 表名,表现 n 秀</p>\n<p>craft 精密 n 工艺 手艺 v 精心去做</p>\n<p>skill 技能</p>\n<p>team 团队</p>\n<p>panel 专家小组 ==group  n -&gt;面板 仪表盘</p>\n<p>task duty</p>\n<p>teamwork</p>\n<p>work vi 有效 起作用 It works 不及物</p>\n<p>this plan works</p>\n<p>labor 劳动 努力 n 劳动 labor force</p>\n<p>career 职业,职业生涯 比较长远</p>\n<p>canner 癌症</p>\n<p>academic 学术的 academic language 学生语言</p>\n<p>survey v/n <strong>调查</strong>研究</p>\n<p>invest 投资</p>\n<p>investigate 调查 investigation 调查 n</p>\n<p>novel 新颖的  n 小说 idea  新奇的观点</p>\n<p>fresh 新鲜的 fresh air</p>\n<p>latest 最新的 this is my latest findings   // late 的最高级 最晚的 最迟的</p>\n<p>current 目前的 现在的  adj 正在流通中的  n 电流 水流 潮流</p>\n<p>recent 最近 recently</p>\n<p>modern 现代  in this modern  society</p>\n<p>latter 后者 later 后来</p>\n<p>former 前者</p>\n<p>boost 推动 促进</p>\n<p>promote Pro 往前 mote 移动  往前移动-&gt;推动 促进 ;推销 促销 晋升升职</p>\n<p>out of fashion</p>\n<p>Internet 互联网  on the Internet   inter -&gt;相互之间</p>\n<p>network 网络</p>\n<p>interaction 互动</p>\n<p>online 在线 offline 离线   online games Online study Online shopping</p>\n<p>act  行动 n-&gt;法案 =bill</p>\n<p>actual 事实的</p>\n<p>actually 事实上的</p>\n<p>agent 代理人 代理</p>\n<p>agency 代理机构 机构</p>\n<p>CIA central intelligence 智力情报 agency</p>\n<p>active 活动的 活跃的  activity 活动 活跃性</p>\n<p>inactive  不活跃的</p>\n', 0, 'Special 专家\n\nSpecialist 专业人士\n\nFame 名声\n\nSearch 寻找\n\nSearch for 寻找 Seek 寻求\n\nHunt 狩猎\n\nStudy 学习,研究\n\nTerm 名词-学期;术语 Computer term 计算机术语 一段时间,一段时期 in the long short of\n\nrun 跑 v-运营 run a company n-一段时期 in the long term =in the long run 在长期\n\nSchool 学校 学院 ;学派流派; 鱼群 a school of fish  一群鱼 v-教育  教学 schooling\n\ncurriculum 课程表,全部课程  \n\ncurricular 课程表的\n\nExtra 额外的 Extra-curricular activities 课外活动\n\ncourse 课程 n 一道菜 ->过程  in the  course of 在...过程中\n\nlesson 课程 ,教训\n\napplicant 申请人  申请者\n\napply 申请 for  a job Apply to 应用于. ..适用于 \n\napply ... to ,, 将..应用于...\n\napplic**able**  可应用的  可使用的\n\navailable  可行的 可靠的\n\navail 效用\n\nscience 科学 and techno**logy** 技术 (技术,和技术学-总称 )\n\ntechnique 技术的手段 具体的技术\n\ntechnological 技术的\n\ndigital 数字的 economy  \n\ndigital technology 数字技术\n\ndata 数据 \n\nrate 率  百分之多少 速度 等级 级别 v-> 评估 jobless rate 失业率 n =speed \n\nas the rate of =at the speed of以什么什么的速度\n\n等级 the first rate =the first class\n\n价格money\n\nover 在...之上 多 超过\n\nunder 在...之下 少 没有\n\noverrate 高估 underrate 低估\n\nestimate 估计 value 价值 价值观 ->values \n\n->v . 估值  估价 珍惜 重视 \n\novervalue undervalue\n\npercent 百分比 20% twenty percent \n\npercent**age** age 名称后最 language marriage 婚姻  \n\n百分比 总称 \n\ncentury 世纪 \n\ndecade 十年\n\nduring 在...期间 \n\ninformation 信息,情报 search for **inform**ation   通知 v>   inform  form 形式 格式 v 形成\n\nmassage  信息  send message  发信息 send a short message \n\nperform**ance**  表演 表现 ence 名称后缀  pre 在..之前 pre 完全 每一个 per day 每一天 per year 每一年\n\nperform v 表演 表现 执行 履行\n\nshow 表名,表现 n 秀\n\ncraft 精密 n 工艺 手艺 v 精心去做\n\nskill 技能 \n\nteam 团队\n\npanel 专家小组 ==group  n ->面板 仪表盘\n\ntask duty\n\nteamwork\n\nwork vi 有效 起作用 It works 不及物\n\nthis plan works\n\nlabor 劳动 努力 n 劳动 labor force\n\ncareer 职业,职业生涯 比较长远 \n\ncanner 癌症\n\nacademic 学术的 academic language 学生语言\n\n survey v/n **调查**研究  \n\ninvest 投资\n\ninvestigate 调查 investigation 调查 n \n\nnovel 新颖的  n 小说 idea  新奇的观点\n\nfresh 新鲜的 fresh air\n\nlatest 最新的 this is my latest findings   // late 的最高级 最晚的 最迟的\n\ncurrent 目前的 现在的  adj 正在流通中的  n 电流 水流 潮流\n\nrecent 最近 recently\n\nmodern 现代  in this modern  society\n\nlatter 后者 later 后来\n\nformer 前者\n\nboost 推动 促进\n\npromote Pro 往前 mote 移动  往前移动->推动 促进 ;推销 促销 晋升升职\n\nout of fashion\n\nInternet 互联网  on the Internet   inter ->相互之间\n\nnetwork 网络\n\ninteraction 互动 \n\nonline 在线 offline 离线   online games Online study Online shopping\n\nact  行动 n->法案 =bill\n\nactual 事实的\n\nactually 事实上的\n\nagent 代理人 代理\n\nagency 代理机构 机构\n\nCIA central intelligence 智力情报 agency\n\nactive 活动的 活跃的  activity 活动 活跃性\n\ninactive  不活跃的\n\n\n\n\n\n', '', 0, '', '', 'http://111.229.114.126/upload/2019/12/201286912381462-9ead83976db44e889ebff05d6d56386c.jpg', '12_12英语打卡', 0, 'english', 28, 0, NULL, NULL, 'english');
INSERT INTO `posts` VALUES (0, 7, '2019-12-12 22:14:27', 0, '2019-12-23 17:45:21', 0, 0, '2019-12-23 17:45:21', '<p>company  n公司</p>\n<p>Accompany A+辅音  表示强调  用to ...   v-&gt;陪伴  伴随 伴奏</p>\n<p>cooperate 合作 operate  v-&gt;操作 手术  operate the computer</p>\n<p>com=con =cor =col=co =together 合作</p>\n<p>cooperation n 合作</p>\n<p>corporate 公司 法人的</p>\n<p>corporation n 公司 法人</p>\n<p>firm 公司 adj 牢固的,坚固的  小公司  company 中 corporation 大公司</p>\n<p>customer 顾客  consumer</p>\n<p>manage 管理  manage this company  manage to do something 设法做到某事 努力做到某事</p>\n<p>management n 管理  manager 管理者=execu<strong>tive</strong> 决策者 adj-&gt;执行的  board 甲板,董事会,委员会</p>\n<p>chairman 主席  CEO 首席执行官  chief executive officer</p>\n<p>der=foolish 傻  -er=or 表示人或者物</p>\n<p>cooker 厨具  cook 厨师 tractor 拖拉机</p>\n<p>advice n 建议 advise v 建议 suggestion v 建议 暗示表明 suggestion n</p>\n<p>quality 质量 adj 高质量的高品质的  quality time =golden time</p>\n<p>feature n 特征特写  给...特写</p>\n<p>ingredient n-&gt; 组成成分 factor 因素  element 元素 组成成分</p>\n<p>element<strong>ary</strong> 元素的 初级的 基本的</p>\n<p>elementary school 小学 primary 初级的,重要的 primary school</p>\n<p>stand out 突出 杰出 stand out or get out -&gt;不成功便成仁</p>\n<p>outstanding  杰出的 leader 领导</p>\n<p>outside 外面</p>\n<p>inside 里面</p>\n<p>persist<strong>ent</strong> 坚持不懈的  -ant=ent adj后缀 -ance =ence -&gt;n</p>\n<p>persist in doing something 坚持做某事   sist-&gt;stand  =st 站立</p>\n<p>persistence n 坚持不懈 nothing in this world can take the place of persistence</p>\n<p>insist on doing something 坚持做某事 -&gt;内心的坚持</p>\n<p>exit n 出口 安全出口 ex=out 往外 It -词根 -&gt;走 exist  存在 &lt;- 站在门外 existence n 存在</p>\n<p>potential al-&gt;adj.  有潜力的  n 潜力 潜能</p>\n<p>possible 可能的 impossible 不可能的 im=in 往里,在里边 -&gt;imprison v 监禁 imprison the mind 禁锢思想 加adj前面一般表示否定</p>\n<p>likely 可能的  be likely to  可能...  easily</p>\n<p>n+ly -&gt;adj 友好的  friendly 友好的</p>\n<p>adj+ly -&gt;adv easily 简单的 轻松的  simply 简单的</p>\n<p>prone  be prone to 易于....</p>\n<p>probable 可能的 probably 可能地</p>\n<p>lead v 带领 leader 领导 leadership 领导力领导关系  friendship 友谊</p>\n<p>employment n 雇佣 利用  -er  雇员 -ee 老板</p>\n<p>staff 员工</p>\n<p>desire 渴望  desirable 值得渴望的  值得拥有的</p>\n<p>wonder v 好奇 想知道 n 好奇 好奇心 奇迹</p>\n<p>wonderful  精彩的 充满奇迹的</p>\n<p>purpose 目的 Aim 目的  v 瞄准  aim at ..</p>\n<p>goal 目标 end 结尾  finish 完成 lack 缺乏 start 开始 beginning 开始</p>\n<p>achieve 完成  ==accomplish 实现  achievement=accomplishment成就</p>\n<p>the sense of achievements  confidence 自信  confident 自信的</p>\n<p>gain 得到  获得 收益</p>\n<p>no pains no gains 没有付出没有收获</p>\n<p>secure 安全的 v-保卫 保护 security 安全性  fame and money</p>\n<p>safe 安全 dangerous 危险</p>\n<p>save  保存,确保 en- 使...  ensure 确保=make sure</p>\n<p>encourage 鼓励</p>\n<p>support 支持</p>\n<p>hold 持有 ; 认为  the author holds that &quot;&quot;</p>\n<p>household 家庭有的</p>\n<p>point 点 观点  view   看  风景,看法   view point  观点看法</p>\n<p>from my viewpoint 在我看来/perspective  n 观点  看法</p>\n<p>from my perspective 巨闪</p>\n<p>independent 独立的 independence  独立 n</p>\n<p>depend on upon  依赖的 依靠rely on</p>\n<p>dependent 依赖  依靠</p>\n<p>imbalance 不平衡的</p>\n<p>immediate reason 直接原因  media 媒体 媒介 immediate 直接的 立即的 immediately立即的</p>\n<p>inability 无能  able</p>\n<p>individual 个人 个体  group 集体  divide 分开</p>\n<p>person  个人的 personal 个人的 独立的</p>\n<p>personality 名人;个性</p>\n<p>age n 年龄 v 变老 老化  the aging population 人口老龄化</p>\n<p>adult 成年人 single dog  单身狗  single 单身 单一 couple 夫妻,夫妇 一对  couple with</p>\n<p>romantic 浪漫的</p>\n<p>engage vt 及物  雇佣  ,订婚  engage sb.  vi -engage in  忙于...从事于...</p>\n<p>marry  v 嫁娶 marital 婚姻的 嫁娶的</p>\n<p>gender 性别  knit v 编织 结合到一起  together</p>\n<p>spouse 配偶 double 双倍的 adj 双倍的,翻倍的  efforts 努力</p>\n<p>divorce 离婚 di - 分开</p>\n<p>leave 离开 使- make  leave sb. sad  使某人悲伤</p>\n<p>quit  离开 放弃 辞职</p>\n<p>alone 单独的 独自的  lonely 孤独的</p>\n<p>relative 亲戚  relate v 联系 讲述,叙述  adj 相关的 相联系的 adj 相对的  relatively + handsome 相对的帅</p>\n<p>absolutely 绝对的</p>\n<p>relation n 联系  relationship n 联系  关系</p>\n<p>life 生活 span v 跨越  n 跨度 lifespan 寿命</p>\n<p>lifestyle 生活方式</p>\n<p>style 风格  方式 free style  stylish 时髦的=fashionable  时髦的</p>\n<p>popular 流行的 ,受欢迎的 popularity 流行性</p>\n<p>irregular ir表示否定 只能的r开头的adj 前  规律的 规则的,常规,普通,经常 regular customer 常客</p>\n<p>responsible 负责的 irresponsible 不负责的</p>\n<p>discover 发现 disease 疾病  easy 简单的  ,轻松的,安逸的  ease n 简单,轻松.安逸.舒服  <strong>dis</strong> 否定</p>\n<p>involve 旋转 涉及 卷入  involved sb.  涉及某人</p>\n<p>con<strong>tain</strong> 包含 包括 container 容器   tain 表示拿到一起</p>\n<p>sustain 拿住  维持,持续  sustainable 可持续的   sustainable development 可持续发展</p>\n<p>invest 头则  investment n 投资</p>\n<p>initial 开始的 in<strong>it</strong>iate   启动 a reform</p>\n<p>initial 开始的 最初的 起始的</p>\n<p>initial dream 初心</p>\n<p>in<strong>flu</strong>ence  影响 潜移默化那种  flu 流感 fluent 流利的  fluid 流动的,液体流体</p>\n<p>influential 有影响力的人  有权势的人</p>\n<p>close 关  include 包含包括  inclusion n 包含包括  inclusive adj  包容的</p>\n<p>exclude v 排外 排除 排斥 n exclusion  exclusive 排除排外的  独家的 专用的专有的</p>\n<p>exclusive interview; 奢华的,高级的 con<strong>clude</strong> 结束 close 下结论</p>\n<p>conclusion 结束 ,结论  come to the conclusion that &quot;&quot;</p>\n<p>conclusive  结束的  结论性的</p>\n<p>inconclusive  没有结论性的  乾坤未定,你我皆是黑马</p>\n', 0, 'company  n公司 \n\nAccompany A+辅音  表示强调  用to ...   v->陪伴  伴随 伴奏\n\ncooperate 合作 operate  v->操作 手术  operate the computer\n\ncom=con =cor =col=co =together 合作 \n\ncooperation n 合作\n\ncorporate 公司 法人的\n\ncorporation n 公司 法人\n\nfirm 公司 adj 牢固的,坚固的  小公司  company 中 corporation 大公司\n\ncustomer 顾客  consumer\n\nmanage 管理  manage this company  manage to do something 设法做到某事 努力做到某事\n\nmanagement n 管理  manager 管理者=execu**tive** 决策者 adj->执行的  board 甲板,董事会,委员会\n\nchairman 主席  CEO 首席执行官  chief executive officer \n\n der=foolish 傻  -er=or 表示人或者物 \n\ncooker 厨具  cook 厨师 tractor 拖拉机\n\nadvice n 建议 advise v 建议 suggestion v 建议 暗示表明 suggestion n\n\nquality 质量 adj 高质量的高品质的  quality time =golden time\n\nfeature n 特征特写  给...特写\n\ningredient n-> 组成成分 factor 因素  element 元素 组成成分\n\nelement**ary** 元素的 初级的 基本的\n\nelementary school 小学 primary 初级的,重要的 primary school \n\nstand out 突出 杰出 stand out or get out ->不成功便成仁\n\noutstanding  杰出的 leader 领导\n\noutside 外面\n\ninside 里面\n\npersist**ent** 坚持不懈的  -ant=ent adj后缀 -ance =ence ->n\n\npersist in doing something 坚持做某事   sist->stand  =st 站立\n\npersistence n 坚持不懈 nothing in this world can take the place of persistence\n\ninsist on doing something 坚持做某事 ->内心的坚持 \n\nexit n 出口 安全出口 ex=out 往外 It -词根 ->走 exist  存在 <- 站在门外 existence n 存在\n\npotential al->adj.  有潜力的  n 潜力 潜能\n\npossible 可能的 impossible 不可能的 im=in 往里,在里边 ->imprison v 监禁 imprison the mind 禁锢思想 加adj前面一般表示否定\n\nlikely 可能的  be likely to  可能...  easily \n\nn+ly ->adj 友好的  friendly 友好的\n\nadj+ly ->adv easily 简单的 轻松的  simply 简单的\n\nprone  be prone to 易于....\n\nprobable 可能的 probably 可能地\n\nlead v 带领 leader 领导 leadership 领导力领导关系  friendship 友谊\n\nemployment n 雇佣 利用  -er  雇员 -ee 老板\n\nstaff 员工 \n\ndesire 渴望  desirable 值得渴望的  值得拥有的\n\nwonder v 好奇 想知道 n 好奇 好奇心 奇迹\n\nwonderful  精彩的 充满奇迹的\n\npurpose 目的 Aim 目的  v 瞄准  aim at ..\n\ngoal 目标 end 结尾  finish 完成 lack 缺乏 start 开始 beginning 开始  \n\nachieve 完成  ==accomplish 实现  achievement=accomplishment成就\n\nthe sense of achievements  confidence 自信  confident 自信的\n\ngain 得到  获得 收益\n\nno pains no gains 没有付出没有收获\n\nsecure 安全的 v-保卫 保护 security 安全性  fame and money\n\nsafe 安全 dangerous 危险\n\nsave  保存,确保 en- 使...  ensure 确保=make sure\n\nencourage 鼓励\n\nsupport 支持 \n\nhold 持有 ; 认为  the author holds that \"\"\n\nhousehold 家庭有的\n\npoint 点 观点  view   看  风景,看法   view point  观点看法\n\nfrom my viewpoint 在我看来/perspective  n 观点  看法\n\nfrom my perspective 巨闪\n\nindependent 独立的 independence  独立 n\n\ndepend on upon  依赖的 依靠rely on\n\ndependent 依赖  依靠\n\nimbalance 不平衡的\n\nimmediate reason 直接原因  media 媒体 媒介 immediate 直接的 立即的 immediately立即的\n\ninability 无能  able\n\nindividual 个人 个体  group 集体  divide 分开  \n\nperson  个人的 personal 个人的 独立的\n\npersonality 名人;个性\n\nage n 年龄 v 变老 老化  the aging population 人口老龄化\n\nadult 成年人 single dog  单身狗  single 单身 单一 couple 夫妻,夫妇 一对  couple with \n\nromantic 浪漫的\n\nengage vt 及物  雇佣  ,订婚  engage sb.  vi -engage in  忙于...从事于...\n\nmarry  v 嫁娶 marital 婚姻的 嫁娶的\n\ngender 性别  knit v 编织 结合到一起  together\n\nspouse 配偶 double 双倍的 adj 双倍的,翻倍的  efforts 努力\n\ndivorce 离婚 di - 分开 \n\nleave 离开 使- make  leave sb. sad  使某人悲伤 \n\nquit  离开 放弃 辞职\n\nalone 单独的 独自的  lonely 孤独的  \n\nrelative 亲戚  relate v 联系 讲述,叙述  adj 相关的 相联系的 adj 相对的  relatively + handsome 相对的帅\n\nabsolutely 绝对的\n\nrelation n 联系  relationship n 联系  关系\n\nlife 生活 span v 跨越  n 跨度 lifespan 寿命\n\nlifestyle 生活方式\n\nstyle 风格  方式 free style  stylish 时髦的=fashionable  时髦的\n\npopular 流行的 ,受欢迎的 popularity 流行性 \n\nirregular ir表示否定 只能的r开头的adj 前  规律的 规则的,常规,普通,经常 regular customer 常客\n\nresponsible 负责的 irresponsible 不负责的\n\ndiscover 发现 disease 疾病  easy 简单的  ,轻松的,安逸的  ease n 简单,轻松.安逸.舒服  **dis** 否定\n\ninvolve 旋转 涉及 卷入  involved sb.  涉及某人\n\ncon**tain** 包含 包括 container 容器   tain 表示拿到一起\n\nsustain 拿住  维持,持续  sustainable 可持续的   sustainable development 可持续发展\n\ninvest 头则  investment n 投资\n\ninitial 开始的 in**it**iate   启动 a reform \n\ninitial 开始的 最初的 起始的\n\ninitial dream 初心  \n\nin**flu**ence  影响 潜移默化那种  flu 流感 fluent 流利的  fluid 流动的,液体流体 \n\ninfluential 有影响力的人  有权势的人\n\nclose 关  include 包含包括  inclusion n 包含包括  inclusive adj  包容的\n\nexclude v 排外 排除 排斥 n exclusion  exclusive 排除排外的  独家的 专用的专有的\n\nexclusive interview; 奢华的,高级的 con**clude** 结束 close 下结论\n\nconclusion 结束 ,结论  come to the conclusion that \"\"\n\nconclusive  结束的  结论性的\n\ninconclusive  没有结论性的  乾坤未定,你我皆是黑马\n\n', '', 0, '乾坤未定,你我皆是黑马', '', 'http://111.229.114.126/upload/2019/12/201286912381462-9ead83976db44e889ebff05d6d56386c.jpg', '12_12英语打卡', 0, 'english_12_12', 40, 0, NULL, NULL, 'english_12_12');
INSERT INTO `posts` VALUES (0, 8, '2019-12-14 14:43:42', 0, '2019-12-23 17:44:47', 0, 0, '2019-12-23 17:44:47', '<p>repeat v. 重复</p>\n<p>recall 回忆/撤回  <strong>re-again</strong>  =back</p>\n<p>receive v.接受  被动接受</p>\n<p>accept 接受v . 主动接受  ceive - = cept-  词根 得到 reception n 接受</p>\n<p>A+c 强调 a加辅音</p>\n<p>perceive v. 全部得到 理解 领悟 感受到</p>\n<p>perception n. 理解 领悟  per- 每一个完全 全部</p>\n<p>feel  v. 感觉  feeling  感觉 n.</p>\n<p>taste n. 味觉 品味 v . 尝起来</p>\n<p>sence  v./n. 感觉  sensitive adj  灵敏的 敏感的  sensible  能感觉到的</p>\n<p>wise  adj 明智的 智慧的  wisdom n .智慧</p>\n<p>real<strong>ize</strong> 意识到  v.   实现</p>\n<p>aware be aware of 意识到  = be conscious of... 知道  意识到  awareness =consciousness 意识 n.</p>\n<p>alert  警惕,提醒  n.警惕  警报  understand  理解</p>\n<p>Note v.注意到  n.笔记  take  notes   notebook</p>\n<p>concept  概念-抽象的 eg. new concept English  conceive  怀孕;构思 想出来 conception n.怀孕 构思,想法(具体的)</p>\n<p>re<strong>cogn</strong>ize  cogn- 知道   v. 认可  认识到  cognitive  认知性的</p>\n<p>recommend  推荐  建议  recommendation n. 推荐</p>\n<p>recover v.再次覆盖  恢复  (草地)  复苏</p>\n<p>cycle  n  周期 循环 recycle   v . 循环回来-&gt;回收利用  recyclable  adj 可回收利用的</p>\n<p>reflect v.反射 反映 反思 思考   reflect on this problem</p>\n<p>reflection  n. 反射 反映 思考</p>\n<p>image 形象 n. imagine v.想象  fantasy  v/n 幻想 想像</p>\n<p>fantastic  adj. 棒极了  perfect  完美的</p>\n<p>remain  主要的  main idea  中心思想  major  专业 n.  v.主修 专攻  major in English   adj.主要的.大部分的   majority  n .大部分</p>\n<p>the majority of people 大部分人  minor  n. 辅修专业 v. +in 辅修  adj .次要的 小部分的</p>\n<p>the  minority of 小部分的</p>\n<p>largely 大部分的</p>\n<p>remember 再次想起成员-&gt; v.想起  member 成员  memory n. 记忆  memorize v .记住</p>\n<p>place 位置  replace  摆放 代替   instead of  代替...而不是</p>\n<p>require v .要求 n .requirement  n .要求</p>\n<p>reserve   serve 单词-&gt;服务 发挥作用 service 服务v/n  servant n.服务员 仆人</p>\n<p>词根-&gt;保持 ,保留 -持有   reserve v.  保留 保存 预留</p>\n<p>resident 居民 reside v.居住</p>\n<p>result 结果 n.   v.-&gt; result in 导致 -lead to</p>\n<p>result from 由于..原因   respond to ....  对...作出反应  reflect  反映(照镜子反射)</p>\n<p>response  反应. 回应 v. respondent 做出回应的人</p>\n<p>response n.反应  responsible  负责人的</p>\n<p>irresponsible 不负责任的  responsibility  责任</p>\n<p>function 功能.作用   multi-function hall  多功能大厅</p>\n<p>role  n. 角色  作用  play a role  in  =play a part in 在..扮演角色</p>\n<p>reveal  v. 揭示  retire v .退休  retirement   n  <strong>ment</strong> 后缀</p>\n<p>entire 完全的  entirely wrong  完全错的</p>\n<p>overall  总体的 总的   reverse  v.颠倒 扭转 逆转  adj . 相反的</p>\n', 0, 'repeat v. 重复\n\nrecall 回忆/撤回  **re-again**  =back \n\nreceive v.接受  被动接受  \n\naccept 接受v . 主动接受  ceive - = cept-  词根 得到 reception n 接受 \n\nA+c 强调 a加辅音 \n\nperceive v. 全部得到 理解 领悟 感受到\n\nperception n. 理解 领悟  per- 每一个完全 全部\n\nfeel  v. 感觉  feeling  感觉 n.\n\ntaste n. 味觉 品味 v . 尝起来\n\nsence  v./n. 感觉  sensitive adj  灵敏的 敏感的  sensible  能感觉到的\n\nwise  adj 明智的 智慧的  wisdom n .智慧\n\nreal**ize** 意识到  v.   实现 \n\naware be aware of 意识到  = be conscious of... 知道  意识到  awareness =consciousness 意识 n.\n\nalert  警惕,提醒  n.警惕  警报  understand  理解\n\nNote v.注意到  n.笔记  take  notes   notebook\n\nconcept  概念-抽象的 eg. new concept English  conceive  怀孕;构思 想出来 conception n.怀孕 构思,想法(具体的)\n\nre**cogn**ize  cogn- 知道   v. 认可  认识到  cognitive  认知性的\n\nrecommend  推荐  建议  recommendation n. 推荐 \n\nrecover v.再次覆盖  恢复  (草地)  复苏\n\ncycle  n  周期 循环 recycle   v . 循环回来->回收利用  recyclable  adj 可回收利用的\n\nreflect v.反射 反映 反思 思考   reflect on this problem \n\nreflection  n. 反射 反映 思考\n\nimage 形象 n. imagine v.想象  fantasy  v/n 幻想 想像\n\nfantastic  adj. 棒极了  perfect  完美的\n\nremain  主要的  main idea  中心思想  major  专业 n.  v.主修 专攻  major in English   adj.主要的.大部分的   majority  n .大部分\n\nthe majority of people 大部分人  minor  n. 辅修专业 v. +in 辅修  adj .次要的 小部分的\n\nthe  minority of 小部分的\n\nlargely 大部分的 \n\nremember 再次想起成员-> v.想起  member 成员  memory n. 记忆  memorize v .记住\n\nplace 位置  replace  摆放 代替   instead of  代替...而不是\n\nrequire v .要求 n .requirement  n .要求 \n\nreserve   serve 单词->服务 发挥作用 service 服务v/n  servant n.服务员 仆人 \n\n词根->保持 ,保留 -持有   reserve v.  保留 保存 预留\n\nresident 居民 reside v.居住  \n\nresult 结果 n.   v.-> result in 导致 -lead to   \n\nresult from 由于..原因   respond to ....  对...作出反应  reflect  反映(照镜子反射)\n\nresponse  反应. 回应 v. respondent 做出回应的人\n\nresponse n.反应  responsible  负责人的\n\nirresponsible 不负责任的  responsibility  责任  \n\nfunction 功能.作用   multi-function hall  多功能大厅\n\nrole  n. 角色  作用  play a role  in  =play a part in 在..扮演角色\n\nreveal  v. 揭示  retire v .退休  retirement   n  **ment** 后缀\n\nentire 完全的  entirely wrong  完全错的\n\noverall  总体的 总的   reverse  v.颠倒 扭转 逆转  adj . 相反的', '', 0, '', '', '', '12_14英语打卡', 0, 'english_12_14', 31, 0, NULL, NULL, 'english_12_14');
INSERT INTO `posts` VALUES (0, 9, '2019-12-16 17:23:11', 0, '2019-12-23 17:44:24', 0, 0, '2019-12-23 17:44:24', '<p>industry n.工业 产业 勤奋勤勉的  adj industrial 工业的 产业的  industrious adj  勤奋的  勤勉的=diligent</p>\n<p>=hardworking</p>\n<p>machine 机器</p>\n<p>equipment  n.设备</p>\n<p>introduce  引进  advanced  先进的高级的</p>\n<p>device n.装备 装置 设备</p>\n<p>engineer 工程师  engine 引擎,发动机   energy 能力  能源</p>\n<p>power 电力  力量 force n.力量 v.强迫  force sb.  to do sth.</p>\n<p>power 权力 权势 power plant  电厂</p>\n<p>powerful 有力量的 adj .   power<strong>less</strong></p>\n<p>useful  useless  careful  careless  hopeful  hopeless</p>\n<p>streng<strong>th</strong>    -th- n.后缀 力量,优势   weakness  strong</p>\n<p>advantage  优势  disadvantage  劣势</p>\n<p>benefit  好处 利益 福利  perfect 利润</p>\n<p>vt-使受益   benefit somebody</p>\n<p>vi- benefit from.... 从哪里得到好处</p>\n<p>beneficial  有好处的,有利的  harm  v. n. 上海  harmful  有害的  be harmful to 对..有害</p>\n<p>effort n.努力  effortless  不努力的</p>\n<p>fuel  n.燃料   v.加燃料-&gt;刺激   resource 资源  source 来源</p>\n<p>HR  人力资源   Human Resources</p>\n<p>material  n.材料 物质  adj.物质的  材料的</p>\n<p>materialism  物质注意;   唯物主义</p>\n<p>solar 太阳的  solar  energy  太阳能</p>\n<p>natural  自然的  nature 自然,天性,本性  human  nature 人性</p>\n<p>prey v.捕获  n.猎物</p>\n<p>artificial adj.人工的 <strong>fic</strong>  =fact=fect =词根 =做do  art 艺术  虚伪的,矫揉造作的</p>\n<p>artificial intelligence  人工智能  creative 创造性的</p>\n<p>manu<strong>fact</strong>urer n.制造商  <strong>manu</strong>al 人工的 ,手工的   manufacture v.制造</p>\n<p>ef<strong>fect</strong>  影响,效果  v.完成,实现</p>\n<p>have an effect on....对...产生影响</p>\n<p>effective 有效的   take effective measure to do something  采取有效措施去做某事</p>\n<p>affect  v.去影响   打动,感动   affection  n.影响;爱情 ,柔情  affectionate 柔情似水的,含情脉脉的</p>\n<p>impact v. n. 冲击,影响</p>\n<p>perfect  完美的  <strong>per</strong> - 完全,每一个</p>\n<p>imperfect  不完美的</p>\n<p>ef<strong>fic</strong>ient adj.  效率很高的  effective 有效果的   efficiency  效率  enhance  v. 提高</p>\n<p>prompt v.提高 推动,促进 adj.迅速的</p>\n<p>pollution  污染  pollute  v.污染</p>\n<p>min  v. n. 混合 classify  分类 v.</p>\n<p>harmful  contaminate  v.污染</p>\n<p>damage  v. 破坏  destroy v.破坏  破坏严重  ruin  v. 毁灭   in ruins  在废墟中</p>\n<p>business  生意.商业  busy 忙</p>\n<p>market  市场 n.  v.销售,营销   marketing  营销</p>\n<p>global  全球的 =universal  普遍的,全体的 共同的 globe  n.球  全球 sphere 球体</p>\n<p>hemisphere  半球   trade  v.n. 交易 贸易 行业</p>\n<p>the  war of  trade   the  trade war  贸易战</p>\n<p>purchase  v. =buy   order 订货  v. n.  命令 顺序 秩序</p>\n<p>list  清单 名单  v.列举</p>\n<p>port  港口  airport  航空港口   <strong>im</strong>pact  进口  export  出口的</p>\n<p>passport  n. 护照 通行证</p>\n<p>cost   n.成本  费用 代价   at the  cost of ...以..为代价</p>\n<p>spend  v.花费  pay v.付钱</p>\n<p>charge v. 充电 n. 电荷 费用  v.收费  free  of  charge 免费  掌管,负责  控告</p>\n<p>charge sb. with ...   accuse  sb.  of...</p>\n<p>rent  n 出租 租金</p>\n<p>price  价格   value</p>\n<p>worth  价值    worthy  值得的</p>\n<p>share  分享   v.  n.份额 股份 股票 market share  shareholder  股东 =stockholder</p>\n<p>stock  库存 存货,股票 股份</p>\n<p>economic  经济的  economy 经济  economics  经济学  economist 经济学家</p>\n<p><strong>found</strong>ation  found  v.建立 设立  n.建立 设立;基础 基本功 基金会</p>\n<p>founder  创始人</p>\n<p>basic  基本的基础的   base  基础  base...on...将...基于...</p>\n<p>be base on  基于.....</p>\n<p>ultimate=eventual  最终的 最后的</p>\n<p>ultimately=eventually  最总 最后   =finally  lastly  at last</p>\n<p><strong>radic</strong>al 根本上的,根本的  激进的</p>\n<p>changes  改变</p>\n<p>commercial  adj   商业的   commerce  商业</p>\n<p>accounting 会计  会计学 ,accountant  会计师 account v.  纪录 记账  count v.计算  数数  n.账户 账目</p>\n<p>amount  总数 总量   v. amount to.  总数达...  等同于....</p>\n<p>total  总的  income  收入</p>\n<p>financial  金融的,财政的 finance  n.金融   interest  兴趣,利息 利益</p>\n<p>the rate  of  interest 利率   in  the  interest  of  sb.  为了某人的利益</p>\n<p>interesting  感兴趣的  interesting  in ...  对什么感情去</p>\n', 0, 'industry n.工业 产业 勤奋勤勉的  adj industrial 工业的 产业的  industrious adj  勤奋的  勤勉的=diligent\n\n=hardworking \n\nmachine 机器\n\nequipment  n.设备\n\nintroduce  引进  advanced  先进的高级的\n\ndevice n.装备 装置 设备\n\nengineer 工程师  engine 引擎,发动机   energy 能力  能源\n\npower 电力  力量 force n.力量 v.强迫  force sb.  to do sth.\n\npower 权力 权势 power plant  电厂 \n\npowerful 有力量的 adj .   power**less**   \n\nuseful  useless  careful  careless  hopeful  hopeless \n\nstreng**th**    -th- n.后缀 力量,优势   weakness  strong \n\nadvantage  优势  disadvantage  劣势\n\nbenefit  好处 利益 福利  perfect 利润 \n\nvt-使受益   benefit somebody \n\nvi- benefit from.... 从哪里得到好处\n\nbeneficial  有好处的,有利的  harm  v. n. 上海  harmful  有害的  be harmful to 对..有害\n\neffort n.努力  effortless  不努力的\n\nfuel  n.燃料   v.加燃料->刺激   resource 资源  source 来源\n\nHR  人力资源   Human Resources \n\nmaterial  n.材料 物质  adj.物质的  材料的\n\nmaterialism  物质注意;   唯物主义\n\nsolar 太阳的  solar  energy  太阳能\n\nnatural  自然的  nature 自然,天性,本性  human  nature 人性\n\nprey v.捕获  n.猎物\n\nartificial adj.人工的 **fic**  =fact=fect =词根 =做do  art 艺术  虚伪的,矫揉造作的\n\nartificial intelligence  人工智能  creative 创造性的\n\nmanu**fact**urer n.制造商  **manu**al 人工的 ,手工的   manufacture v.制造  \n\nef**fect**  影响,效果  v.完成,实现\n\nhave an effect on....对...产生影响\n\neffective 有效的   take effective measure to do something  采取有效措施去做某事\n\naffect  v.去影响   打动,感动   affection  n.影响;爱情 ,柔情  affectionate 柔情似水的,含情脉脉的\n\nimpact v. n. 冲击,影响 \n\nperfect  完美的  **per** - 完全,每一个\n\nimperfect  不完美的\n\nef**fic**ient adj.  效率很高的  effective 有效果的   efficiency  效率  enhance  v. 提高\n\nprompt v.提高 推动,促进 adj.迅速的\n\npollution  污染  pollute  v.污染 \n\nmin  v. n. 混合 classify  分类 v.\n\nharmful  contaminate  v.污染\n\ndamage  v. 破坏  destroy v.破坏  破坏严重  ruin  v. 毁灭   in ruins  在废墟中\n\nbusiness  生意.商业  busy 忙   \n\nmarket  市场 n.  v.销售,营销   marketing  营销\n\nglobal  全球的 =universal  普遍的,全体的 共同的 globe  n.球  全球 sphere 球体\n\nhemisphere  半球   trade  v.n. 交易 贸易 行业\n\nthe  war of  trade   the  trade war  贸易战\n\npurchase  v. =buy   order 订货  v. n.  命令 顺序 秩序\n\nlist  清单 名单  v.列举\n\nport  港口  airport  航空港口   **im**pact  进口  export  出口的\n\npassport  n. 护照 通行证\n\ncost   n.成本  费用 代价   at the  cost of ...以..为代价\n\nspend  v.花费  pay v.付钱\n\ncharge v. 充电 n. 电荷 费用  v.收费  free  of  charge 免费  掌管,负责  控告\n\ncharge sb. with ...   accuse  sb.  of...\n\nrent  n 出租 租金\n\nprice  价格   value  \n\nworth  价值    worthy  值得的\n\nshare  分享   v.  n.份额 股份 股票 market share  shareholder  股东 =stockholder \n\nstock  库存 存货,股票 股份 \n\neconomic  经济的  economy 经济  economics  经济学  economist 经济学家 \n\n**found**ation  found  v.建立 设立  n.建立 设立;基础 基本功 基金会\n\nfounder  创始人\n\nbasic  基本的基础的   base  基础  base...on...将...基于...\n\nbe base on  基于.....\n\nultimate=eventual  最终的 最后的\n\nultimately=eventually  最总 最后   =finally  lastly  at last\n\n**radic**al 根本上的,根本的  激进的\n\nchanges  改变\n\ncommercial  adj   商业的   commerce  商业\n\naccounting 会计  会计学 ,accountant  会计师 account v.  纪录 记账  count v.计算  数数  n.账户 账目\n\namount  总数 总量   v. amount to.  总数达...  等同于....\n\ntotal  总的  income  收入 \n\nfinancial  金融的,财政的 finance  n.金融   interest  兴趣,利息 利益\n\nthe rate  of  interest 利率   in  the  interest  of  sb.  为了某人的利益\n\ninteresting  感兴趣的  interesting  in ...  对什么感情去  ', '', 0, '', '', '', '12_16英语打卡', 0, 'english_12_16', 17, 0, NULL, NULL, 'english_12_16');
INSERT INTO `posts` VALUES (0, 10, '2019-12-18 22:39:03', 0, '2019-12-23 17:44:10', 0, 0, '2019-12-23 17:44:10', '<p>compare 比较 v.  with  与...比较  compare  a to  b  a 和b  比较</p>\n<p>common 相同点</p>\n<p>common  interest</p>\n<p>rare  adj 稀有的,稀少的</p>\n<p>rarely  adv. 稀有地,稀少地 几乎不   hardly  几乎不</p>\n<p>almost 几乎</p>\n<p>regular 规律的,规则的 普通的 经常的 定期的 regular customer 长客</p>\n<p>lrregular  不....</p>\n<p>routinely  adv. 常规地  route  路径</p>\n<p>random  随机的,随意的   at  random  随机</p>\n<p>average 平均的,普通的   average person 普通人</p>\n<p>normal 正常的,标准的  normal  person 正常人   norm n. 标准 准则  abnormal 不正常的 ab-off</p>\n<p>general adj. 一般的 普遍的 总的  generally speaking 一般来说</p>\n<p>broadly 广泛的,  broadly speaking  广泛的说</p>\n<p>standard  标准 n.   adj .标准的</p>\n<p>height 身高 ,高度  high  高的  peak 巅峰,顶峰 ~匹克</p>\n<p>highly 高度地  extremely 极端地,极其 非常 -easy 极其简单  =very</p>\n<p>ethically 伦理的,道德上的</p>\n<p>slightly 轻微的</p>\n<p>level 水平</p>\n<p>even 即使,平均的</p>\n<p>measure  v. 衡量,测量 n.措施</p>\n<p>special  特殊的,专业的,专门的</p>\n<p>specialist  专业人士</p>\n<p>specific 具体的,特定的</p>\n<p>specially 特殊地</p>\n<p>particularly  =especially   =in  particular  特别,尤其</p>\n<p>counterpart  counter  计算器,柜台 adj.相反的,相对的  adv.相反地,相对地 v.反对 counter sb.</p>\n<p>-part  部分   counterpart  相对应的部分;相对应的人或物</p>\n<p>given  介词-鉴于,考虑到</p>\n<p>compete with 同...竞争 competition 竞争  competitive  竞争性的</p>\n<p>condition 条件,情况  case  情况,事实  this is not the  case</p>\n<p>situation  情况,局势</p>\n<p>environment 环境  environment pollution  环境污染</p>\n<p>position 位置  place  位置  v.放置=put</p>\n<p>space 空间,  spacious  宽敞的</p>\n<p>site 位置  website 网站</p>\n<p>positive 积极的  negative 消极的</p>\n<p>conflict  冲突 v/n</p>\n<p>consider   ... As  ... 将...看做</p>\n<p>consideration  n.思考  adj. considerate  =thoughtful 体贴的,考虑周到的   considerable 值得考虑的 相当大的,相当多</p>\n<p>considerable progress  相当大的进步</p>\n<p>believe 相信,认为</p>\n<p>belief 信念,信仰</p>\n<p>contribute  v.贡献</p>\n<p>contribute to ..促进 有助于</p>\n<p>contribution   贡献</p>\n<p>complain  v.抱怨,投诉  n.complaint n.抱怨 ,投诉</p>\n<p>compete 完成   adj.完全的  competely 完全地</p>\n<p>concern 关系,担心  fear  害怕  scar  伤疤</p>\n<p>confidence n.自信   consequence n. 结果,后果  As a result  /consequence</p>\n<p>consequently adv. 因此,结果是</p>\n<p>consume 消费 consumer 消费者   consumption 消费 n.</p>\n<p>contact v. 联系</p>\n<p>continue v.继续  go  on  keep  stay 待着</p>\n<p>keep calm =stay calm</p>\n', 0, 'compare 比较 v.  with  与...比较  compare  a to  b  a 和b  比较\n\ncommon 相同点\n\ncommon  interest  \n\nrare  adj 稀有的,稀少的\n\nrarely  adv. 稀有地,稀少地 几乎不   hardly  几乎不\n\nalmost 几乎\n\nregular 规律的,规则的 普通的 经常的 定期的 regular customer 长客\n\nlrregular  不....\n\nroutinely  adv. 常规地  route  路径\n\nrandom  随机的,随意的   at  random  随机\n\naverage 平均的,普通的   average person 普通人\n\nnormal 正常的,标准的  normal  person 正常人   norm n. 标准 准则  abnormal 不正常的 ab-off\n\ngeneral adj. 一般的 普遍的 总的  generally speaking 一般来说\n\nbroadly 广泛的,  broadly speaking  广泛的说\n\nstandard  标准 n.   adj .标准的\n\nheight 身高 ,高度  high  高的  peak 巅峰,顶峰 ~匹克 \n\nhighly 高度地  extremely 极端地,极其 非常 -easy 极其简单  =very\n\nethically 伦理的,道德上的\n\nslightly 轻微的\n\nlevel 水平\n\neven 即使,平均的\n\nmeasure  v. 衡量,测量 n.措施 \n\nspecial  特殊的,专业的,专门的\n\nspecialist  专业人士\n\nspecific 具体的,特定的\n\nspecially 特殊地\n\nparticularly  =especially   =in  particular  特别,尤其\n\ncounterpart  counter  计算器,柜台 adj.相反的,相对的  adv.相反地,相对地 v.反对 counter sb.\n\n-part  部分   counterpart  相对应的部分;相对应的人或物\n\ngiven  介词-鉴于,考虑到\n\ncompete with 同...竞争 competition 竞争  competitive  竞争性的\n\ncondition 条件,情况  case  情况,事实  this is not the  case \n\nsituation  情况,局势\n\nenvironment 环境  environment pollution  环境污染\n\nposition 位置  place  位置  v.放置=put \n\nspace 空间,  spacious  宽敞的\n\nsite 位置  website 网站\n\npositive 积极的  negative 消极的\n\nconflict  冲突 v/n \n\nconsider   ... As  ... 将...看做\n\nconsideration  n.思考  adj. considerate  =thoughtful 体贴的,考虑周到的   considerable 值得考虑的 相当大的,相当多\n\nconsiderable progress  相当大的进步\n\nbelieve 相信,认为\n\nbelief 信念,信仰\n\ncontribute  v.贡献\n\ncontribute to ..促进 有助于\n\ncontribution   贡献\n\ncomplain  v.抱怨,投诉  n.complaint n.抱怨 ,投诉\n\ncompete 完成   adj.完全的  competely 完全地\n\nconcern 关系,担心  fear  害怕  scar  伤疤\n\nconfidence n.自信   consequence n. 结果,后果  As a result  /consequence\n\nconsequently adv. 因此,结果是\n\nconsume 消费 consumer 消费者   consumption 消费 n.\n\ncontact v. 联系\n\ncontinue v.继续  go  on  keep  stay 待着\n\nkeep calm =stay calm\n\n', '', 0, '', '', '', '12_18英语打卡', 0, 'english_12_!8', 41, 0, NULL, NULL, 'english_12_!8');
INSERT INTO `posts` VALUES (0, 11, '2019-12-19 23:25:19', 0, '2019-12-20 23:31:18', 0, 0, '2019-12-20 23:31:18', '<h1 id=\"2019个人总结\">2019个人总结</h1>\n<h2 id=\"个人感悟\">个人感悟</h2>\n<p>        回首整个2019,有收获也有失落,通过了驾驶证考试,但是每考过四级,参加的项目获得了学校的奖励,但自己是知识还是有所欠缺,自己的表述能力还有待提高,上线了我们的第一个项目，有了自己的服务器，<a href=\"http://m.qpic.cn/psb?/V11R9kwz03IvNc/.2FFlX5Akc6yyFKCrFmz.SYXJdrMSexbAdN5yTardPM!/b/dFIBAAAAAAAA&amp;bo=vAIaBLwCGgQRFyA!&amp;rf=viewer_4&amp;t=5\">自己的域名</a>,但还没备案，为我们团队在自己服务器上上线了<a href=\"http://111.229.114.126/\">博客</a>，但我们却没有独立的开发自己的系统，希望这次的酒店系统能成为我们的另一个成功，上学期绩点在前,但综测还是导致我没能获得奖学金,尽管参与学校工作获得很多帮助许多院和组织举办活动,体验了自己<a href=\"http://m.qpic.cn/psb?/V11R9kwz03IvNc/mrMDd0uu.pBDBGeCz0QG84ivNTWzCHaIQ6xoHzEya8w!/b/dL8AAAAAAAAA&amp;bo=wAMABcADAAURBzA!&amp;rf=viewer_4&amp;t=5\">名字被印上节目单的愿景</a>，以及自己的的名字出现在宣传册上,但自己却每能上场的机会,也算是一个遗憾了,但幕后工作也不错呀。希望在校四年，不仅是我在迎新生，送老生，也希望在我毕业之际，能带着不留遗憾的从这个我生活四年的学校从容的走出校门。\n附上各个院晚会\n<a href=\"http://m.qpic.cn/psb?/V11R9kwz03IvNc/sI3PGUGI.yFOGM656SKoOGb4dEdHvG4HBx5zc3I2eEo!/b/dL8AAAAAAAAA&amp;bo=AAXAAwAAAAARB*Y!&amp;rf=viewer_4\">信工院迎新晚会</a>\n<a href=\"http://m.qpic.cn/psc?/V11R9kwz03IvNc/Tiy10*PRF5enyWrLfdcKzxCF6kkN.0NE3XbUJWtMqAUVSBgin68T1QyoDc8wGABByWY3s.7mFrc9qG43lDKtdmHVndgXSjZcjvjZuonSdPI!/b&amp;bo=AAXAAwAAAAARF.Y!&amp;rf=viewer_4&amp;t=5\">文学院毕业晚会</a>\n<a href=\"http://m.qpic.cn/psb?/V11R9kwz03IvNc/ptXyvvdCHUW6z.debIvcqdq0fQ7MyXZIIpS7svPsJAQ!/b/dDYBAAAAAAAA&amp;bo=AAXAAwAAAAARF.Y!&amp;rf=viewer_4&amp;t=5\">国庆晚会</a></p>\n<h2 id=\"收获及不足\">收获及不足</h2>\n<p>        说到收获的话，除了最近双11中的<a href=\"http://m.qpic.cn/psc?/V11R9kwz03IvNc/Tiy10*PRF5enyWrLfdcKzwHQm6eCn2syrCbrDwS5Y6lpHJuV5thSd3mavvdkpVxhix0nDFJ044Fwlq5MmJXBtKLMgd8zr5TxYzCT8DVQUPc!/b&amp;bo=OASABwAAAAARB4s!&amp;rf=viewer_4&amp;t=5\">红包</a>，让我第一次参与到女生的快乐，花了最少的钱，买了过冬的的衣服，除此之外，今年3月也去了泰州，看了大片片的油菜花，在朋友家diy了一次烧烤,5月南京玩了一圈应该是收获挺大了，历史总会记住人们所遗忘的，包括那些人和事儿，爬了中山陵，瞻仰了民族英雄,伟大的孙中山先生,观赏过了老爸总在谍战剧里出现的总统府,看了<a href=\"http://m.qpic.cn/psb?/V11R9kwz03IvNc/w7B5dKh59svqQ3lrCNMlLbgJBzInPLjcy.CXQRkAY1U!/b/dL8AAAAAAAAA&amp;bo=wAMABcADAAURBzA!&amp;rf=viewer_4&amp;t=5\">夫子庙的灯会</a>-&gt;<a href=\"http://m.qpic.cn/psc?/V11R9kwz03IvNc/Tiy10*PRF5enyWrLfdcKzy9ablQcwxQ*H8xZdrTTmKGydcHthfTc8.Lq.VO6Jf02lk0*M4HwHmR71gFcRJe.ISMWfBoVasrWw4inpoMWcWI!/b&amp;bo=AAXAAwAFwAMRFyA!&amp;rf=viewer_4&amp;t=5\">补一张</a>,划了在<a href=\"http://m.qpic.cn/psc?/V11R9kwz03IvNc/Tiy10*PRF5enyWrLfdcKz52EgRFuxmfy3g93RvbeuMZBUMDT34RZldoO8W1SLwUJmFLrHirtxGgbMCj9*cOeGZc.QOXMIA76iXs1B.kC6XM!/b&amp;bo=AAXAAwAAAAARB*Y!&amp;rf=viewer_4&amp;t=5\">玄武湖的大黄鸭</a>,ps(虽然那天在下雨,但貌似是另一种体验诶),睡了人生第一次的帐篷,坐了第一次的绿皮火车。在如今信息如此发达的社会,真的感谢科技发展带来的便捷,火车票预定,门票扫码等等，那种以前都不敢想的不带钱出门，真的实现了。暑假在家的车祸，直接导致一个暑假蹲在家里，坚持早起的我每天种树还得了<a href=\"http://m.qpic.cn/psc?/V11R9kwz03IvNc/Tiy10*PRF5enyWrLfdcKz7qdYvE9z6PE4PMZc6ak556H1BzWNJEfhnTywEnA.paCui1BlLfGyHw4zFF6hQ9Te8by1fCkPOWN.KgTBfMfKbI!/b&amp;bo=AAWJAwAAAAARB78!&amp;rf=viewer_4&amp;t=5\">国家证书</a>,在庆幸保住小命的同时，真的深刻认识到速度的重要性，但也不全是坏事儿，至少我是在驾照考完的第一个周出事儿的。。。也有好的，暑假俩月对我的代码技术真的是有足够的提高，眼部受伤的我不能玩游戏，只能每天刷刷视频，看看网课，ps（我爱学习），这为我后来加入我们小组应该出了不少力。不足的话，英语真的是硬伤，高考150考69的我，虽然有一丝困难，但还是要有信心的嘛，毕竟当初自己挖的坑，也得自己填，一个人的能力，不仅仅取决于技术，更多的是表现，自认为表述能力确实不行，不能很好的表达一个问题的本质，往往述说不够完整，条理也不够清晰，这个问题应该得好好改善了。</p>\n<h2 id=\"规划及期望\">规划及期望</h2>\n<p>        说到规划嘛，本来计划今年过四级的愿望估计是破灭了，但是上半年才开始学java 的我也摸索到一些门路，对计算机这个大家伙有了一定的了解。以及谈及未来工作方向和个人职业愿景也有了一定的方向，相比大一才入学的朦胧的我，在这一点上还是有所改善的，看着自己的谷歌搜藏夹越来越充实，哔哩哔哩观看时长越来越多，在大一的同学问及资料和解决办法的时能很快的帮他们解决，能较为正确的引导他们解决问题的方向。单从这方面来说，自我感觉还是挺不错的。在暑假的计划是今年能写一个ssm项目就算对自己的一种肯定了，但现在看来，真的远远不够，后面的docker，微服务，消息中间件MQ，高并发，以我目前的水平，远远不够，附上一条<a href=\"https://www.processon.com/mindmap/5dc9416ce4b0bd68d8114a5f\">路线图</a>，以及<a href=\"http://www.atguigu.com/kecheng.shtml#course_a\">技术图</a>，希望来年能有所提高，对目前主流知识框架都能有个很好的把握，尽最大努力去实现我们项目，从中锻炼自己。</p>\n<ol>\n<li>\n<p>学习掌握 dobbo，springboot，spring cloud，activeMQ等技术</p>\n</li>\n<li>\n<p>学会阅读文献和提升自己的表述能力，逻辑组织力</p>\n</li>\n<li>\n<p>对一个项目产生的整体流程熟悉并理解原理过程</p>\n</li>\n<li>\n<p>关于英语的积累，学习，产生兴趣</p>\n<pre><code> 			-&gt;来自iszychen\n</code></pre>\n</li>\n</ol>\n', 0, '# 2019个人总结\n\n## 个人感悟\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;回首整个2019,有收获也有失落,通过了驾驶证考试,但是每考过四级,参加的项目获得了学校的奖励,但自己是知识还是有所欠缺,自己的表述能力还有待提高,上线了我们的第一个项目，有了自己的服务器，[自己的域名](http://m.qpic.cn/psb?/V11R9kwz03IvNc/.2FFlX5Akc6yyFKCrFmz.SYXJdrMSexbAdN5yTardPM!/b/dFIBAAAAAAAA&bo=vAIaBLwCGgQRFyA!&rf=viewer_4&t=5),但还没备案，为我们团队在自己服务器上上线了[博客](http://111.229.114.126/)，但我们却没有独立的开发自己的系统，希望这次的酒店系统能成为我们的另一个成功，上学期绩点在前,但综测还是导致我没能获得奖学金,尽管参与学校工作获得很多帮助许多院和组织举办活动,体验了自己[名字被印上节目单的愿景](http://m.qpic.cn/psb?/V11R9kwz03IvNc/mrMDd0uu.pBDBGeCz0QG84ivNTWzCHaIQ6xoHzEya8w!/b/dL8AAAAAAAAA&bo=wAMABcADAAURBzA!&rf=viewer_4&t=5)，以及自己的的名字出现在宣传册上,但自己却每能上场的机会,也算是一个遗憾了,但幕后工作也不错呀。希望在校四年，不仅是我在迎新生，送老生，也希望在我毕业之际，能带着不留遗憾的从这个我生活四年的学校从容的走出校门。\n附上各个院晚会\n[信工院迎新晚会](http://m.qpic.cn/psb?/V11R9kwz03IvNc/sI3PGUGI.yFOGM656SKoOGb4dEdHvG4HBx5zc3I2eEo!/b/dL8AAAAAAAAA&bo=AAXAAwAAAAARB*Y!&rf=viewer_4)\n[文学院毕业晚会](http://m.qpic.cn/psc?/V11R9kwz03IvNc/Tiy10*PRF5enyWrLfdcKzxCF6kkN.0NE3XbUJWtMqAUVSBgin68T1QyoDc8wGABByWY3s.7mFrc9qG43lDKtdmHVndgXSjZcjvjZuonSdPI!/b&bo=AAXAAwAAAAARF.Y!&rf=viewer_4&t=5)\n[国庆晚会](http://m.qpic.cn/psb?/V11R9kwz03IvNc/ptXyvvdCHUW6z.debIvcqdq0fQ7MyXZIIpS7svPsJAQ!/b/dDYBAAAAAAAA&bo=AAXAAwAAAAARF.Y!&rf=viewer_4&t=5)\n## 收获及不足\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;说到收获的话，除了最近双11中的[红包](http://m.qpic.cn/psc?/V11R9kwz03IvNc/Tiy10*PRF5enyWrLfdcKzwHQm6eCn2syrCbrDwS5Y6lpHJuV5thSd3mavvdkpVxhix0nDFJ044Fwlq5MmJXBtKLMgd8zr5TxYzCT8DVQUPc!/b&bo=OASABwAAAAARB4s!&rf=viewer_4&t=5)，让我第一次参与到女生的快乐，花了最少的钱，买了过冬的的衣服，除此之外，今年3月也去了泰州，看了大片片的油菜花，在朋友家diy了一次烧烤,5月南京玩了一圈应该是收获挺大了，历史总会记住人们所遗忘的，包括那些人和事儿，爬了中山陵，瞻仰了民族英雄,伟大的孙中山先生,观赏过了老爸总在谍战剧里出现的总统府,看了[夫子庙的灯会](http://m.qpic.cn/psb?/V11R9kwz03IvNc/w7B5dKh59svqQ3lrCNMlLbgJBzInPLjcy.CXQRkAY1U!/b/dL8AAAAAAAAA&bo=wAMABcADAAURBzA!&rf=viewer_4&t=5)->[补一张](http://m.qpic.cn/psc?/V11R9kwz03IvNc/Tiy10*PRF5enyWrLfdcKzy9ablQcwxQ*H8xZdrTTmKGydcHthfTc8.Lq.VO6Jf02lk0*M4HwHmR71gFcRJe.ISMWfBoVasrWw4inpoMWcWI!/b&bo=AAXAAwAFwAMRFyA!&rf=viewer_4&t=5),划了在[玄武湖的大黄鸭](http://m.qpic.cn/psc?/V11R9kwz03IvNc/Tiy10*PRF5enyWrLfdcKz52EgRFuxmfy3g93RvbeuMZBUMDT34RZldoO8W1SLwUJmFLrHirtxGgbMCj9*cOeGZc.QOXMIA76iXs1B.kC6XM!/b&bo=AAXAAwAAAAARB*Y!&rf=viewer_4&t=5),ps(虽然那天在下雨,但貌似是另一种体验诶),睡了人生第一次的帐篷,坐了第一次的绿皮火车。在如今信息如此发达的社会,真的感谢科技发展带来的便捷,火车票预定,门票扫码等等，那种以前都不敢想的不带钱出门，真的实现了。暑假在家的车祸，直接导致一个暑假蹲在家里，坚持早起的我每天种树还得了[国家证书](http://m.qpic.cn/psc?/V11R9kwz03IvNc/Tiy10*PRF5enyWrLfdcKz7qdYvE9z6PE4PMZc6ak556H1BzWNJEfhnTywEnA.paCui1BlLfGyHw4zFF6hQ9Te8by1fCkPOWN.KgTBfMfKbI!/b&bo=AAWJAwAAAAARB78!&rf=viewer_4&t=5),在庆幸保住小命的同时，真的深刻认识到速度的重要性，但也不全是坏事儿，至少我是在驾照考完的第一个周出事儿的。。。也有好的，暑假俩月对我的代码技术真的是有足够的提高，眼部受伤的我不能玩游戏，只能每天刷刷视频，看看网课，ps（我爱学习），这为我后来加入我们小组应该出了不少力。不足的话，英语真的是硬伤，高考150考69的我，虽然有一丝困难，但还是要有信心的嘛，毕竟当初自己挖的坑，也得自己填，一个人的能力，不仅仅取决于技术，更多的是表现，自认为表述能力确实不行，不能很好的表达一个问题的本质，往往述说不够完整，条理也不够清晰，这个问题应该得好好改善了。\n\n## 规划及期望\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;说到规划嘛，本来计划今年过四级的愿望估计是破灭了，但是上半年才开始学java 的我也摸索到一些门路，对计算机这个大家伙有了一定的了解。以及谈及未来工作方向和个人职业愿景也有了一定的方向，相比大一才入学的朦胧的我，在这一点上还是有所改善的，看着自己的谷歌搜藏夹越来越充实，哔哩哔哩观看时长越来越多，在大一的同学问及资料和解决办法的时能很快的帮他们解决，能较为正确的引导他们解决问题的方向。单从这方面来说，自我感觉还是挺不错的。在暑假的计划是今年能写一个ssm项目就算对自己的一种肯定了，但现在看来，真的远远不够，后面的docker，微服务，消息中间件MQ，高并发，以我目前的水平，远远不够，附上一条[路线图](https://www.processon.com/mindmap/5dc9416ce4b0bd68d8114a5f)，以及[技术图](http://www.atguigu.com/kecheng.shtml#course_a)，希望来年能有所提高，对目前主流知识框架都能有个很好的把握，尽最大努力去实现我们项目，从中锻炼自己。\n1. 学习掌握 dobbo，springboot，spring cloud，activeMQ等技术\n2. 学会阅读文献和提升自己的表述能力，逻辑组织力\n3. 对一个项目产生的整体流程熟悉并理解原理过程\n4. 关于英语的积累，学习，产生兴趣\n\n\n\n					->来自iszychen\n', '', 0, '', '', 'http://111.229.114.126/upload/2019/12/panda-99b045e335e64ca6a15c009f3b4de066.JPG', '2019再见,2020你好', 0, '2019年度个人总结', 52, 0, NULL, NULL, '2019年度个人总结');
INSERT INTO `posts` VALUES (0, 12, '2019-12-20 13:04:20', 0, '2019-12-23 17:43:57', 0, 0, '2019-12-23 17:43:57', '<p>increase  v. n. 增加</p>\n<p>increasingly 越来越 + important /handsome</p>\n<p>add. 增加 补充说   addition n.增加,补充</p>\n<p>in addition 此外,递进关系  in addition to  ...  除了. ..之外</p>\n<p>raise  v. 提高,增加  ; 抚养  raise your  English/children</p>\n<p>饲养  pet ; dog 筹集 raise money</p>\n<p>rise vi. 上升,升起 the  sun rises  n.上升</p>\n<p>decrease  v. n. 下降 减少  de-down</p>\n<p>devalue  v.贬值 decline v. n.下线,衰退  v.婉拒</p>\n<p>reject v. 拒绝</p>\n<p>drop v.下降   sink 下沉</p>\n<p>decide  v.决定  n,decision 决定你  make a decision   -cide 切  de-dowm 强调, 负面的,不好的</p>\n<p>decisive  决定性的  moment  果断的  indecisive  不果断的</p>\n<p>drawing  画   draw  v. 拉 画    paint v.绘画  painting  绘画</p>\n<p>Chinese painting 国画</p>\n<p>line 线条</p>\n<p>decorate   v.装饰  decoration n.装饰</p>\n<p>demand 要求</p>\n<p>require 要求 ask 要求</p>\n<p>depend  on/upon   依赖,依靠</p>\n<p>rest  休息  rest on/upon 依赖依靠</p>\n<p>press v. 压,按  pressure 压力</p>\n<p>depress  v.使压抑  使抑郁 使萧条</p>\n<p>depression  n.压抑 抑郁 萧条</p>\n<p>the  great depression  1929-1933</p>\n<p>depressed 萧条的</p>\n<p>derive  from... 源自于   =come  from... originate  from...</p>\n<p>origin n.起源 来源  original  最初的,原创的</p>\n<p>river 小河</p>\n<p>design  设计 designer 设计师  pattern  模式,花纹,图案,结构  social pattern 社会结构</p>\n<p>detail n.细节 v.详细说</p>\n<p>expand  往外膨胀,扩展 扩张 ,expansion  n.</p>\n<p>example 例如  instance   for  example  =for  instance</p>\n<p>exhaust  v.使筋疲力尽 耗尽  exhausted  筋疲力尽的</p>\n<p>expect 往外看 v.期望  unexpected  没有料到的</p>\n<p>wait  等待v.  expectation  n.期望</p>\n<p>expanse n.成本,费用 cost</p>\n<p>at the  cost of ...=at the expense of.... 以..为代价</p>\n<p>expensive  昂贵的   cheap  便宜的  luxurious  奢华的 奢侈的</p>\n<p>experience  经历,经验 n.v.   experiment  n. 实验</p>\n<p>explore v.探索  press  压.按压</p>\n<p>express   v.表达 表现</p>\n<p>expression  n. 表达,表现  expressive  有表现力的</p>\n<p>express n. 快车,快递  adj 快的,特快的  sf express</p>\n<p>implication  n.含义,意义  imply  v. 暗示=indicate =suggest 暗示</p>\n<p>argue  认为,声称,争论</p>\n<p>saying =proverb 名言谚语</p>\n<p>just as an old saying gose:</p>\n<p>carry v.携带,运载</p>\n<p>cart 小车</p>\n<p>bring  带 in</p>\n<p>stress =pressure  压力  n.   n./v.  强调,重视</p>\n<p>extra  额外的  extraordinarily   非比寻常的  ordinary  普通的,寻常的  order  顺序,秩序</p>\n', 0, 'increase  v. n. 增加\n\nincreasingly 越来越 + important /handsome\n\nadd. 增加 补充说   addition n.增加,补充\n\nin addition 此外,递进关系  in addition to  ...  除了. ..之外\n\nraise  v. 提高,增加  ; 抚养  raise your  English/children \n\n饲养  pet ; dog 筹集 raise money\n\nrise vi. 上升,升起 the  sun rises  n.上升\n\ndecrease  v. n. 下降 减少  de-down\n\ndevalue  v.贬值 decline v. n.下线,衰退  v.婉拒\n\nreject v. 拒绝 \n\ndrop v.下降   sink 下沉\n\ndecide  v.决定  n,decision 决定你  make a decision   -cide 切  de-dowm 强调, 负面的,不好的 \n\ndecisive  决定性的  moment  果断的  indecisive  不果断的 \n\ndrawing  画   draw  v. 拉 画    paint v.绘画  painting  绘画\n\nChinese painting 国画\n\nline 线条\n\ndecorate   v.装饰  decoration n.装饰 \n\ndemand 要求 \n\nrequire 要求 ask 要求\n\ndepend  on/upon   依赖,依靠\n\nrest  休息  rest on/upon 依赖依靠\n\npress v. 压,按  pressure 压力\n\ndepress  v.使压抑  使抑郁 使萧条\n\ndepression  n.压抑 抑郁 萧条\n\nthe  great depression  1929-1933\n\ndepressed 萧条的\n\nderive  from... 源自于   =come  from... originate  from...  \n\norigin n.起源 来源  original  最初的,原创的\n\nriver 小河\n\ndesign  设计 designer 设计师  pattern  模式,花纹,图案,结构  social pattern 社会结构\n\ndetail n.细节 v.详细说\n\nexpand  往外膨胀,扩展 扩张 ,expansion  n.\n\nexample 例如  instance   for  example  =for  instance\n\nexhaust  v.使筋疲力尽 耗尽  exhausted  筋疲力尽的\n\nexpect 往外看 v.期望  unexpected  没有料到的\n\nwait  等待v.  expectation  n.期望\n\nexpanse n.成本,费用 cost\n\nat the  cost of ...=at the expense of.... 以..为代价\n\nexpensive  昂贵的   cheap  便宜的  luxurious  奢华的 奢侈的\n\nexperience  经历,经验 n.v.   experiment  n. 实验\n\nexplore v.探索  press  压.按压\n\nexpress   v.表达 表现\n\nexpression  n. 表达,表现  expressive  有表现力的\n\nexpress n. 快车,快递  adj 快的,特快的  sf express\n\nimplication  n.含义,意义  imply  v. 暗示=indicate =suggest 暗示\n\nargue  认为,声称,争论\n\nsaying =proverb 名言谚语\n\njust as an old saying gose:\n\ncarry v.携带,运载\n\ncart 小车\n\nbring  带 in\n\nstress =pressure  压力  n.   n./v.  强调,重视\n\nextra  额外的  extraordinarily   非比寻常的  ordinary  普通的,寻常的  order  顺序,秩序\n\n', '', 0, '', '', '', '12_20英语打卡', 0, 'english_12_20', 41, 0, NULL, NULL, 'english_12_20');
INSERT INTO `posts` VALUES (0, 13, '2019-12-23 12:27:39', 0, '2019-12-23 17:43:42', 0, 0, '2019-12-23 17:43:42', '<ul>\n<li>==谓:谓语定句子==</li>\n<li>==干:主干,主谓宾==</li>\n<li>==肉:血肉的地得==</li>\n</ul>\n<ol>\n<li>\n<p>功夫是中国武术的<strong>俗称</strong></p>\n<p>Kung Fu is the **common name ** of Chinese martial arts.</p>\n</li>\n<li>\n<p>中国武术的起源可以追溯到自卫的需要.狩猎活动以及古代的军事训练</p>\n<p>谓：追溯到  go back to</p>\n<p>干：起源--beginning 追溯到需要符猎及训练</p>\n<p>肉：中国武术、自卫、self - defense 古代的、ancient 军事的 military</p>\n<p>The beginning of <strong>Chinese martial arts</strong> can go back  to the needs of self-defense,hunting</p>\n<p>and ancient Chinese military training.</p>\n</li>\n<li>\n<p>它是中国传统体育运动的一种，年轻人和老年人都练。</p>\n<p>加顺</p>\n<p>谓：是，练</p>\n<p>干：它是体育运动，年轻人和老年人练人</p>\n<p>肉：传统的，一种。都</p>\n<p>Tt is <strong>one kind of</strong> the Chinese traditional sports and both <strong>the young and the old</strong> practice it.</p>\n<p>the + adj. 一类人  the  rich  the poor</p>\n</li>\n<li>\n<p>它已逐渐演变成了中国文化的独特元素。</p>\n<p>谓:   演变</p>\n<p>干：它演变成元素</p>\n<p>肉:   逐渐、中国文化、独特的</p>\n<p>have /has  done    had done</p>\n<p>It has gradually become a special element of Chinese culture.</p>\n</li>\n<li>\n<p>作为中国的国宝，功夫有==上百种不同的风倍==，是世界上练得最多的武术形式。</p>\n<p>谓：有，是</p>\n<p>干：功夫有风格，（功夫）是形式(form)</p>\n<p>肉：作为、中国的、国宝、上百种、不同的、世界上、练得最多的、武术</p>\n<p>As a <strong>national treasure</strong> of China ,Kung Fu is the most practiced form of <strong>martial arts</strong> and has ==hundreds  of different types.==</p>\n</li>\n<li>\n<p>有些风格模仿了动物的<strong>动作</strong>，还有一些则受到了<strong>中国==哲学思想 philosophic thinking==、神话  myths 和传说 legends 的启发。</strong></p>\n<p>谓：模仿，（受）启发</p>\n<p>干：风格模仿动作，（风格）（受）启发</p>\n<p>肉：有些、动物、还有一些、中国哲学思想、杰神话、传说</p>\n<p>Some  of the style copy the animals\' <strong>movements</strong>, and others are <strong>inspired by Chinese  philosophies , myths and legends.</strong></p>\n</li>\n</ol>\n', 0, '- ==谓:谓语定句子==\n- ==干:主干,主谓宾==\n- ==肉:血肉的地得==\n\n1. 功夫是中国武术的**俗称**\n\n   Kung Fu is the **common name ** of Chinese martial arts.\n\n2. 中国武术的起源可以追溯到自卫的需要.狩猎活动以及古代的军事训练\n\n   谓：追溯到  go back to \n\n   干：起源--beginning 追溯到需要符猎及训练 \n\n   肉：中国武术、自卫、self - defense 古代的、ancient 军事的 military \n\n   The beginning of **Chinese martial arts** can go back  to the needs of self-defense,hunting\n\n   and ancient Chinese military training.\n\n3. 它是中国传统体育运动的一种，年轻人和老年人都练。\n\n   加顺\n\n   谓：是，练\n\n   干：它是体育运动，年轻人和老年人练人\n\n   肉：传统的，一种。都\n\n   Tt is **one kind of** the Chinese traditional sports and both **the young and the old** practice it.\n\n   the + adj. 一类人  the  rich  the poor\n\n4. 它已逐渐演变成了中国文化的独特元素。\n\n   谓:   演变\n\n   干：它演变成元素\n\n   肉:   逐渐、中国文化、独特的\n\n   have /has  done    had done\n\n   It has gradually become a special element of Chinese culture.\n\n5. 作为中国的国宝，功夫有==上百种不同的风倍==，是世界上练得最多的武术形式。\n\n   谓：有，是\n\n   干：功夫有风格，（功夫）是形式(form)\n\n   肉：作为、中国的、国宝、上百种、不同的、世界上、练得最多的、武术\n\n   As a **national treasure** of China ,Kung Fu is the most practiced form of **martial arts** and has ==hundreds  of different types.==\n\n6. 有些风格模仿了动物的**动作**，还有一些则受到了**中国==哲学思想 philosophic thinking==、神话  myths 和传说 legends 的启发。**\n\n   谓：模仿，（受）启发\n\n   干：风格模仿动作，（风格）（受）启发\n\n   肉：有些、动物、还有一些、中国哲学思想、杰神话、传说\n\n   Some  of the style copy the animals\' **movements**, and others are **inspired by Chinese  philosophies , myths and legends.**\n\n', '', 0, '', '', 'http://111.229.114.126/upload/2019/12/panda-99b045e335e64ca6a15c009f3b4de066.JPG', '12_23英语打卡', 0, 'english_12_23', 24, 0, NULL, NULL, 'english_12_23');
INSERT INTO `posts` VALUES (0, 14, '2019-12-23 17:53:31', 0, '2020-02-06 15:47:34', 0, 0, '2020-02-06 15:47:34', '<p>开发环境：IntelliJ IDEA</p>\n<p>开发SSM应用的时候，编写xml配置mapper.xml文件没有代码提示，这个问题应该是编写的xml文件中没有找到需要的dtd文件。</p>\n<p>在xml文件中的引入约束的标签如下：</p>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\" >\n<p>解决办法：</p>\n<p>1、浏览器访问上面引入的dtd文件地址如：<a href=\"http://mybatis.org/dtd/mybatis-3-mapper.dtd，下载对应的dtd文件，保存到本地目录如：E:\\idea_workspace\\dtdSchemas；\">http://mybatis.org/dtd/mybatis-3-mapper.dtd，下载对应的dtd文件，保存到本地目录如：E:\\idea_workspace\\dtdSchemas；</a></p>\n<p>2、在IntelliJ IDEA项目中点击File-&gt;Settings-&gt;Langulages&amp;FrameWorks-&gt;Schemas and DTDs ，将下载的dtd约束配置到项目中，具体如下图：\n<img src=\"https://img-blog.csdnimg.cn/20190819155202927.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDEzNDMzOA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n', 0, '\n开发环境：IntelliJ IDEA\n\n开发SSM应用的时候，编写xml配置mapper.xml文件没有代码提示，这个问题应该是编写的xml文件中没有找到需要的dtd文件。\n\n在xml文件中的引入约束的标签如下：\n\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\" >\n解决办法：\n\n1、浏览器访问上面引入的dtd文件地址如：http://mybatis.org/dtd/mybatis-3-mapper.dtd，下载对应的dtd文件，保存到本地目录如：E:\\idea_workspace\\dtdSchemas；\n\n2、在IntelliJ IDEA项目中点击File->Settings->Langulages&FrameWorks->Schemas and DTDs ，将下载的dtd约束配置到项目中，具体如下图：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190819155202927.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDEzNDMzOA==,size_16,color_FFFFFF,t_70)', '', 0, '', '', 'http://111.229.114.126/upload/2020/2/u=3795141063,2338690031&fm=26&gp=0-b7e737f80a7a488b9b5ae5e362d6fd59.jpg', 'idea配置mybatisxml提示', 0, 'mybatistip', 31, 0, NULL, NULL, 'mybatistip');
INSERT INTO `posts` VALUES (0, 15, '2019-12-24 21:32:34', 0, '2019-12-25 20:24:04', 0, 0, '2019-12-25 20:24:04', '<ol>\n<li>\n<p>中国父母往往过于关注孩子的学习,以至于不要求他们帮忙做家务.</p>\n<ul>\n<li>谓:<strong>过于关注.pay so much attention to..</strong>.要求  require</li>\n<li>干:父母关注学习.(父母)不要他们帮忙</li>\n<li>肉:往往,过于,以至于 so....that...,做家务 do housework</li>\n</ul>\n<p>help sb. do sth.  帮助某人做某事.</p>\n<p>Chinese parents tend to pay so much attention to their children’s study that they don’t require their children to help them do housework.</p>\n</li>\n<li>\n<p>他们对孩子的首要要求就是努力学习，考得好，能上名牌大学。</p>\n<ul>\n<li>谓：是，学习，考，上</li>\n<li>干：要求是学习，考，上大学</li>\n<li>肉：对孩子的、首要的、努力地、得好、名牌的</li>\n</ul>\n<p>Their <strong>primary requirement</strong> for their children is to work hard, <strong>get good grades</strong> and <strong>attend a prestigious ==(famous)== university.</strong></p>\n<p>==be + to do  非谓语,表将来   do good to sb.  为...好==</p>\n</li>\n<li>\n<p>他们相信这是为孩子好，因为在中国这样<strong>竞争激烈的社会里</strong>，只有成绩好才能保证前途光明.</p>\n<ul>\n<li>谓：相信，保证</li>\n<li>干：他们相信这是为孩子好，成绩保证前途</li>\n<li>肉：因为、竞争、激烈的、社会、好的、光明的</li>\n</ul>\n<p>They believe that this does good to their children because in  such <strong>highly competitive society ,</strong> only good grades can ensure a promising future.</p>\n<p>They believe that this does good  to their children because in such highly competitive society ,only good grades can ensure a promising future.</p>\n</li>\n<li>\n<p>中国父母还认为，如果孩子能在社会上取得大的成就，父母就会<strong>受到尊敬</strong>。</p>\n<ul>\n<li>谓：认为，受到尊敬</li>\n<li>干：父母认为，父母<em>受到尊敬 respect</em>  accordingly</li>\n<li>肉：如果、**在社会上、取得成就 make great achievements in society、**就:==用副词修饰==</li>\n</ul>\n<p>They also think that if their children can make great achievements in society,they</p>\n<p>will be <strong>respected accordingly.</strong></p>\n<p>==adv. -&gt; v. adj . 句子    will  be 一般将来时==</p>\n</li>\n<li>\n<p>因此，他们愿意<strong>牺牲自己的时间</strong>、<strong>爱好和兴趣</strong>，为孩子提供更好的<em>条件</em>。</p>\n<ul>\n<li>谓：牺牲，/提供）</li>\n<li>干：他们牺牲时间、爱好和兴趣，（他们）提供条件</li>\n<li>肉：因此、愿意、自己的、为孩子、更好的</li>\n</ul>\n<p>Therefore , they are willing to <strong>sacrifice their own time</strong> ,<strong>hobbies</strong> and <strong>interests</strong> to offer their children a better <em>condition</em>.</p>\n</li>\n</ol>\n', 0, '1. 中国父母往往过于关注孩子的学习,以至于不要求他们帮忙做家务.\n\n   - 谓:**过于关注.pay so much attention to..**.要求  require \n   - 干:父母关注学习.(父母)不要他们帮忙\n   - 肉:往往,过于,以至于 so....that...,做家务 do housework\n\n   help sb. do sth.  帮助某人做某事.\n\n   Chinese parents tend to pay so much attention to their children’s study that they don’t require their children to help them do housework.\n\n2. 他们对孩子的首要要求就是努力学习，考得好，能上名牌大学。\n\n   - 谓：是，学习，考，上\n   - 干：要求是学习，考，上大学\n   - 肉：对孩子的、首要的、努力地、得好、名牌的\n\n   Their **primary requirement** for their children is to work hard, **get good grades** and **attend a prestigious ==(famous)== university.**\n\n   ==be + to do  非谓语,表将来   do good to sb.  为...好== \n\n3. 他们相信这是为孩子好，因为在中国这样**竞争激烈的社会里**，只有成绩好才能保证前途光明.\n\n   - 谓：相信，保证\n   - 干：他们相信这是为孩子好，成绩保证前途\n   - 肉：因为、竞争、激烈的、社会、好的、光明的\n\n   They believe that this does good to their children because in  such **highly competitive society ,** only good grades can ensure a promising future.\n\n   They believe that this does good  to their children because in such highly competitive society ,only good grades can ensure a promising future.\n\n4. 中国父母还认为，如果孩子能在社会上取得大的成就，父母就会**受到尊敬**。\n\n   - 谓：认为，受到尊敬\n   - 干：父母认为，父母*受到尊敬 respect*  accordingly\n   - 肉：如果、**在社会上、取得成就 make great achievements in society、**就:==用副词修饰==\n\n   They also think that if their children can make great achievements in society,they\n\n   will be **respected accordingly.**\n\n   ==adv. -> v. adj . 句子    will  be 一般将来时== \n\n5. 因此，他们愿意**牺牲自己的时间**、**爱好和兴趣**，为孩子提供更好的*条件*。\n\n   - 谓：牺牲，/提供）\n   - 干：他们牺牲时间、爱好和兴趣，（他们）提供条件\n   - 肉：因此、愿意、自己的、为孩子、更好的\n\n   Therefore , they are willing to **sacrifice their own time** ,**hobbies** and **interests** to offer their children a better *condition*.', '', 0, '', '', 'http://111.229.114.126/upload/2019/12/panda-99b045e335e64ca6a15c009f3b4de066.JPG', '英语打卡12_24', 0, 'english_12_24', 28, 0, NULL, NULL, 'english_12_24');
INSERT INTO `posts` VALUES (0, 16, '2019-12-25 20:24:44', 0, '2019-12-25 20:24:44', 0, 0, '2019-12-25 20:24:44', '<pre><code>there be  句型  客观存在,找不到主语的时候\n</code></pre>\n<ol>\n<li>\n<p>大熊猫（giant panda）是一种<strong>温顺的动物</strong>，长着<strong>独特的</strong>黑白<strong>皮毛。</strong></p>\n<ul>\n<li>谓：是</li>\n<li>干：大熊猫是动物</li>\n<li>肉：温顺的、长着、独特的、黑色（和）白色的、皮毛</li>\n</ul>\n<p>The giant panda is a kind of  <strong>docile animal</strong> with <strong>unique</strong> black and white <strong>fur</strong>.</p>\n</li>\n<li>\n<p>因其数量极少，大熊猫<strong>已被列为</strong>==濒危物种.==</p>\n<ul>\n<li>谓：列</li>\n<li>干：大熊猫被列为物种）</li>\n<li>肉：因（为）、数量，极少的、已、濒危的</li>\n</ul>\n<p>It <strong>has bean listed</strong> as an ==endangered species== because of its <strong>rarity</strong>.</p>\n<p>It has bean listed as an endangered species because of its rarity.</p>\n</li>\n<li>\n<p>The giant panda has special <strong>significance 意义</strong> for WWF.</p>\n</li>\n<li>\n<p>精准到一天用on   某一年之类的用in</p>\n</li>\n<li>\n<p>The  giant panda has bean WWF\'s logo since its establishment in 1961.</p>\n</li>\n<li>\n<p>since  in +时间 ...  自...时间以来</p>\n</li>\n<li>\n<p>establishment  建立 n.   v. establish</p>\n</li>\n<li>\n<p>endangered species 濒危物种</p>\n</li>\n<li>\n<p>unique  特别的</p>\n</li>\n<li>\n<p>docile 温顺的  animal</p>\n</li>\n<li>\n<p>fur 皮毛</p>\n</li>\n<li>\n<p>The  giant panda is the rarest in the bear family ,mainly living in the forests of the southwest China.</p>\n</li>\n<li>\n<p>southwest  西南部</p>\n</li>\n<li>\n<p>in the bear family  熊科</p>\n</li>\n<li>\n<p>rarest  罕见的</p>\n</li>\n<li>\n<p>At present , there are about 1,000 giant panda in the word.</p>\n</li>\n<li>\n<p>at present 目前</p>\n</li>\n<li>\n<p>数字:  hundred  thousand million:百万  billion</p>\n</li>\n<li>\n<p>123  one hundred and twenty three</p>\n</li>\n<li>\n<p>123,123 one hundred and twenty three hundred and one hundred and twenty three</p>\n</li>\n<li>\n<p>百分比 president</p>\n</li>\n<li>\n<p>There bamboo-eating animals are facing many threats</p>\n</li>\n<li>\n<p>threats 威胁</p>\n</li>\n<li>\n<p>bamboo-eating 以竹为食</p>\n</li>\n<li>\n<p>facing  v. n. 面对 面临</p>\n</li>\n<li>\n<p>Therefore , it has become more important to ensure the survival of giant panda then before.</p>\n</li>\n<li>\n<p>survival 生存</p>\n</li>\n<li>\n<p>more .....  then before 比以往</p>\n</li>\n<li>\n<p>more important 更重要</p>\n</li>\n<li>\n<p>ensure 确保</p>\n</li>\n</ol>\n', 0, '	there be  句型  客观存在,找不到主语的时候\n\n1. 大熊猫（giant panda）是一种**温顺的动物**，长着**独特的**黑白**皮毛。**\n\n   - 谓：是\n   - 干：大熊猫是动物\n   - 肉：温顺的、长着、独特的、黑色（和）白色的、皮毛\n\n   The giant panda is a kind of  **docile animal** with **unique** black and white **fur**.\n\n2. 因其数量极少，大熊猫**已被列为**==濒危物种.==\n\n   - 谓：列\n   - 干：大熊猫被列为物种）\n   - 肉：因（为）、数量，极少的、已、濒危的\n\n   It **has bean listed** as an ==endangered species== because of its **rarity**.\n\n   It has bean listed as an endangered species because of its rarity.\n\n3. The giant panda has special **significance 意义** for WWF.\n\n4. 精准到一天用on   某一年之类的用in\n\n5. The  giant panda has bean WWF\'s logo since its establishment in 1961.  \n\n6. since  in +时间 ...  自...时间以来\n\n7. establishment  建立 n.   v. establish \n\n8. endangered species 濒危物种\n\n9. unique  特别的\n\n10. docile 温顺的  animal\n\n11. fur 皮毛\n\n12. The  giant panda is the rarest in the bear family ,mainly living in the forests of the southwest China.\n\n13. southwest  西南部\n\n14.  in the bear family  熊科\n\n15. rarest  罕见的\n\n16. At present , there are about 1,000 giant panda in the word.\n\n17. at present 目前\n\n18. 数字:  hundred  thousand million:百万  billion\n\n19. 123  one hundred and twenty three \n\n20. 123,123 one hundred and twenty three hundred and one hundred and twenty three\n\n21. 百分比 president\n\n22. There bamboo-eating animals are facing many threats\n\n23. threats 威胁\n\n24. bamboo-eating 以竹为食\n\n25. facing  v. n. 面对 面临\n\n26. Therefore , it has become more important to ensure the survival of giant panda then before.\n\n27. survival 生存\n\n28. more .....  then before 比以往\n\n29. more important 更重要\n\n30. ensure 确保\n\n', '', 0, '', '', 'http://111.229.114.126/upload/2019/12/panda-99b045e335e64ca6a15c009f3b4de066.JPG', '英语打卡12_25', 0, 'english_12_25', 26, 0, NULL, NULL, 'english_12_25');
INSERT INTO `posts` VALUES (0, 17, '2019-12-26 20:59:23', 0, '2020-02-06 15:54:26', 0, 0, '2020-02-06 15:54:26', '<ol>\n<li>\n<p>路由交换方式:</p>\n<ul>\n<li>电路交换</li>\n<li>报文交换</li>\n<li>分组交换</li>\n</ul>\n</li>\n<li>\n<p><strong>一个字一个字节</strong></p>\n</li>\n<li>\n<p>速率指的是速度的传送速率 也成为数据率 单位bit/s 10的n次方, 空间大小一般为2的10*n次方</p>\n</li>\n<li>\n<p>协议三要素**:语义,语法,同步**</p>\n</li>\n<li>\n<p>TCP/IP的四层协议</p>\n<ul>\n<li>网络接口层,网际层IP,运输层TCP/UDP,应用层</li>\n</ul>\n</li>\n<li>\n<p>五层协议</p>\n<ul>\n<li>物理层\n<ul>\n<li>透明的传输比特流</li>\n</ul>\n</li>\n<li>数据链路层 主要设备-&gt;网桥+交换机\n<ul>\n<li>在相邻结点间负责数据帧的工作</li>\n</ul>\n</li>\n<li>网络层(路由器所在层)\n<ul>\n<li>分组转发,生成路由</li>\n</ul>\n</li>\n<li>运输层\n<ul>\n<li>TCP/UDP,进程通信,数据传输</li>\n</ul>\n</li>\n<li>应用层</li>\n</ul>\n</li>\n<li>\n<p>把对等层次之间传送的数据单位称为该层的协议数据单元PDU</p>\n</li>\n<li>\n<p>同一层协议-&gt;协议是控制两个对等实体(或多个实体)进行通信的规则的集合,在协议的控制下,两个对等实体的通信使得本层能够向上一次提供服务.要实现本层协议,还需要使用下面一层所提供的服务</p>\n</li>\n<li>\n<p>==协议对实体是透明的 协议是水平的  服务是垂直的==</p>\n</li>\n<li>\n<p>物理层的四个特性:</p>\n</li>\n</ol>\n<p><strong>机械特性</strong>:指接口所用的形状,尺寸,引脚数目和排列,固定和锁定装置等</p>\n<p><strong>电气特性</strong>:指明在接口电缆的各条线路出现的电压的范围</p>\n<p><strong>功能特性</strong>:指明某条线裤上出现某一电平的意义</p>\n<p><strong>过程特性</strong>:指明对于不同功能的各种可能事件的出现顺序.</p>\n<ol start=\"11\">\n<li>\n<p>单向通讯 又称<strong>单工通讯</strong>,即只能有一个方向的通讯而没有反方向的交互-无线广播</p>\n</li>\n<li>\n<p>双向交替通讯 <strong>半双工通讯</strong> 双方都可以发送信息 但不能同时发送信息</p>\n<p>双向同时通讯 <strong>全双工通讯</strong> 双方可以同时发送和接受信息</p>\n</li>\n<li>\n<p>基带调制</p>\n<ol>\n<li>\n<p>数字-&gt;数字</p>\n<p>eg.曼彻斯特编码</p>\n</li>\n</ol>\n</li>\n<li>\n<p>带通调制</p>\n<ul>\n<li>数字-&gt;模拟</li>\n<li>三种带通调制的方法\n<ul>\n<li>调频</li>\n<li>调幅</li>\n<li>调相</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>曼彻斯特编码-&gt;自带同步信号的编码</p>\n</li>\n<li>\n<p>光波在纤芯中的传播原理:==全反射==</p>\n</li>\n<li>\n<p>可以存在多条不同角度入射的光线在一条光纤中传输,称为<strong>多模光纤</strong></p>\n<p>若光纤的直径只有一个光的波长,则光纤一直向前传播,而不会产生多次反射,这样的光纤称为<strong>单模光纤</strong></p>\n</li>\n<li>\n<p>信道复用-&gt;&gt;提高信道的利用率</p>\n<ul>\n<li>频分复用:所有用户在<strong>同样时间</strong>占用<strong>不同的带宽</strong></li>\n<li>时分复用:所有用户在<strong>不同时间</strong>占用<strong>相同的带宽</strong></li>\n<li>统计时分复用(优化)</li>\n<li>波分复用</li>\n</ul>\n</li>\n<li>\n<ol>\n<li>\n<table>\n<thead>\n<tr><th align=\"center\">线路速率</th><th>SONET符号</th><th>ITU-T符号</th><th align=\"center\">相当的话路数(每个话路64kbit/s)</th></tr>\n</thead>\n<tbody>\n<tr><td align=\"center\">155.520</td><td>OC-3/STS-3</td><td>STM-1</td><td align=\"center\">2430</td></tr>\n<tr><td align=\"center\">622.080</td><td>OC-12/STS-12</td><td>STM-4</td><td align=\"center\">9720</td></tr>\n</tbody>\n</table>\n</li>\n</ol>\n</li>\n<li>\n<p>链路:从一个结点到相邻节点的一段物理线路,中间没有其他的交换结点</p>\n<p>数据链路:实现这些协议的软件和硬件加到链路上,就构成了数据链路</p>\n<p>数据链路协议的三个基本问题**.封装成帧,透明传输,差错检测,**</p>\n</li>\n<li>\n<p>循环冗余检验CRC  应用题p75页</p>\n</li>\n<li>\n<p>**7D 5E-&gt;7E **</p>\n</li>\n<li>\n<p><strong>7D 5D-&gt;7D</strong></p>\n</li>\n<li>\n<p>CDMA/CD -&gt;半双工通道</p>\n<ol>\n<li>载波监听-&gt;发送前发送中每个站都必须不停的检测信道</li>\n<li>多接入 -&gt;多点接入的方式连接在一根总线上</li>\n<li>碰撞检测 -&gt;边发送边监听</li>\n</ol>\n</li>\n<li>\n<p>==截断二进制指数退避算法==: <strong>对多不超过16次</strong> 最小帧长64,凡是长度小于64字节的帧都是由于<strong>冲突而异常中止的无效帧.</strong></p>\n</li>\n<li>\n<p>快速以太网用的MAC帧的格式仍然是<strong>IEEE802.3</strong>标准规定的帧格式</p>\n<ol>\n<li>\n<table>\n<thead>\n<tr><th> </th><th>6字节</th><th>6字节</th><th>2字节</th><th>46~1500字节</th><th>4字节</th></tr>\n</thead>\n<tbody>\n<tr><td>8字节</td><td>目的地址</td><td>源地址</td><td>类型</td><td>数据</td><td>(帧检验序列)FCS</td></tr>\n<tr><td> </td><td> </td><td> </td><td> </td><td> </td><td>CRC检验</td></tr>\n</tbody>\n</table>\n</li>\n</ol>\n</li>\n<li>\n<p>==A类地址0-127  B类128-192 C类192-255==</p>\n</li>\n<li>\n<p><strong>ARP自学习</strong>  生成地址映射表</p>\n</li>\n<li>\n<p>地址解析协议ARP ,IP地址映射MAC地址 ,<em>==响应分组为单播,请求分组为广播.==</em></p>\n</li>\n<li>\n<p>ARP地址解析协议解决同一个局域网上的主机或路由器的IP地址和硬件地址的映射问题</p>\n</li>\n<li>\n<p>IP数据报的格式<strong>p128</strong>,IP首部固定长度为20字节**,因此首部**长度最小值为5</p>\n</li>\n<li>\n<p>分组转发算法: <strong>特定主机路由-&gt;路由表-&gt;默认路由</strong></p>\n<ol>\n<li>从数据报的首部提取目的主机的IP地址D,得出目的网络的地址为N</li>\n<li>若**N就是于此路由器直接相连的某个网络地址,**则进行直接交付,不需要再经过其他路由器,直接把数据报交付目的主机(这里包括把目的主机地址D转换为具体的硬件地址,把数据报封装为MAC帧.再发送此);否则就是间接交,执行(3)</li>\n<li>若路由表中有**目的地址为D的特定主机路由,**则把数据报交给路由表中所指明的下一路由器,否则执行(4)</li>\n<li>若路由表中有<strong>到达网络N的路由</strong>,则把数据报传给路由表中指明的下一级路由.否则执行(5)</li>\n<li>若路由表中有<strong>一个默认路由</strong>,则把数据报送给路由表中所指明的默认路由器,否则执行(6)</li>\n<li>报告转发分组出错.</li>\n</ol>\n</li>\n<li>\n<p>子网掩码 A类 255.0.0.0 B类 255.255.0.0 C类 255.255.255.0 ==解答题p139 例4-2==</p>\n</li>\n<li>\n<p>聚合路由CIDR-&gt;</p>\n</li>\n<li>\n<table>\n<thead>\n<tr><th align=\"center\">CIDR长度</th><th align=\"center\">点分十进制</th><th align=\"center\">包含地址数</th><th align=\"center\">相当于包含分类的网络数</th></tr>\n</thead>\n<tbody>\n<tr><td align=\"center\">/18</td><td align=\"center\">255.255.192.0</td><td align=\"center\">16K</td><td align=\"center\">32个C类</td></tr>\n<tr><td align=\"center\">/20</td><td align=\"center\">255.255.240.0</td><td align=\"center\">4K</td><td align=\"center\">16个C类</td></tr>\n</tbody>\n</table>\n</li>\n<li>\n<p><strong>网络控制报文协议 ICMP</strong>  允许主机或路由器报告差错情况和提供有关异常情况报告</p>\n<ul>\n<li>PING  测试主机的连通性</li>\n<li>TRACERT  获得到目的主机的路由信息</li>\n</ul>\n</li>\n<li>\n<p><strong>内部网关协议RIP</strong> 是一种<strong>分布式的基于距离向量的路由选择协议</strong> <strong>适用于小型网络.路由个数小于15个</strong></p>\n</li>\n<li>\n<p>RIP 协议特点</p>\n<ul>\n<li><strong>仅和相邻路由器交换信息</strong>,(如果两个路由器之间的通信不需要经过另一个路由器,那么这两个路由器就是相邻的)</li>\n<li>路由器交换的信息是当前<strong>本路由器所知道的全部信息</strong>,即自己现在的<strong>路由表</strong></li>\n<li>按<strong>固定的时间间隔交换</strong>路由信息</li>\n</ul>\n</li>\n<li>\n<p>==距离向量算法== 目的网络+下一跳路由器:</p>\n<ul>\n<li>相同就更新</li>\n<li>不同就比跳数 选跳数小的,跳数相同就不变</li>\n</ul>\n</li>\n<li>\n<p><strong>内部网关协议OSPF,其主要特征是使用</strong>分布式的链路状态协议**,而不像RIP意义的距离向量协议</p>\n<ul>\n<li>本自治系统中所有路由器发送信息,使用<strong>洪泛法.</strong></li>\n<li>发送的信息就是与本路由器相邻的所有路由器的<strong>链路状态</strong>,但这只是路由器所知道的部分信息.</li>\n<li>只有当<strong>链路状态发送变化时</strong>,路由器才向所有路由器用洪泛法发送此信息</li>\n</ul>\n</li>\n<li>\n<p>自治系统AS之间的路由选择必须考虑有关策略</p>\n</li>\n<li>\n<p><strong>边界网关协议BGP</strong> 只能是力求寻找一条能够达到目的网络且比较好路由(不兜圈子),而并非寻找一条最佳路由,采用==路径向量路由选择协议==</p>\n</li>\n<li>\n<p>IPV6</p>\n<ul>\n<li>更大的地址空间 增加到128位</li>\n<li>扩展的地址层次结构</li>\n<li>灵活的首部格式</li>\n<li>首部长度固定 <strong>为40个字节</strong></li>\n<li>允许协议扩充</li>\n<li>支持资源预分配</li>\n</ul>\n</li>\n<li>\n<p>ipv6数据报的目的地址采用 <strong>单播,多播,任播</strong> 三种基本类型地址,没有广播,采用冒号十六进制记法-&gt;</p>\n<ul>\n<li>\n<p>零省略,允许把数字零的零省略</p>\n<p>eg.04=4</p>\n</li>\n<li>\n<p>零压缩,允许一连串连续的零可以为一对冒号所取代  <strong>零压缩只能用一次</strong></p>\n<p>eg.FF05:0:0:0:0:0:0:B3  可压缩为 FF05::B3</p>\n</li>\n</ul>\n</li>\n<li>\n<p>在完全过度到ipv6前 采用<strong>双协议栈</strong> 将ipv6的网络部署到ipv4上 对ipv6有所损失</p>\n</li>\n<li>\n<p><strong>RFC 1918指明专用地址</strong> <strong>在互联网中的所有路由器,对目的地址是专用地址的数据报一律不转发</strong>   内网使用专用网络地址部署</p>\n<ul>\n<li>10.0.0.0 到 10.255.255.255</li>\n<li>172.16.0.0到 172.31.255.255</li>\n<li>192.168.0.0 到 192.168.255.255</li>\n</ul>\n</li>\n<li>\n<p><strong>网络地址转换协议NAT</strong></p>\n</li>\n<li>\n<p>运输层重要功能 :</p>\n<ul>\n<li>复用 :指在发送方不同的应用进程都可以使用同一个运输协议传送数据</li>\n<li>分用  :指接收方的运输层在<strong>剥去报文首部后</strong>==都能==把这些数据正确交付目的的应用进程</li>\n</ul>\n</li>\n<li>\n<p>http两大协议</p>\n<ul>\n<li>面向<strong>连接的TCP</strong></li>\n<li><strong>无连接UDP</strong></li>\n</ul>\n</li>\n<li>\n<p><strong>网络层</strong>为主机之间提供<strong>逻辑通讯</strong>,而<strong>运输层</strong>为应用层提供端到端的<strong>逻辑通讯.</strong></p>\n</li>\n<li>\n<p>UDP概述</p>\n<ul>\n<li>UDP是无连接的</li>\n<li>使用<strong>最大努力交付,即不保证可靠交付</strong></li>\n<li>面向报文的</li>\n</ul>\n</li>\n<li>\n<p>常用端口</p>\n<ul>\n<li>==文件传输协议FTP 20/21==</li>\n<li>==STMP 25==</li>\n<li>==DNS 53==</li>\n<li>==TFTP 69==</li>\n<li>==HTTP 80==</li>\n<li>==SNMP 161==</li>\n<li>==HTTPS 443==</li>\n</ul>\n</li>\n<li>\n<p>TCP首部格式p227</p>\n</li>\n<li>\n<p>TCP连接的端点叫<strong>套接字</strong> 或插口  socket=IP地址:端口号 -&gt;每一条TCP连接的唯一被通讯的两端的两个端点所确定</p>\n</li>\n<li>\n<p>确认和重传机制:可实现在不可靠的传输网络上实现可靠的通讯 这样可靠的传输协议称为<strong>自动重传请求ARQ</strong></p>\n</li>\n<li>\n<p>TCP流量控制-&gt;p227  理解拥塞控制的流程图p236</p>\n<ul>\n<li>让发送方的发送速率不要太快,要让接收方来得及接收</li>\n</ul>\n</li>\n<li>\n<p>TCP连接的三次握手 ==p238==</p>\n<ol>\n<li>SYN</li>\n<li>ACK SYN</li>\n<li>ACK</li>\n</ol>\n</li>\n<li>\n<p><strong>根域名服务器</strong> 知道所有顶级域名服务器的域名和IP地址</p>\n</li>\n<li>\n<p><strong>顶级域名服务器</strong> 负责管理在该顶级域名服务器注册的所有二级域名</p>\n</li>\n<li>\n<p>FTP(文件传送协议)基本工作原理:使用TCP可靠的运输服务,主要功能是减少或消除在不同操作系统下处理文件的不兼容性</p>\n</li>\n<li>\n<p>URL格式 <a href=\"http://主机号:端口/路径\">http://主机号:端口/路径</a></p>\n</li>\n<li>\n<p>电子邮件传输协议 使用25口</p>\n<ul>\n<li>SMTP</li>\n<li>POP3</li>\n<li>MIME</li>\n<li>IMAP</li>\n</ul>\n</li>\n<li>\n<p>DHCP动态地址分配</p>\n<ol>\n<li><strong>C  DHCP discover 原0.0.0.0 目的 255.255.255.255</strong></li>\n<li><strong>S   DHCP offer    原DHCP server IP 目的 255.255.255.255</strong></li>\n<li><strong>C   DHCP request 原0.0.0.0   目的 255.255.255.255</strong></li>\n<li><strong>S   DHCP  ack   原DHCP server IP  目的 255.255.255.255</strong></li>\n</ol>\n</li>\n<li>\n<p>网络安全</p>\n<ol>\n<li>主动攻击\n<ul>\n<li>篡改,恶意程序,拒绝服务</li>\n</ul>\n</li>\n<li>被动攻击\n<ul>\n<li>截获</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p>公开密钥与堆成密钥</p>\n<ul>\n<li>对称密钥可以在进行一对一的双向保密通讯</li>\n<li>使用公开密钥,在信道上可以是多对一的单向保密通讯</li>\n</ul>\n</li>\n<li>\n<p>甲-&gt;乙 发 甲的私钥加密  乙的公钥加密</p>\n</li>\n<li>\n<p>访问控制, 默认是拒绝所有访问 &lt;-分组过滤路由是具有<strong>分组过滤功能的路由器</strong>,他根据过滤规则<strong>对进出内部网络的分组执行转发或者丢弃</strong></p>\n</li>\n<li>\n<p>802.11标准规定无线局域网络的最小构建是基本服务集BSS</p>\n</li>\n<li>\n<p>移动自组网络中的一个子集--无线传感器网络WSN</p>\n</li>\n</ol>\n', 0, '1. 路由交换方式:\n\n   - 电路交换\n   - 报文交换\n   - 分组交换\n\n2. **一个字一个字节**\n\n3. 速率指的是速度的传送速率 也成为数据率 单位bit/s 10的n次方, 空间大小一般为2的10*n次方\n\n4. 协议三要素**:语义,语法,同步**\n\n5. TCP/IP的四层协议\n\n   - 网络接口层,网际层IP,运输层TCP/UDP,应用层\n\n6. 五层协议\n\n   - 物理层\n     - 透明的传输比特流\n   - 数据链路层 主要设备->网桥+交换机\n     - 在相邻结点间负责数据帧的工作\n   - 网络层(路由器所在层)\n     - 分组转发,生成路由\n   - 运输层\n     - TCP/UDP,进程通信,数据传输\n   - 应用层\n\n7. 把对等层次之间传送的数据单位称为该层的协议数据单元PDU\n\n8. 同一层协议->协议是控制两个对等实体(或多个实体)进行通信的规则的集合,在协议的控制下,两个对等实体的通信使得本层能够向上一次提供服务.要实现本层协议,还需要使用下面一层所提供的服务\n\n9. ==协议对实体是透明的 协议是水平的  服务是垂直的==\n\n10. 物理层的四个特性:\n\n   **机械特性**:指接口所用的形状,尺寸,引脚数目和排列,固定和锁定装置等\n\n   **电气特性**:指明在接口电缆的各条线路出现的电压的范围\n\n   **功能特性**:指明某条线裤上出现某一电平的意义\n\n   **过程特性**:指明对于不同功能的各种可能事件的出现顺序.\n\n11. 单向通讯 又称**单工通讯**,即只能有一个方向的通讯而没有反方向的交互-无线广播\n\n12. 双向交替通讯 **半双工通讯** 双方都可以发送信息 但不能同时发送信息\n\n    双向同时通讯 **全双工通讯** 双方可以同时发送和接受信息\n\n13. 基带调制\n\n    1. 数字->数字 \n\n       eg.曼彻斯特编码\n\n14. 带通调制\n\n    - 数字->模拟\n    - 三种带通调制的方法\n      - 调频\n      - 调幅\n      - 调相\n\n15. 曼彻斯特编码->自带同步信号的编码\n\n16. 光波在纤芯中的传播原理:==全反射==\n\n17. 可以存在多条不同角度入射的光线在一条光纤中传输,称为**多模光纤**\n\n    若光纤的直径只有一个光的波长,则光纤一直向前传播,而不会产生多次反射,这样的光纤称为**单模光纤**\n\n18. 信道复用->>提高信道的利用率\n\n    - 频分复用:所有用户在**同样时间**占用**不同的带宽**\n    - 时分复用:所有用户在**不同时间**占用**相同的带宽**\n    - 统计时分复用(优化)\n    - 波分复用\n\n19. \n\n    1. | 线路速率 | SONET符号    | ITU-T符号 | 相当的话路数(每个话路64kbit/s) |\n       | :------: | ------------ | --------- | :----------------------------: |\n       | 155.520  | OC-3/STS-3   | STM-1     |              2430              |\n       | 622.080  | OC-12/STS-12 | STM-4     |              9720              |\n\n    \n\n20. 链路:从一个结点到相邻节点的一段物理线路,中间没有其他的交换结点\n\n    数据链路:实现这些协议的软件和硬件加到链路上,就构成了数据链路\n\n    数据链路协议的三个基本问题**.封装成帧,透明传输,差错检测,**\n\n21. 循环冗余检验CRC  应用题p75页\n\n22. **7D 5E->7E **\n\n23. **7D 5D->7D**\n\n24. CDMA/CD ->半双工通道\n\n    1.  载波监听->发送前发送中每个站都必须不停的检测信道\n    2.  多接入 ->多点接入的方式连接在一根总线上\n    3.  碰撞检测 ->边发送边监听\n\n25. ==截断二进制指数退避算法==: **对多不超过16次** 最小帧长64,凡是长度小于64字节的帧都是由于**冲突而异常中止的无效帧.**\n\n26. 快速以太网用的MAC帧的格式仍然是**IEEE802.3**标准规定的帧格式\n\n    1. |       | 6字节    | 6字节  | 2字节 | 46~1500字节 | 4字节           |\n       | ----- | -------- | ------ | ----- | ----------- | --------------- |\n       | 8字节 | 目的地址 | 源地址 | 类型  | 数据        | (帧检验序列)FCS |\n       |       |          |        |       |             | CRC检验         |\n\n27. ==A类地址0-127  B类128-192 C类192-255==\n\n28. **ARP自学习**  生成地址映射表\n\n29. 地址解析协议ARP ,IP地址映射MAC地址 ,*==响应分组为单播,请求分组为广播.==*\n\n30. ARP地址解析协议解决同一个局域网上的主机或路由器的IP地址和硬件地址的映射问题\n\n31. IP数据报的格式**p128**,IP首部固定长度为20字节**,因此首部**长度最小值为5\n\n32. 分组转发算法: **特定主机路由->路由表->默认路由**\n\n      1. 从数据报的首部提取目的主机的IP地址D,得出目的网络的地址为N\n      2. 若**N就是于此路由器直接相连的某个网络地址,**则进行直接交付,不需要再经过其他路由器,直接把数据报交付目的主机(这里包括把目的主机地址D转换为具体的硬件地址,把数据报封装为MAC帧.再发送此);否则就是间接交,执行(3)\n      3. 若路由表中有**目的地址为D的特定主机路由,**则把数据报交给路由表中所指明的下一路由器,否则执行(4)\n      4. 若路由表中有**到达网络N的路由**,则把数据报传给路由表中指明的下一级路由.否则执行(5)\n      5. 若路由表中有**一个默认路由**,则把数据报送给路由表中所指明的默认路由器,否则执行(6)\n      6. 报告转发分组出错.\n\n33. 子网掩码 A类 255.0.0.0 B类 255.255.0.0 C类 255.255.255.0 ==解答题p139 例4-2==\n\n34. 聚合路由CIDR->\n\n35. | CIDR长度 |  点分十进制   | 包含地址数 | 相当于包含分类的网络数 |\n    | :------: | :-----------: | :--------: | :--------------------: |\n    |   /18    | 255.255.192.0 |    16K     |        32个C类         |\n    |   /20    | 255.255.240.0 |     4K     |        16个C类         |\n\n36. **网络控制报文协议 ICMP**  允许主机或路由器报告差错情况和提供有关异常情况报告\n\n     - PING  测试主机的连通性\n     - TRACERT  获得到目的主机的路由信息\n\n37. **内部网关协议RIP** 是一种**分布式的基于距离向量的路由选择协议** **适用于小型网络.路由个数小于15个**\n\n38. RIP 协议特点\n\n     - **仅和相邻路由器交换信息**,(如果两个路由器之间的通信不需要经过另一个路由器,那么这两个路由器就是相邻的)\n     - 路由器交换的信息是当前**本路由器所知道的全部信息**,即自己现在的**路由表**\n     - 按**固定的时间间隔交换**路由信息\n\n39. ==距离向量算法== 目的网络+下一跳路由器:\n\n    - 相同就更新\n    - 不同就比跳数 选跳数小的,跳数相同就不变\n\n40. **内部网关协议OSPF,其主要特征是使用**分布式的链路状态协议**,而不像RIP意义的距离向量协议\n\n     - 本自治系统中所有路由器发送信息,使用**洪泛法.**\n     - 发送的信息就是与本路由器相邻的所有路由器的**链路状态**,但这只是路由器所知道的部分信息.\n     - 只有当**链路状态发送变化时**,路由器才向所有路由器用洪泛法发送此信息\n\n41. 自治系统AS之间的路由选择必须考虑有关策略\n\n42. **边界网关协议BGP** 只能是力求寻找一条能够达到目的网络且比较好路由(不兜圈子),而并非寻找一条最佳路由,采用==路径向量路由选择协议==\n\n43. IPV6\n\n     - 更大的地址空间 增加到128位\n     - 扩展的地址层次结构\n     - 灵活的首部格式\n     - 首部长度固定 **为40个字节**\n     - 允许协议扩充\n     - 支持资源预分配\n\n44. ipv6数据报的目的地址采用 **单播,多播,任播** 三种基本类型地址,没有广播,采用冒号十六进制记法->\n\n     - 零省略,允许把数字零的零省略\n\n       eg.04=4\n\n     - 零压缩,允许一连串连续的零可以为一对冒号所取代  **零压缩只能用一次**\n\n       eg.FF05:0:0:0:0:0:0:B3  可压缩为 FF05::B3\n\n45. 在完全过度到ipv6前 采用**双协议栈** 将ipv6的网络部署到ipv4上 对ipv6有所损失\n\n46. **RFC 1918指明专用地址** **在互联网中的所有路由器,对目的地址是专用地址的数据报一律不转发**   内网使用专用网络地址部署\n\n     - 10.0.0.0 到 10.255.255.255\n     - 172.16.0.0到 172.31.255.255\n     - 192.168.0.0 到 192.168.255.255\n\n47. **网络地址转换协议NAT**\n\n48. 运输层重要功能 :\n\n     -  复用 :指在发送方不同的应用进程都可以使用同一个运输协议传送数据 \n     -  分用  :指接收方的运输层在**剥去报文首部后**==都能==把这些数据正确交付目的的应用进程\n\n49. http两大协议\n\n     - 面向**连接的TCP**\n     - **无连接UDP**\n\n50. **网络层**为主机之间提供**逻辑通讯**,而**运输层**为应用层提供端到端的**逻辑通讯.**\n\n51. UDP概述\n\n     - UDP是无连接的\n     - 使用**最大努力交付,即不保证可靠交付**\n     - 面向报文的\n\n52. 常用端口\n\n     - ==文件传输协议FTP 20/21==\n     - ==STMP 25==\n     - ==DNS 53==\n     - ==TFTP 69==\n     - ==HTTP 80==\n     - ==SNMP 161==\n     - ==HTTPS 443==\n\n53. TCP首部格式p227\n\n54. TCP连接的端点叫**套接字** 或插口  socket=IP地址:端口号 ->每一条TCP连接的唯一被通讯的两端的两个端点所确定\n\n55. 确认和重传机制:可实现在不可靠的传输网络上实现可靠的通讯 这样可靠的传输协议称为**自动重传请求ARQ**\n\n56. TCP流量控制->p227  理解拥塞控制的流程图p236\n\n     - 让发送方的发送速率不要太快,要让接收方来得及接收\n\n57. TCP连接的三次握手 ==p238==\n\n    1. SYN\n    2. ACK SYN\n    3. ACK\n\n58. **根域名服务器** 知道所有顶级域名服务器的域名和IP地址\n\n59. **顶级域名服务器** 负责管理在该顶级域名服务器注册的所有二级域名\n\n60. FTP(文件传送协议)基本工作原理:使用TCP可靠的运输服务,主要功能是减少或消除在不同操作系统下处理文件的不兼容性\n\n61. URL格式 http://主机号:端口/路径\n\n62. 电子邮件传输协议 使用25口\n\n     - SMTP\n     - POP3\n     - MIME\n     - IMAP\n\n63. DHCP动态地址分配\n\n      1. **C  DHCP discover 原0.0.0.0 目的 255.255.255.255**\n      2. **S   DHCP offer    原DHCP server IP 目的 255.255.255.255**\n      3. **C   DHCP request 原0.0.0.0   目的 255.255.255.255**\n      4. **S   DHCP  ack   原DHCP server IP  目的 255.255.255.255**\n\n64. 网络安全\n\n      1. 主动攻击\n         - 篡改,恶意程序,拒绝服务\n      2. 被动攻击\n         - 截获\n\n65. 公开密钥与堆成密钥\n\n     - 对称密钥可以在进行一对一的双向保密通讯\n     - 使用公开密钥,在信道上可以是多对一的单向保密通讯\n\n66. 甲->乙 发 甲的私钥加密  乙的公钥加密\n\n67. 访问控制, 默认是拒绝所有访问 <-分组过滤路由是具有**分组过滤功能的路由器**,他根据过滤规则**对进出内部网络的分组执行转发或者丢弃**\n\n68. 802.11标准规定无线局域网络的最小构建是基本服务集BSS\n\n69. 移动自组网络中的一个子集--无线传感器网络WSN', '', 0, '', '', 'http://111.229.114.126/upload/2020/2/u=4161181514,2737045279&fm=26&gp=0-656b032c97b445f99d5ee95983995283.jpg', '计算机网络知识点', 0, 'net', 69, 0, NULL, NULL, 'net');
INSERT INTO `posts` VALUES (0, 18, '2019-12-27 22:50:18', 0, '2020-02-06 15:54:13', 0, 0, '2020-02-06 15:54:13', '<ol>\n<li>\n<p><strong>什么是分时系统？其主要特点是什么？</strong></p>\n<p>分时系统：是指一台主机上连接了多个带有显示器和键盘的终端，同时允许多个用户共享主机中的资源，每个用户都可以通过自己的终端以交互式使用计算机。</p>\n<p>分时系统的特点：多路性、独立性、及时性、交互性。</p>\n</li>\n<li>\n<p><strong>什么是实时系统？主要有哪几类？</strong></p>\n<p>实时系统：是指系统能及时响应外部事件的请求，在规定的时间内完成该事件的处理，并控制所有实时任务协调一致的运行。</p>\n<p>实时系统分为两类：实时控制系统（火炮的自动控制系统、飞机的自动驾驶系统、导弹的制导系统），实时信息处理系统</p>\n</li>\n<li>\n<p><strong>操作系统在计算机系统中所起的作用是什么？</strong></p>\n<p>操作系统要管理计算机系统中的各种资源，包括硬件资源和软件资源，为用户提供良好的界面。</p>\n</li>\n<li>\n<p><strong>操作系统的特征有哪些？</strong></p>\n<p>操作系统的特征：并发、共享、虚拟、异步性。</p>\n</li>\n<li>\n<p><strong>操作系统追求的主要目标是什么？</strong></p>\n<p>操作系统的主要目标：方便性、有效性、可扩充性、开放性。</p>\n</li>\n<li>\n<p><strong>从资源管理的观点看，操作系统具有哪些功能？</strong></p>\n<p>操作系统功能：处理机管理、存储器管理、文件管理、I/O设备管理、用户接口。</p>\n</li>\n<li>\n<p><strong>什么是进程？进程与程序有哪些异同点？</strong></p>\n<p>进程的定义：进程是具有独立功能的可并发执行的程序在一个数据集合上的运行过程，是系统进行资源分配和调度的独立单位。</p>\n<p>异同点：（1）进程是一段程序的执行一次执行，它是一个动态的概念，程序是完成某个特定功能的指令的有序序列，它是一个静态的概念</p>\n<p>一个程序为实现不同的任务可以同时有多次运行活动，每个运行活动分别作为不同的进程</p>\n<p>进程是系统分配和调度的一个独立的单位，程序不是</p>\n</li>\n<li>\n<p><strong>进程有哪几种状态？试举出使得进程状态发生变化的事件并描绘状态转换图</strong></p>\n<p>进程的状态：进程有3种基本状态，分别是就绪态、执行态、阻塞态。</p>\n<p>(1)就绪→运行状态</p>\n<p>处于就绪状态的进程，当进程调度为之分配了处理机后，该进程就由就绪状态变为运行状态。</p>\n<p>(2)运行→阻塞状态</p>\n<p>正在执行的进程因发生某种事件而无法执行。</p>\n<p>(3)运行→就绪状态</p>\n<p>正在运行的进程因时间片用完或一个优先权高的进程到来而被暂停运行。</p>\n<p>(4)阻塞→就绪状态</p>\n<p>处于阻塞状态的进程，其等待的事件已经发生，则进程由阻塞状态变为就绪状态。</p>\n</li>\n<li>\n<p><strong>什么是线程？引入线程的好处有哪些？</strong></p>\n<p>线程的定义：</p>\n<p>在引入线程的操作系统中，线程是进程的一个实体，是被系统独立调度和分派的基本单位。</p>\n<p>引入线程的好处：</p>\n<ol>\n<li>创建一个新线程花费的时间少；</li>\n<li>两个线程的切换花费时间少；</li>\n<li>由于同一进程内的线程共享内存和文件，线程之间相互通信不需要调用内核，故不需要</li>\n<li>额外的通信机制，使通信更简便，信息传送速度也快；</li>\n<li>线程能独立执行，能充分利用和发挥处理机与外围设备并行工作的能力。</li>\n</ol>\n</li>\n<li>\n<p><strong>什么是临界资源？什么是临界区？对临界区的使用应符合哪些规则？</strong></p>\n<p>临界资源是指一个时刻只允许一个进程使用的资源。</p>\n<p>临界区是指在每个进程中访问临界资源的那段代码。</p>\n<p>每个进程在进入临界区之前应先对欲访问的临界资源进行检查，看它是否正被访问。如果此时临界资源未被访问，该进程便可进入临界区对该资源进行访问，并设置它正被访问的标志；如果此刻该临界资源正被某进程访问，则本进程不能进入临界区。因此，必须在临界区前面增加一段用于进行上述检查的代码。相应地，在临界区后面也要加上一段代码，用于将临界区正被访问的标志恢复为未被访问标志。</p>\n</li>\n<li>\n<p><strong>什么是死锁？死锁产生的必要条件有哪些？</strong></p>\n<p>死锁是指多道程序系统中，一组进程中的每一个进程均无限期地等待被该组进程的另一个进程所占有且永远不会释放的资源。</p>\n<p>产生死锁的四个必要条件：</p>\n<ul>\n<li>互斥条件。</li>\n<li>请求和保持条件。</li>\n<li>不剥夺条件。</li>\n<li>环路等待条件。</li>\n</ul>\n</li>\n<li>\n<p><strong>简述分页存储管理方式的基本思想和页表的作用、</strong></p>\n<p>基本思想：在分页管理系统中将程序的逻辑地址空间和内存空间按相同长度为单位进行等量划分。在分配存储空间时，总是以块为单位按照进程的页数分配物理块。分配的物理块可连续也可不连续</p>\n<p>页表的作用：实现从页号到物理块号的地址映射</p>\n</li>\n<li>\n<p><strong>简述分段存储管理方式的基本思想</strong></p>\n<p>分段存储管理方式要求每个程序的地址空间按照自身的逻辑关系划分为若干段，比如主程序段，子程序段，数据段，堆栈段等，每个段有自己的名字</p>\n</li>\n<li>\n<p><strong>什么是虚拟存储器？</strong></p>\n<p>虚拟存储器指仅把程序的一部分装入内存便可运行的存储器系统。具体地说是（指具有请求调入功能和置换功能，能从逻辑上对内存容量扩充的一种存储器系统）</p>\n</li>\n<li>\n<p><strong>什么是文件的逻辑结构？常用的逻辑结构有哪些？</strong></p>\n<p>文件的逻辑结构是从用户观点出发所看到的文件组织形式，是用户可以直接处理的数据及其结构。</p>\n<p>文件的逻辑结构有两种形式：记录式文件和流式文件</p>\n</li>\n<li>\n<p><strong>什么是文件的物理结构？常用的物理结构有哪些？</strong></p>\n<p>文件的物理结构是指文件在外存上的存储组织形式。</p>\n<p>常见的文件物理结构有：顺序文件，链接文件，索引文件和直接文件。</p>\n</li>\n<li>\n<p><strong>I/O控制方式有哪几种？</strong></p>\n<p>程序查询方式（2）I/O中断方式（3）直接存储器访问（DMA）方式（4）I/O通道方式</p>\n</li>\n<li>\n<p><strong>什么是设备独立性？如何实现设备独立性？</strong></p>\n<p>含义：应用程序独立于具体使用的物理设备</p>\n<p>实现：（1）在操作系统中引入逻辑设备名和物理设备两个概念。在实现了设备独立性的系统中，I/O进程申请设备是从逻辑设备名申请的，这样，系统可根据当时的设备使用情况动态地为之分配该类中的在一起物理设备。若使用物理设备申请，如果该设备已分配，虽然系统中尚有同类设备空闲，该进程也必须等待</p>\n<p>（2）系统必须设置一张逻辑设备表用于将应用程序中所使用逻辑设备名映射为物理设备名。在该表目中包含3项，逻辑设备名和设备驱动程序的入口地址</p>\n</li>\n<li>\n<p><strong>什么是Spooling技术？说明Spooling系统的组成</strong></p>\n<p>在联机情况下实现从外围操作的称为Spooling，或称为假机操作，是通过虚拟技术，用进程来模拟外围机控制输入输出</p>\n<p>组成：(1)输入和输出：在磁盘上的两个储存空间，输入并模拟脱机操作，暂存输入数据，输出并模拟脱机输出，暂存输出数据</p>\n<p>输入缓冲区和输出缓冲区：用来缓和cpu与磁盘之间的速度的矛盾</p>\n<p>输入进程SP和输出进程SP，模拟脱机I/o的外围控制机</p>\n</li>\n</ol>\n', 0, '1. **什么是分时系统？其主要特点是什么？**\n\n   分时系统：是指一台主机上连接了多个带有显示器和键盘的终端，同时允许多个用户共享主机中的资源，每个用户都可以通过自己的终端以交互式使用计算机。\n\n   分时系统的特点：多路性、独立性、及时性、交互性。\n\n2. **什么是实时系统？主要有哪几类？**\n\n   实时系统：是指系统能及时响应外部事件的请求，在规定的时间内完成该事件的处理，并控制所有实时任务协调一致的运行。\n\n   实时系统分为两类：实时控制系统（火炮的自动控制系统、飞机的自动驾驶系统、导弹的制导系统），实时信息处理系统\n\n3. **操作系统在计算机系统中所起的作用是什么？**\n\n   操作系统要管理计算机系统中的各种资源，包括硬件资源和软件资源，为用户提供良好的界面。\n\n4. **操作系统的特征有哪些？**\n\n   操作系统的特征：并发、共享、虚拟、异步性。\n\n5. **操作系统追求的主要目标是什么？**\n\n   操作系统的主要目标：方便性、有效性、可扩充性、开放性。\n\n6. **从资源管理的观点看，操作系统具有哪些功能？**\n\n   操作系统功能：处理机管理、存储器管理、文件管理、I/O设备管理、用户接口。\n\n7. **什么是进程？进程与程序有哪些异同点？**\n\n   进程的定义：进程是具有独立功能的可并发执行的程序在一个数据集合上的运行过程，是系统进行资源分配和调度的独立单位。\n\n   异同点：（1）进程是一段程序的执行一次执行，它是一个动态的概念，程序是完成某个特定功能的指令的有序序列，它是一个静态的概念\n\n   一个程序为实现不同的任务可以同时有多次运行活动，每个运行活动分别作为不同的进程\n\n   进程是系统分配和调度的一个独立的单位，程序不是\n\n8. **进程有哪几种状态？试举出使得进程状态发生变化的事件并描绘状态转换图**\n\n   进程的状态：进程有3种基本状态，分别是就绪态、执行态、阻塞态。\n\n   (1)就绪→运行状态\n\n   处于就绪状态的进程，当进程调度为之分配了处理机后，该进程就由就绪状态变为运行状态。                            \n\n   (2)运行→阻塞状态\n\n   正在执行的进程因发生某种事件而无法执行。             \n\n   (3)运行→就绪状态 \n\n   正在运行的进程因时间片用完或一个优先权高的进程到来而被暂停运行。 \n\n   (4)阻塞→就绪状态 \n\n   处于阻塞状态的进程，其等待的事件已经发生，则进程由阻塞状态变为就绪状态。\n\n9. **什么是线程？引入线程的好处有哪些？**\n\n   线程的定义：\n\n   在引入线程的操作系统中，线程是进程的一个实体，是被系统独立调度和分派的基本单位。\n\n   引入线程的好处：\n\n   1. 创建一个新线程花费的时间少；\n   2. 两个线程的切换花费时间少；\n   3. 由于同一进程内的线程共享内存和文件，线程之间相互通信不需要调用内核，故不需要\n   4. 额外的通信机制，使通信更简便，信息传送速度也快； \n   5. 线程能独立执行，能充分利用和发挥处理机与外围设备并行工作的能力。\n\n10. **什么是临界资源？什么是临界区？对临界区的使用应符合哪些规则？**\n\n    临界资源是指一个时刻只允许一个进程使用的资源。\n\n    临界区是指在每个进程中访问临界资源的那段代码。\n\n    每个进程在进入临界区之前应先对欲访问的临界资源进行检查，看它是否正被访问。如果此时临界资源未被访问，该进程便可进入临界区对该资源进行访问，并设置它正被访问的标志；如果此刻该临界资源正被某进程访问，则本进程不能进入临界区。因此，必须在临界区前面增加一段用于进行上述检查的代码。相应地，在临界区后面也要加上一段代码，用于将临界区正被访问的标志恢复为未被访问标志。\n\n11. **什么是死锁？死锁产生的必要条件有哪些？**\n\n    死锁是指多道程序系统中，一组进程中的每一个进程均无限期地等待被该组进程的另一个进程所占有且永远不会释放的资源。\n\n    产生死锁的四个必要条件：\n\n    - 互斥条件。 \n    - 请求和保持条件。\n    - 不剥夺条件。\n    - 环路等待条件。\n\n12. **简述分页存储管理方式的基本思想和页表的作用、**\n\n    基本思想：在分页管理系统中将程序的逻辑地址空间和内存空间按相同长度为单位进行等量划分。在分配存储空间时，总是以块为单位按照进程的页数分配物理块。分配的物理块可连续也可不连续\n\n    页表的作用：实现从页号到物理块号的地址映射\n\n13. **简述分段存储管理方式的基本思想**\n\n    分段存储管理方式要求每个程序的地址空间按照自身的逻辑关系划分为若干段，比如主程序段，子程序段，数据段，堆栈段等，每个段有自己的名字\n\n14. **什么是虚拟存储器？**\n\n    虚拟存储器指仅把程序的一部分装入内存便可运行的存储器系统。具体地说是（指具有请求调入功能和置换功能，能从逻辑上对内存容量扩充的一种存储器系统）\n\n15. **什么是文件的逻辑结构？常用的逻辑结构有哪些？**\n\n    文件的逻辑结构是从用户观点出发所看到的文件组织形式，是用户可以直接处理的数据及其结构。 \n\n    文件的逻辑结构有两种形式：记录式文件和流式文件\n\n16. **什么是文件的物理结构？常用的物理结构有哪些？**\n\n    文件的物理结构是指文件在外存上的存储组织形式。\n\n    常见的文件物理结构有：顺序文件，链接文件，索引文件和直接文件。\n\n17. **I/O控制方式有哪几种？**\n\n    程序查询方式（2）I/O中断方式（3）直接存储器访问（DMA）方式（4）I/O通道方式\n\n18. **什么是设备独立性？如何实现设备独立性？**\n\n    含义：应用程序独立于具体使用的物理设备\n\n    实现：（1）在操作系统中引入逻辑设备名和物理设备两个概念。在实现了设备独立性的系统中，I/O进程申请设备是从逻辑设备名申请的，这样，系统可根据当时的设备使用情况动态地为之分配该类中的在一起物理设备。若使用物理设备申请，如果该设备已分配，虽然系统中尚有同类设备空闲，该进程也必须等待\n\n       （2）系统必须设置一张逻辑设备表用于将应用程序中所使用逻辑设备名映射为物理设备名。在该表目中包含3项，逻辑设备名和设备驱动程序的入口地址\n\n19. **什么是Spooling技术？说明Spooling系统的组成**\n\n    在联机情况下实现从外围操作的称为Spooling，或称为假机操作，是通过虚拟技术，用进程来模拟外围机控制输入输出\n\n    组成：(1)输入和输出：在磁盘上的两个储存空间，输入并模拟脱机操作，暂存输入数据，输出并模拟脱机输出，暂存输出数据\n\n    输入缓冲区和输出缓冲区：用来缓和cpu与磁盘之间的速度的矛盾\n\n    输入进程SP和输出进程SP，模拟脱机I/o的外围控制机', '', 0, '', '', 'http://111.229.114.126/upload/2020/2/u=1522768993,3570697097&fm=26&gp=0%20(1)-ff9f0f5f1b7643c09a5ae79dd0a0f801.jpg', '操作系统', 0, 'operating_system', 105, 0, NULL, NULL, 'operating_system');
INSERT INTO `posts` VALUES (0, 20, '2020-01-07 11:12:52', 0, '2020-02-06 15:47:54', 0, 0, '2020-02-06 15:47:54', '<p>一.简答题:</p>\n<ol>\n<li>\n<p><a href=\"https://blog.csdn.net/wangzi11322/article/details/45556585\">amstrong公理，和闭包：</a></p>\n<p>原理：设U为属性集总体，F是U上的一组函数依赖，于是有关系模式R&lt;U，F&gt;,对R&lt;U，F&gt;来说有以下推理规则</p>\n<p>证明：</p>\n<ul>\n<li>\n<p>自反律: 若Y ⊆X⊆ U，则X →Y为F所蕴含</p>\n</li>\n<li>\n<p>增广律: 若X→Y为F所蕴含，且Z ⊆ U，则XZ→YZ 为F所蕴含。</p>\n</li>\n<li>\n<p>传递律：若X→Y及Y→Z为F所蕴含，则X→Z为 F所蕴含。</p>\n</li>\n<li>\n<p>合并规则：由X→Y，X→Z，有X→YZ。\n（A2， A3）\n伪传递规则：由X→Y，WY→Z，有XW→Z。\n（A2， A3）\n分解规则：由X→Y及 Z⊆Y，有X→Z。\n（A1， A3）</p>\n</li>\n</ul>\n</li>\n<li>\n<p>闭包：\n定义6.l2    在关系模式<code>R&lt;U，F&gt;</code>中为F所逻辑蕴含的函数依赖的全体叫作 F的闭包，记为F+。\n定义6.13   设F为属性集U上的一组函数依赖，X ⊆U， XF+ ={ A|X→A能由F 根据Armstrong公理导出}，XF+称为属性集X关于函数依赖集F 的闭包</p>\n</li>\n<li>\n<p>数据库发展概述：</p>\n<ol>\n<li>\n<p>第一代数据库系统：主要是<strong>层次模型和网状模型</strong>（都是格式化模型）</p>\n<ul>\n<li>\n<p>支持三级模式（外模式、模式、内模式）</p>\n</li>\n<li>\n<p>用存取路径来表示数据之间的联系</p>\n</li>\n<li>\n<p>独立的数据定义语言</p>\n</li>\n<li>\n<p>导航的数据操纵语言</p>\n</li>\n</ul>\n</li>\n<li>\n<p>第二代数据库系统</p>\n<ul>\n<li>支持关系数据模型的关系数据库系统是第二代数据库系统</li>\n</ul>\n</li>\n<li>\n<p>新一代数据库系统</p>\n<ul>\n<li>第三代数据库系统应支持数据管理、对象管理和知识管理</li>\n<li>第三代数据库系统必须保持或继承第二代数据库系统的技术</li>\n<li>第三代数据库系统必须对其他系统开放</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p>并发带来的数据不一致性以及解决方法：</p>\n<ul>\n<li>丢失修改：例如同一时刻两个不同的用户购买了最后一张同样的票（加写锁）</li>\n<li>不可重复读：指事务1读取数据后，事务2执行更新操作，使得1无法再现前一次读取结果。（加读锁，不能加写锁）</li>\n<li>读脏数据：指事务1修改某一数据后将其写回磁盘，事务2读取同一数据后，1由于某种原因被撤销，这时1修改后的数据恢复原值，2读到的数据就与数据库中的数据不一致，2读到的数据即为脏数据。（加写锁，其他事物不能读）</li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://blog.csdn.net/HaoDaWang/article/details/78098937\">E-R图转化为关系模型：\n</a></p>\n<ol>\n<li>\n<p>1:1</p>\n<p>遇到1:1 关系的话在两个实体任选一个添加另一个实体的主键即可。</p>\n</li>\n<li>\n<p>1:N\n1:N 遇到 1:N 关系的话在N端添加另一端的主键，假如有学生和班级两个实体，一个班级可以容纳多个学生，但是一个学生只能选择一个班级， 因此班级和学生是1:N的关系，现在要转换为关系模型， 我们只需在学生的这端加上班级的唯一标识即可，这样做的原因是，因为一个学生只能有一个班级，班级是相对学生唯一的。</p>\n</li>\n<li>\n<p>N:M\n遇到N:M我们需要将联系转换为实体，然后在该实体上加上另外两个实体的主键，作为联系实体的主键，然后再加上该联系自身带的属性即可。例如有学生和老师两个实体， 一个学生可以由多名老师来授课，一名老师也可以授课多名学生，它们是M:N关系的，假如联系为授课，该联系上有成绩属性，因此当我们把它转换为关系模型时，我们把联系转换为联系实体，并添加学生实体的主键（学号）和教师实体的主键（教师编号）作为自己的主键，值得注意的是，授课实体的外键分别是学号和教师编号，但是它的主键是（学号，教师编号），另外它还拥有自己的一个属性成绩。</p>\n</li>\n<li>\n<p>1:1:N</p>\n<p>这是三元联系的对应关系，但是当转换为关系模型时，和1:N的情况是差不多的。我们只需将N端添加另外两端的主键即可。</p>\n</li>\n<li>\n<p>M:N:P</p>\n<p>这种三元联系的三种多对应关系，看上去很复杂，其实转换起来并不是那么复杂了，我们要做的仅仅是将其中的联系转换为联系实体，然后在联系实体上添加M端N端P端的主键，然后加上联系实体自身的属性，就行了。</p>\n</li>\n</ol>\n</li>\n</ol>\n<p><img src=\"https://img-blog.csdn.net/20170926155307795?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSGFvRGFXYW5n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"ER图\" /></p>\n<ul>\n<li>\n<p>​	这是一份关于商店商品仓库的ER图。</p>\n<p>先看仓库和商品之间是M:N的关系，于是我们首先想到的应该是把联系 库存转换为库存实体。\n库存 （仓库号，商品号，日期，库存量）\n然后是商品实体和仓库实体\n商品（商品号，商品名，单价）\n仓库（仓库号，仓库名，地址）</p>\n<p>除此之外仓库和商品还有一个供应关系，同样是M:N关系：\n供应 （仓库号，商品号 ，月份，月供应量）</p>\n<p>在上图的商店和仓库之间的关系可能写漏了，但是它们应该也是M:N的关系，一个商店可以被多个仓库供应，一个仓库也可以供应多个商店。上面已经创建了供应实体，现在只需在供应实体中假如商店号即可，也就是商店实体的主键。</p>\n<p>供应（仓库号，商品号，商店号 ，月份，月供应量）\n商店（商店号，商店名，地址）</p>\n</li>\n</ul>\n<ol start=\"6\">\n<li>\n<p><a href=\"https://blog.csdn.net/weixin_36217005/article/details/80274661\">规范化理论：</a></p>\n<ol>\n<li>\n<p>范式:</p>\n<ul>\n<li>\n<p>第一范式：<strong>每个属性不可再分</strong></p>\n</li>\n<li>\n<p>第二范式：<strong>不允许关系模式中的非主属性部分函数依赖于候选键（如果R的关系键为单属性，或R的全体属性均为主属性，则属于第二范式）</strong>\n==找出对候选键部分依赖的非主属性所依赖的候选键的真子集，然后吧这个真子集与其函数决定的非主属性组合成一个新的模式==\n==对候选键完全依赖的所有非主属性与候选键组成另一个关系模式==</p>\n</li>\n<li>\n<p>第三范式：<strong>每个非主属性都不传递依赖于R中的每个关系键</strong></p>\n<ul>\n<li>\n<p>E_S(员工编号, 员工名称, 工资级别, 工资)中“工资”对“员工编号”的传递依赖。</p>\n<p>继续分解成  E(员工编号, 员工名称, 工资级别)  和S(工资级别, 工资)</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://blog.csdn.net/lxw983520/article/details/83276021\">并发调度：</a></p>\n</li>\n<li>\n<p><strong>最小函数依赖集其一关系不能有其二关系推理得到</strong> -&gt;部分函数依赖.传递函数依赖</p>\n</li>\n<li>\n<p><strong>保证并发调度的可串行化</strong> 是为了确保事物的隔离性和一致性</p>\n</li>\n<li>\n<p>聚簇索引改变数据库的内模式</p>\n</li>\n<li>\n<p>关系规范化是在数据库设计的（  逻辑设计 ）阶段进行。</p>\n</li>\n<li>\n<p>加写锁 又称为x锁 既能读也能写  其他人不读也不能写,且不能加锁 知道释放</p>\n</li>\n<li>\n<p>加读锁 又称为 s锁  只能读 不能写  可以加读锁不能加写锁</p>\n</li>\n<li>\n<p>数据的物理独立性修改模式与内模式之间的映像</p>\n</li>\n<li>\n<p>数据的逻辑独立性修改外模式与模式之间的映像</p>\n</li>\n<li>\n<p>设计用户外模式属于概念结构设计</p>\n</li>\n<li>\n<p>系统在进行事务处理时，对数据的插入、删除或修改的全部有关内容<strong>先</strong>写入==日志文件==</p>\n</li>\n<li>\n<p>若要转存全部数据库应采用动态全局转储</p>\n</li>\n</ol>\n</li>\n</ol>\n<pre><code class=\"language-sql\">求至少使用了供应商s1所供应的全部零件的工程号jno\nselect jno x from spj where pno not exists(select pno from spj where Sno=&quot;S1&quot; and pno not in (select pno from spj where jno=x.jno))\n\n求供应工程为j1零件的红蛇的供应商号sno\nselect sno from spj, p where jno=j1 and p.color =\'红\' and spj.pno=p.pno ;\n\n求没有使用天津供应商供应红色零件的工程jno\nselect jno from spj where jno not in (select jno from s,p,spj where s.CITY=\'天津\' and p.color=\'红\'  and spj.pno=p.pno and spj.sno=s.sno)  \n\nselect  JNO from J where JNO NOT IN（select JNo from SPJ，P，S where SpJ.sNo=S.SNo and SPJ.PNO=P.PNO and P.CoLoR=\'红色\' and s.cITY=\'天津\')\n\n查询至少给3个(包含3个)不同项目供应了零件的供应商，要求输出供应商号和供应零件数量的总和，并按供应商号降序排列。\nSELECT供应商号，SUM(数量)FROM SP_P(  GRÒUP BY供应商号   )(   HAVING COUNT(DISTINCT项目号)&gt;2  )(  ORDER BY供应商号DESC   ).\n\n。查询每个部门中月薪资最高的员工号、姓名、+部门名和月薪资\nselect SELECT员工号，姓名，部门名，月薪资 \nFROM EMP Y，Dept \nWHERE（  Y.部门号=Dept.部门号   ）AND月薪资=（\nSELECT Max（月薪资）\nFROM EMP Z WHERE（  Z.部门号=Y.部门号   ） ）\n</code></pre>\n', 0, '一.简答题:\n\n1. [amstrong公理，和闭包：](https://blog.csdn.net/wangzi11322/article/details/45556585)\n\n   原理：设U为属性集总体，F是U上的一组函数依赖，于是有关系模式R<U，F>,对R<U，F>来说有以下推理规则\n\n   证明：\n\n   - 自反律: 若Y ⊆X⊆ U，则X →Y为F所蕴含\n\n   - 增广律: 若X→Y为F所蕴含，且Z ⊆ U，则XZ→YZ 为F所蕴含。\n\n   - 传递律：若X→Y及Y→Z为F所蕴含，则X→Z为 F所蕴含。\n\n   - 合并规则：由X→Y，X→Z，有X→YZ。\n         （A2， A3）\n     伪传递规则：由X→Y，WY→Z，有XW→Z。\n           （A2， A3）\n     分解规则：由X→Y及 Z⊆Y，有X→Z。\n           （A1， A3）\n\n2. 闭包：\n   定义6.l2    在关系模式`R<U，F>`中为F所逻辑蕴含的函数依赖的全体叫作 F的闭包，记为F+。\n   定义6.13   设F为属性集U上的一组函数依赖，X ⊆U， XF+ ={ A|X→A能由F 根据Armstrong公理导出}，XF+称为属性集X关于函数依赖集F 的闭包\n\n3. 数据库发展概述：\n\n   1. 第一代数据库系统：主要是**层次模型和网状模型**（都是格式化模型）\n\n      - 支持三级模式（外模式、模式、内模式）\n\n      - 用存取路径来表示数据之间的联系\n\n      - 独立的数据定义语言\n\n      - 导航的数据操纵语言\n\n   2. 第二代数据库系统\n\n      - 支持关系数据模型的关系数据库系统是第二代数据库系统\n   3. 新一代数据库系统\n      - 第三代数据库系统应支持数据管理、对象管理和知识管理\n      - 第三代数据库系统必须保持或继承第二代数据库系统的技术\n      - 第三代数据库系统必须对其他系统开放\n\n4. 并发带来的数据不一致性以及解决方法：\n\n   - 丢失修改：例如同一时刻两个不同的用户购买了最后一张同样的票（加写锁）\n   - 不可重复读：指事务1读取数据后，事务2执行更新操作，使得1无法再现前一次读取结果。（加读锁，不能加写锁）\n   - 读脏数据：指事务1修改某一数据后将其写回磁盘，事务2读取同一数据后，1由于某种原因被撤销，这时1修改后的数据恢复原值，2读到的数据就与数据库中的数据不一致，2读到的数据即为脏数据。（加写锁，其他事物不能读）\n\n5. [E-R图转化为关系模型：\n ](https://blog.csdn.net/HaoDaWang/article/details/78098937)\n\n   1. 1:1\n\n      遇到1:1 关系的话在两个实体任选一个添加另一个实体的主键即可。\n\n   2. 1:N\n      1:N 遇到 1:N 关系的话在N端添加另一端的主键，假如有学生和班级两个实体，一个班级可以容纳多个学生，但是一个学生只能选择一个班级， 因此班级和学生是1:N的关系，现在要转换为关系模型， 我们只需在学生的这端加上班级的唯一标识即可，这样做的原因是，因为一个学生只能有一个班级，班级是相对学生唯一的。\n\n   3. N:M\n      遇到N:M我们需要将联系转换为实体，然后在该实体上加上另外两个实体的主键，作为联系实体的主键，然后再加上该联系自身带的属性即可。例如有学生和老师两个实体， 一个学生可以由多名老师来授课，一名老师也可以授课多名学生，它们是M:N关系的，假如联系为授课，该联系上有成绩属性，因此当我们把它转换为关系模型时，我们把联系转换为联系实体，并添加学生实体的主键（学号）和教师实体的主键（教师编号）作为自己的主键，值得注意的是，授课实体的外键分别是学号和教师编号，但是它的主键是（学号，教师编号），另外它还拥有自己的一个属性成绩。\n\n   4. 1:1:N\n\n      这是三元联系的对应关系，但是当转换为关系模型时，和1:N的情况是差不多的。我们只需将N端添加另外两端的主键即可。\n\n   5. M:N:P\n\n      这种三元联系的三种多对应关系，看上去很复杂，其实转换起来并不是那么复杂了，我们要做的仅仅是将其中的联系转换为联系实体，然后在联系实体上添加M端N端P端的主键，然后加上联系实体自身的属性，就行了。\n\n![ER图](https://img-blog.csdn.net/20170926155307795?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSGFvRGFXYW5n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n- ​	这是一份关于商店商品仓库的ER图。\n\n  先看仓库和商品之间是M:N的关系，于是我们首先想到的应该是把联系 库存转换为库存实体。 \n  库存 （仓库号，商品号，日期，库存量） \n  然后是商品实体和仓库实体 \n  商品（商品号，商品名，单价） \n  仓库（仓库号，仓库名，地址）\n\n  除此之外仓库和商品还有一个供应关系，同样是M:N关系： \n  供应 （仓库号，商品号 ，月份，月供应量）\n\n  在上图的商店和仓库之间的关系可能写漏了，但是它们应该也是M:N的关系，一个商店可以被多个仓库供应，一个仓库也可以供应多个商店。上面已经创建了供应实体，现在只需在供应实体中假如商店号即可，也就是商店实体的主键。\n\n  供应（仓库号，商品号，商店号 ，月份，月供应量） \n  商店（商店号，商店名，地址）\n\n6. [规范化理论：](https://blog.csdn.net/weixin_36217005/article/details/80274661)\n\n   1. 范式:\n\n      - 第一范式：**每个属性不可再分**\n\n      - 第二范式：**不允许关系模式中的非主属性部分函数依赖于候选键（如果R的关系键为单属性，或R的全体属性均为主属性，则属于第二范式）**\n        ==找出对候选键部分依赖的非主属性所依赖的候选键的真子集，然后吧这个真子集与其函数决定的非主属性组合成一个新的模式==\n        ==对候选键完全依赖的所有非主属性与候选键组成另一个关系模式==\n\n      - 第三范式：**每个非主属性都不传递依赖于R中的每个关系键**\n\n        - E_S(员工编号, 员工名称, 工资级别, 工资)中“工资”对“员工编号”的传递依赖。\n\n          继续分解成  E(员工编号, 员工名称, 工资级别)  和S(工资级别, 工资)\n\n   7. [并发调度：](https://blog.csdn.net/lxw983520/article/details/83276021)\n   8. **最小函数依赖集其一关系不能有其二关系推理得到** ->部分函数依赖.传递函数依赖\n   9. **保证并发调度的可串行化** 是为了确保事物的隔离性和一致性\n   10. 聚簇索引改变数据库的内模式\n   11. 关系规范化是在数据库设计的（  逻辑设计 ）阶段进行。\n   12. 加写锁 又称为x锁 既能读也能写  其他人不读也不能写,且不能加锁 知道释放\n   13. 加读锁 又称为 s锁  只能读 不能写  可以加读锁不能加写锁\n   14. 数据的物理独立性修改模式与内模式之间的映像\n   15. 数据的逻辑独立性修改外模式与模式之间的映像\n   16. 设计用户外模式属于概念结构设计\n   17. 系统在进行事务处理时，对数据的插入、删除或修改的全部有关内容**先**写入==日志文件==\n   18. 若要转存全部数据库应采用动态全局转储\n\n```sql\n求至少使用了供应商s1所供应的全部零件的工程号jno\nselect jno x from spj where pno not exists(select pno from spj where Sno=\"S1\" and pno not in (select pno from spj where jno=x.jno))\n\n求供应工程为j1零件的红蛇的供应商号sno\nselect sno from spj, p where jno=j1 and p.color =\'红\' and spj.pno=p.pno ;\n\n求没有使用天津供应商供应红色零件的工程jno\nselect jno from spj where jno not in (select jno from s,p,spj where s.CITY=\'天津\' and p.color=\'红\'  and spj.pno=p.pno and spj.sno=s.sno)  \n\nselect  JNO from J where JNO NOT IN（select JNo from SPJ，P，S where SpJ.sNo=S.SNo and SPJ.PNO=P.PNO and P.CoLoR=\'红色\' and s.cITY=\'天津\')\n\n查询至少给3个(包含3个)不同项目供应了零件的供应商，要求输出供应商号和供应零件数量的总和，并按供应商号降序排列。\nSELECT供应商号，SUM(数量)FROM SP_P(  GRÒUP BY供应商号   )(   HAVING COUNT(DISTINCT项目号)>2  )(  ORDER BY供应商号DESC   ).\n\n。查询每个部门中月薪资最高的员工号、姓名、+部门名和月薪资\nselect SELECT员工号，姓名，部门名，月薪资 \nFROM EMP Y，Dept \nWHERE（  Y.部门号=Dept.部门号   ）AND月薪资=（\nSELECT Max（月薪资）\nFROM EMP Z WHERE（  Z.部门号=Y.部门号   ） ）\n```\n\n\n\n', '', 0, '', '', 'http://111.229.114.126/upload/2020/2/u=3868937815,2912440064&fm=26&gp=0-a0c951d2a5064d56b22f370e0a67a193.jpg', '数据库知识点', 0, 'database', 41, 0, NULL, NULL, 'database');
INSERT INTO `posts` VALUES (0, 21, '2020-01-07 18:10:51', 0, '2020-02-06 15:52:48', 0, 0, '2020-02-06 15:52:48', '<h4 id=\"模式\">模式</h4>\n<pre><code>为用户ZHANG创建一个模式TEST 并且在其中定义一个表TABLE\ncreate schema test authorization ZHANG\ncreate table TABLE (\n	col1 int,\n    col2 char(20),\n    col3 smallint,\n    col4 numeric (10,3),\n    col5 decimal (5,2)\n)\n删除模式\ndrop schema &lt;模式名&gt; &lt;cascade 级联| restrict 限制&gt;\ncascade|restrict 必选其一: 前者级联表示同时把该模式中所有的数据库对象全部删除\n						后者限制表示如果该模式中已经定义了下属数据对象(视图,表等),则拒绝删除语句执行\n创建表\ncreate table &lt;表名&gt;(\n	&lt;列名&gt;&lt;字段类型&gt; [列级约束条件],\n    &lt;列名&gt;&lt;字段类型&gt; [列级约束条件],\n    ...\n    [表级约束条件]\n)\ncreate table student(\n	sno char(9) primary key,\n    sname char(20) unique,\n    sex char(2),\n    sage smallint,\n    sdept char(20)\n)\ncreate table course(\n	cno char(4) primary key,\n    cname char(40) not null,\n    cpno char (4) ,\n    credit smallint ,\n   	foreign key (cpno) references course (cno)\n    /*表级完整性约束 cpno 是外码 被参照表是course 被参照列是cno*/\n)\n\n修改基本表\nalter table&lt;表名&gt; [add [column]&lt;新列名&gt;&lt;数据类型&gt;[完整性约束] ]\n[add &lt;表级完整性约束&gt;]\n[drop [column]&lt;新列名&gt; [cascade|RESTRICT]]\n[drop [column]&lt;完整性约束名&gt;[restrict|cascade]]\n[alter column &lt;列名&gt;&lt;数据类型&gt;]\neg.\n	向Student 表增加\'入学时间\' 列 数据类型为日期型\n	alter table student add s_entrance date\n	\n	将年龄改字符型改为整数\n	alter table student alter column sage int\n	\n	增加课程名的唯一约束\n	alter table course add unique(cname)\n	\n删除表\ndrop table &lt;表名&gt; [restrict|cascade]\neg.若表上有视图 选择restrict 则不能删除 选择cascade 则一并删除视图\n	drop table student cascade\n	\n建立索引\ncreate [unique] [cluster] index &lt;索引名&gt;\non &lt;表名&gt;(&lt;列名&gt; [&lt;次序&gt;][,&lt;列名&gt;[次序]]...])\neg.\n	student 按学号升序建立唯一索引\n	create unique index stusno on student (sno)\n	\n修改索引\nalter index &lt;旧索引名&gt; rename to &lt;新索引名&gt;;\neg.\n	将sc表的scno 索引名改为 scsno\n	alter index scno rename to scsno\n	\n删除索引\ndrop index &lt;索引名&gt;\neg.\n	删除student 表的stusno索引\n	drop index stusno\n	\n查询\nselect [all [distinct] &lt;目标列表表达式&gt;[,&lt;目标列表表达式&gt;]]...\nfrom &lt;表名或视图名&gt;[,&lt;表名或视图名&gt;...]|(&lt;select 语句&gt;[AS]&lt;别名&gt;)\n[where &lt;条件表达式&gt;]\n[group by &lt;列名1&gt;[Having &lt;条件表达式&gt;]]\n[order by &lt;列名2&gt;[asc | desc]]\neg.\n\n\n</code></pre>\n', 0, '#### 模式\n```\n为用户ZHANG创建一个模式TEST 并且在其中定义一个表TABLE\ncreate schema test authorization ZHANG\ncreate table TABLE (\n	col1 int,\n    col2 char(20),\n    col3 smallint,\n    col4 numeric (10,3),\n    col5 decimal (5,2)\n)\n删除模式\ndrop schema <模式名> <cascade 级联| restrict 限制>\ncascade|restrict 必选其一: 前者级联表示同时把该模式中所有的数据库对象全部删除\n						后者限制表示如果该模式中已经定义了下属数据对象(视图,表等),则拒绝删除语句执行\n创建表\ncreate table <表名>(\n	<列名><字段类型> [列级约束条件],\n    <列名><字段类型> [列级约束条件],\n    ...\n    [表级约束条件]\n)\ncreate table student(\n	sno char(9) primary key,\n    sname char(20) unique,\n    sex char(2),\n    sage smallint,\n    sdept char(20)\n)\ncreate table course(\n	cno char(4) primary key,\n    cname char(40) not null,\n    cpno char (4) ,\n    credit smallint ,\n   	foreign key (cpno) references course (cno)\n    /*表级完整性约束 cpno 是外码 被参照表是course 被参照列是cno*/\n)\n\n修改基本表\nalter table<表名> [add [column]<新列名><数据类型>[完整性约束] ]\n[add <表级完整性约束>]\n[drop [column]<新列名> [cascade|RESTRICT]]\n[drop [column]<完整性约束名>[restrict|cascade]]\n[alter column <列名><数据类型>]\neg.\n	向Student 表增加\'入学时间\' 列 数据类型为日期型\n	alter table student add s_entrance date\n	\n	将年龄改字符型改为整数\n	alter table student alter column sage int\n	\n	增加课程名的唯一约束\n	alter table course add unique(cname)\n	\n删除表\ndrop table <表名> [restrict|cascade]\neg.若表上有视图 选择restrict 则不能删除 选择cascade 则一并删除视图\n	drop table student cascade\n	\n建立索引\ncreate [unique] [cluster] index <索引名>\non <表名>(<列名> [<次序>][,<列名>[次序]]...])\neg.\n	student 按学号升序建立唯一索引\n	create unique index stusno on student (sno)\n	\n修改索引\nalter index <旧索引名> rename to <新索引名>;\neg.\n	将sc表的scno 索引名改为 scsno\n	alter index scno rename to scsno\n	\n删除索引\ndrop index <索引名>\neg.\n	删除student 表的stusno索引\n	drop index stusno\n	\n查询\nselect [all [distinct] <目标列表表达式>[,<目标列表表达式>]]...\nfrom <表名或视图名>[,<表名或视图名>...]|(<select 语句>[AS]<别名>)\n[where <条件表达式>]\n[group by <列名1>[Having <条件表达式>]]\n[order by <列名2>[asc | desc]]\neg.\n\n\n```\n', '', 0, '', '', 'http://111.229.114.126/upload/2020/2/u=3868937815,2912440064&fm=26&gp=0-a0c951d2a5064d56b22f370e0a67a193.jpg', '数据库模式设计', 0, 'databasemodel', 36, 0, NULL, NULL, 'databasemodel');
INSERT INTO `posts` VALUES (0, 22, '2020-01-07 18:12:22', 0, '2020-02-06 15:56:22', 0, 0, '2020-02-06 15:56:22', '<h4 id=\"查询\">查询</h4>\n<pre><code>\n查询全体学生的学号和姓名\nselect sno,sname from student\n\n查询全体学生详细信息\nselect * from student\n\n-&gt;查询经过计算的值\n查询全体学生的姓名和出生年份\nselect sname ,2020-sage from student\n\n查询全体学生的姓名,出生年份,和所在院系,要求小写字母表示系名\nselect sname , &quot;your of birth:&quot;,2020-sage birthday,lower(sdept) from student\n\nALL关键字默认  DISTINCT 为不重复元素\nselect sno from student == select all sno from student\n\n-&gt;条件查询\n查询计算机科学系的全体学生名单\nselect sname from student where sdept=\'CS\'\n\n查询所有年龄小于20的学生\nselect sname ,sgae from student where sage&lt;20\n\n-&gt;确定范围\n查询年龄在20~30的学生\nselect sname ,sdept ,sage from student where sage between 20 and 30\n\n-&gt;确定集合\n查询计算机科学系,数学系和信息系的学生\nselect sname ,ssex from student where sdept  in (\'CS\',\'MA\',\'IS\')\n==select sname ,ssex from student where sdept=\'CS\' or sdept=\'MA\' or sdept=\'IS\'\n\n-&gt;字符匹配 %:任意长度字符串 _:任意单个字符串\n查询学号为20190304的学生情况\nselect * from student where sno like \'20190304\'== select * from student where sno =\'20190304\'\n如果like 后不含通配符 可用= 代替like\n\n查询所有刘姓学生的信息\nselect * from student where sname like \'刘%\'\n\n姓欧阳且全名为三个姓的学生信息\nselect * from student where sname like \'欧阳_\'\n\n第二个字为阳的学生信息\nselect * from student where sname like \'_阳%\'\n\n查询所有不是姓刘的学生信息\nselect * from student where sname not like \'刘%\'\n\n-&gt;&quot;\\转移字符&quot;\n查询DB_design课程的课程号和学分\nselect cno ,ceredit from course where cname like \'DB\\_design\' escape  \'\\\'\n\n\'-&gt;涉及空值查询\n查询有成绩的学生信息\nselect * from sc where crade is not null\n\n-&gt;多条件查询\n查询是计算机系且年龄小于20的学生\nselect * from student where sage&lt;20 and sdept =\'CS\'\n\n-&gt;order  by子句 desc 降序 默认: asc 升序\n查询选修了3号课程的学生信息并按成绩降序\nselect * from sc where cno=\'3\' order by grade desc\n\n-&gt;聚集函数 &quot;不能用于where 子句中&quot; 只能用于having 和group by子句,当遇到空值时 除了count(*) 其余都跳过而只处理非空值\n查询学生总人数\nselect count(*) from student\n\n查询选修了课程的学生人数\nselect count (distinct sno) from sc\n\n计算1号课程的学生平均成绩\nselect avg(grade) from sc where cno=\'1\'\n\n查询1号课程的学生最高分数\nselect max(grade) from sc where cno=\'1\'\n\n查询学生95001选修课程的总学分数\nselect sum(credit) from course,student where student.sno=\'95001\' and student.cno=course.cno\n\n-&gt;group by 子句  分组后聚簇函数将对于每一个组作用,即每个组都有一个函数值\n求各个课程号及相应选课人数\nselect cno,count(sno) from student group by cno\n\n查询选修了三门课以上的学生学号\nselect sno from sc group by sno having count(*) &gt;3\n\n查询平均成绩大于90分的学生学号和平均成绩\nselect sno ,avg(grade) from sc group by sno having avg(grade)&gt;90\n\n-&gt;连接查询 连接字段必须是可比的 \n查询每个学生及其选课情况\nselect student.* ,sc.* from student ,sc where student.sno =sc.sno\n\n-&gt;去掉重复属性列为自然连接\nselect student.sno,sname,sage,sdept,cno,sc.grade from student ,course where student.sno =sc.sno\n==&gt;select student.sno,sname,sage,sdept,cno,sc.grade from student left outer join sc on(student.sno=sc.sno)\n\n查询选修2号课程且成绩在90分以上 的所有学生和学号\nselect studnet.sno ,sname from student ,sc where student.sno=sc.sno and sc.cno=\'2\' and sc.grade&gt;90\n\n-&gt;自连接\n查询每一门课程的间接先修课-即先修课的先修课\nselect first.cno ,second.cpno from course first,course second where first.cpno=second.cno\n\n-&gt;嵌套查询\n查询学生选修课程2的学生姓名\nselect sname from student where sno in (select sno from sc where cno=\'2\')\n\n查询与刘晨在同一个系上学的学生&quot;查询结果不依赖于父查询-&gt;又称为不相关子查询&quot;\nselect * from student where sdept in (select sdept from student where sname=\'刘晨\')\n\n查询课程名为\'信息系统\' 的学生学号和姓名&quot;查询结果依赖于父查询-&gt;又称为相关子查询&quot;\nselect sname,sno from student where sno in (select sno from sc where cno in(select cno from course where cname=\'信息系统\'))\n\n找出每个学生超过他自己选修课程平均成绩的课程号\nselect sno,cno from sc x where grade &gt;=(select avg(grade) from sc y where x.sno=y.sno)\n\n-&gt;带有any  all的子查询\n查询非计算机科学系中比计算机科学系任意一个学生年龄小的学生姓名和年龄\nselect sname,sage from student where sage&lt;any(select sage from student where sdept=\'CS\') and sdept &lt;&gt; /!= \'CS\'\n\n查询非计算机科学系中比计算机科学系所有学生年龄小的学生姓名和年龄\nselect sname,sage from student where sage&lt;all(select sage from student where sdept=\'CS\') and sdept &lt;&gt; /!= \'CS\'\n\n查询所有选修了1号课程的学生姓名\nselect sname from student  where exists (select * from sc where sno=student.sno adn cno=\'1\')\n\n查询没有一门课是他不选修的学生\nselect sname from student where not exists (select * from from course where  not exists (select cno from sc where sno=student.sno and cno=course.cno))\n\n查询至少选修了学生95001的全部课程的学生号码\nselect distinct sno from sc scx where not exists (\n    select * form  sc scy where scy.sno =\'95001\' and not exists(\n        select * from sc scz where scz.sno =scx.sno and scz.cno =scy.cno) )\n\n\n</code></pre>\n', 0, '#### 查询\n\n```\n\n查询全体学生的学号和姓名\nselect sno,sname from student\n\n查询全体学生详细信息\nselect * from student\n\n->查询经过计算的值\n查询全体学生的姓名和出生年份\nselect sname ,2020-sage from student\n\n查询全体学生的姓名,出生年份,和所在院系,要求小写字母表示系名\nselect sname , \"your of birth:\",2020-sage birthday,lower(sdept) from student\n\nALL关键字默认  DISTINCT 为不重复元素\nselect sno from student == select all sno from student\n\n->条件查询\n查询计算机科学系的全体学生名单\nselect sname from student where sdept=\'CS\'\n\n查询所有年龄小于20的学生\nselect sname ,sgae from student where sage<20\n\n->确定范围\n查询年龄在20~30的学生\nselect sname ,sdept ,sage from student where sage between 20 and 30\n\n->确定集合\n查询计算机科学系,数学系和信息系的学生\nselect sname ,ssex from student where sdept  in (\'CS\',\'MA\',\'IS\')\n==select sname ,ssex from student where sdept=\'CS\' or sdept=\'MA\' or sdept=\'IS\'\n\n->字符匹配 %:任意长度字符串 _:任意单个字符串\n查询学号为20190304的学生情况\nselect * from student where sno like \'20190304\'== select * from student where sno =\'20190304\'\n如果like 后不含通配符 可用= 代替like\n\n查询所有刘姓学生的信息\nselect * from student where sname like \'刘%\'\n\n姓欧阳且全名为三个姓的学生信息\nselect * from student where sname like \'欧阳_\'\n\n第二个字为阳的学生信息\nselect * from student where sname like \'_阳%\'\n\n查询所有不是姓刘的学生信息\nselect * from student where sname not like \'刘%\'\n\n->\"\\转移字符\"\n查询DB_design课程的课程号和学分\nselect cno ,ceredit from course where cname like \'DB\\_design\' escape  \'\\\'\n\n\'->涉及空值查询\n查询有成绩的学生信息\nselect * from sc where crade is not null\n\n->多条件查询\n查询是计算机系且年龄小于20的学生\nselect * from student where sage<20 and sdept =\'CS\'\n\n->order  by子句 desc 降序 默认: asc 升序\n查询选修了3号课程的学生信息并按成绩降序\nselect * from sc where cno=\'3\' order by grade desc\n\n->聚集函数 \"不能用于where 子句中\" 只能用于having 和group by子句,当遇到空值时 除了count(*) 其余都跳过而只处理非空值\n查询学生总人数\nselect count(*) from student\n\n查询选修了课程的学生人数\nselect count (distinct sno) from sc\n\n计算1号课程的学生平均成绩\nselect avg(grade) from sc where cno=\'1\'\n\n查询1号课程的学生最高分数\nselect max(grade) from sc where cno=\'1\'\n\n查询学生95001选修课程的总学分数\nselect sum(credit) from course,student where student.sno=\'95001\' and student.cno=course.cno\n\n->group by 子句  分组后聚簇函数将对于每一个组作用,即每个组都有一个函数值\n求各个课程号及相应选课人数\nselect cno,count(sno) from student group by cno\n\n查询选修了三门课以上的学生学号\nselect sno from sc group by sno having count(*) >3\n\n查询平均成绩大于90分的学生学号和平均成绩\nselect sno ,avg(grade) from sc group by sno having avg(grade)>90\n\n->连接查询 连接字段必须是可比的 \n查询每个学生及其选课情况\nselect student.* ,sc.* from student ,sc where student.sno =sc.sno\n\n->去掉重复属性列为自然连接\nselect student.sno,sname,sage,sdept,cno,sc.grade from student ,course where student.sno =sc.sno\n==>select student.sno,sname,sage,sdept,cno,sc.grade from student left outer join sc on(student.sno=sc.sno)\n\n查询选修2号课程且成绩在90分以上 的所有学生和学号\nselect studnet.sno ,sname from student ,sc where student.sno=sc.sno and sc.cno=\'2\' and sc.grade>90\n\n->自连接\n查询每一门课程的间接先修课-即先修课的先修课\nselect first.cno ,second.cpno from course first,course second where first.cpno=second.cno\n\n->嵌套查询\n查询学生选修课程2的学生姓名\nselect sname from student where sno in (select sno from sc where cno=\'2\')\n\n查询与刘晨在同一个系上学的学生\"查询结果不依赖于父查询->又称为不相关子查询\"\nselect * from student where sdept in (select sdept from student where sname=\'刘晨\')\n\n查询课程名为\'信息系统\' 的学生学号和姓名\"查询结果依赖于父查询->又称为相关子查询\"\nselect sname,sno from student where sno in (select sno from sc where cno in(select cno from course where cname=\'信息系统\'))\n\n找出每个学生超过他自己选修课程平均成绩的课程号\nselect sno,cno from sc x where grade >=(select avg(grade) from sc y where x.sno=y.sno)\n\n->带有any  all的子查询\n查询非计算机科学系中比计算机科学系任意一个学生年龄小的学生姓名和年龄\nselect sname,sage from student where sage<any(select sage from student where sdept=\'CS\') and sdept <> /!= \'CS\'\n\n查询非计算机科学系中比计算机科学系所有学生年龄小的学生姓名和年龄\nselect sname,sage from student where sage<all(select sage from student where sdept=\'CS\') and sdept <> /!= \'CS\'\n\n查询所有选修了1号课程的学生姓名\nselect sname from student  where exists (select * from sc where sno=student.sno adn cno=\'1\')\n\n查询没有一门课是他不选修的学生\nselect sname from student where not exists (select * from from course where  not exists (select cno from sc where sno=student.sno and cno=course.cno))\n\n查询至少选修了学生95001的全部课程的学生号码\nselect distinct sno from sc scx where not exists (\n    select * form  sc scy where scy.sno =\'95001\' and not exists(\n        select * from sc scz where scz.sno =scx.sno and scz.cno =scy.cno) )\n\n\n```\n', '', 0, '', '', 'http://111.229.114.126/upload/2020/2/u=3868937815,2912440064&fm=26&gp=0-a0c951d2a5064d56b22f370e0a67a193.jpg', '数据库查询', 0, 'databaseselect', 37, 0, NULL, NULL, 'databaseselect');
INSERT INTO `posts` VALUES (0, 23, '2020-01-07 18:14:29', 0, '2020-02-06 15:51:45', 0, 0, '2020-02-06 15:51:45', '<h4 id=\"插入\">插入</h4>\n<pre><code>insert into&lt;表名&gt; [&lt;属性列 1&gt;[,&lt;属性列2&gt;]...]values (&lt;常量1&gt;[,&lt;常量2&gt;]...)\n\n</code></pre>\n<h4 id=\"修改\">修改</h4>\n<pre><code>update &lt;表名&gt;\nset&lt;列名&gt;=属性值或者表达式,&lt;列名2&gt;=属性值或者表达式...\nwhere[条件]\n将学生95001的年龄设为22\nupdate student set age =22 where sno=\'95001\'\n将所有学生的年龄增加1\nupdate student set sage =sage+1\n\n</code></pre>\n<h4 id=\"删除\">删除</h4>\n<pre><code>delete from &lt;表名&gt; [where &lt;条件&gt;]\n\n删除一个元组的值\ndelete from student where sno=\'95001\'\n\n删除多个元组值\ndelete from sc\n\n带子查询的删除\ndelete from sc where sno in (select sno from student where sdept=\'cs\')\n\n</code></pre>\n', 0, '#### 插入\n```\ninsert into<表名> [<属性列 1>[,<属性列2>]...]values (<常量1>[,<常量2>]...)\n\n```\n\n\n#### 修改\n```\nupdate <表名>\nset<列名>=属性值或者表达式,<列名2>=属性值或者表达式...\nwhere[条件]\n将学生95001的年龄设为22\nupdate student set age =22 where sno=\'95001\'\n将所有学生的年龄增加1\nupdate student set sage =sage+1\n\n```\n\n\n\n\n#### 删除\n```\ndelete from <表名> [where <条件>]\n\n删除一个元组的值\ndelete from student where sno=\'95001\'\n\n删除多个元组值\ndelete from sc\n\n带子查询的删除\ndelete from sc where sno in (select sno from student where sdept=\'cs\')\n\n```\n\n\n\n\n', '', 0, '', '', 'http://111.229.114.126/upload/2020/2/u=3868937815,2912440064&fm=26&gp=0-a0c951d2a5064d56b22f370e0a67a193.jpg', '数据库插入修改删除', 0, 'databasedelete', 36, 0, NULL, NULL, 'databasedelete');
INSERT INTO `posts` VALUES (0, 24, '2020-01-08 21:10:27', 0, '2020-02-06 15:50:19', 0, 0, '2020-02-06 15:50:19', '<ol>\n<li><strong>什么是对象？什么是类？类和对象有什么关系？</strong></li>\n</ol>\n<ul>\n<li>\n<p>对象：是包含现实世界物体特征的抽象实体，它反映了系统为之保存信息和与他交互的能力，是一些属性和服务的封装体。（2分）</p>\n</li>\n<li>\n<p>类：是具有相同操作功能和相同的数据格式的==对象的集合与抽象==。（1分）</p>\n</li>\n<li>\n<p>关系：一个类是一类对象的描述，是构造对象的模板，对象是类的具体实例。（2分）</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li>\n<p><strong>Java类的访问控制符</strong></p>\n<ul>\n<li>\n<p>使用public修饰的外部类可以<strong>被所有类使用</strong></p>\n</li>\n<li>\n<p>protected：子类访问控制符。如果类的成员使用protected修饰符，那么类的成员既可以被<strong>同一个包中的其它类</strong>访问，也可以被<strong>不同包中的子类</strong>访问。</p>\n</li>\n<li>\n<p>default：包内访问控制符。如果外部类或类的成员使用default修饰符，那么外部类或类的成员可以<strong>被相同包内的其它类访问。</strong></p>\n</li>\n<li>\n<p>private：当前类访问控制符。如果类的成员使用private修饰符，则这个成员只能在<strong>当前类的内部被访问。</strong></p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>什么是异常</strong></p>\n<p>指的是程序在执行过程中，出现的非正常的情况，最终会导致JVM的非正常停止。</p>\n</li>\n<li>\n<p><strong>简述异常的处理机制</strong></p>\n<p>a.一种是严重的问题：java通过Error类进行描述。对于Error一般不编写针对性的代码进行处理。表示系统级的错误，是java运行环境中的内部错误或者硬件错误。例如：内存资源不足等，对于这种错误，程序无能为力，除了退出运行别无选择，它是由Java虚拟机抛出的==<strong>-&gt;运行时异常</strong>==。</p>\n<p>b.一种是非严重的问题：java通过Exception类进行描述。表示处理因为程序设计的瑕疵而引起的问题，或者在外的输入引起的问题，是程序必须处理的==-&gt;非运行时异常==。</p>\n</li>\n<li>\n<p><strong>什么是继承</strong></p>\n<p>继承是面向对象三大特征之一,java中的继承描述的是两个类之间的关系，被继承的类称为父类，继承的类成为子类</p>\n</li>\n<li>\n<p><strong>方法的覆盖和重载有什么不同</strong></p>\n<p>方法的重载是指一个类中可以有名字相同的多个方法，但这些方法的参数必须不同，或者是参数个数不同，或者是参数类型不同。返回值可以相同，也可以不同。（3分）</p>\n<p>方法覆盖是指子类不需要使用==父类继承来的方法==的功能，则子类可以重写父类已有的方法，重写时应保持和父类完全相同的方法名、返回值和参数列表。（2分）</p>\n</li>\n<li>\n<p><strong>Java异常处理机制进行错误处理有哪些优点？</strong></p>\n</li>\n</ol>\n<ul>\n<li>将错误处理代码从常规代码中分离出来；（1分）</li>\n<li>按错误类型和差别分组；（1分）</li>\n<li>对无法预测的错误的捕获和处理；（1分）</li>\n<li>克服了传统方法的错误信息有限的问题；（1分）</li>\n<li>把错误传播给调用堆栈。（1分）</li>\n</ul>\n<ol start=\"9\">\n<li>\n<p><strong>一般来说抽象类中都需要抽象方法，为什么</strong>？</p>\n<p>抽象方法可以隐藏具体的细节信息，使调用该方法的程序不必过分关注该类和它的子类的内部状况；（2分）</p>\n<p>抽象方法强迫子类完成指定的行为，抽象类的所有非抽象子类都必须完成其父类中声明的抽象方法，抽象类通常声明</p>\n<p>抽象方法规定其子类需要用到的“标准”行为。（3分）</p>\n</li>\n<li>\n<p><strong>列举Java中基本数据类型。</strong></p>\n<ul>\n<li>Int float double boolean char byte long short</li>\n</ul>\n</li>\n<li>\n<p><strong>列举构造方法的特点。</strong></p>\n<ul>\n<li>与类名同名。（1分）</li>\n<li>没有返回值，也不能定义为void（2分）</li>\n<li>一般是public，如果没有定义构造方法编译系统会自动生成无参构造方法（2分）</li>\n</ul>\n</li>\n<li>\n<p><strong>接口与抽象类有何区别？</strong></p>\n<ul>\n<li>接口的的方法都是抽象方法，抽象类中可以有具体访求。（3分）</li>\n<li>接口中要么没有数据成员要么就只能是常量数据成员，抽象类无此限制。（2分）</li>\n</ul>\n</li>\n<li>\n<p><strong>this和super分别有哪些特殊含义?有哪些特殊用法</strong></p>\n<ol>\n<li>\n<p>this:</p>\n<ul>\n<li>代替对象用于访问对象的数据(属性)</li>\n<li>调用本类的调用构造方法和其他方法</li>\n<li>作为返回值:需要返回一个对象时,在return里使用this</li>\n<li>this指针是一个隐含指针,指向调用该方法的当前对象</li>\n</ul>\n</li>\n<li>\n<p>super:</p>\n<ul>\n<li>在子类的成员变量中，访问父类的成员变量。</li>\n<li>在子类成员方法中, 访问父类的成员方法。</li>\n<li>在子类的构造方法中，访问父类的构造方法</li>\n<li>在子类方法中调用父类构造方法需放在第一行</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n', 0, '1. **什么是对象？什么是类？类和对象有什么关系？**\n\n- 对象：是包含现实世界物体特征的抽象实体，它反映了系统为之保存信息和与他交互的能力，是一些属性和服务的封装体。（2分）\n\n- 类：是具有相同操作功能和相同的数据格式的==对象的集合与抽象==。（1分）\n\n- 关系：一个类是一类对象的描述，是构造对象的模板，对象是类的具体实例。（2分）\n\n2. **Java类的访问控制符**\n\n   - 使用public修饰的外部类可以**被所有类使用**\n\n   - protected：子类访问控制符。如果类的成员使用protected修饰符，那么类的成员既可以被**同一个包中的其它类**访问，也可以被**不同包中的子类**访问。\n\n   - default：包内访问控制符。如果外部类或类的成员使用default修饰符，那么外部类或类的成员可以**被相同包内的其它类访问。**\n\n   - private：当前类访问控制符。如果类的成员使用private修饰符，则这个成员只能在**当前类的内部被访问。**\n\n3. **什么是异常**\n\n   指的是程序在执行过程中，出现的非正常的情况，最终会导致JVM的非正常停止。\n\n4. **简述异常的处理机制**\n\n   a.一种是严重的问题：java通过Error类进行描述。对于Error一般不编写针对性的代码进行处理。表示系统级的错误，是java运行环境中的内部错误或者硬件错误。例如：内存资源不足等，对于这种错误，程序无能为力，除了退出运行别无选择，它是由Java虚拟机抛出的==**->运行时异常**==。\n\n   b.一种是非严重的问题：java通过Exception类进行描述。表示处理因为程序设计的瑕疵而引起的问题，或者在外的输入引起的问题，是程序必须处理的==->非运行时异常==。\n\n5. **什么是继承**\n\n   继承是面向对象三大特征之一,java中的继承描述的是两个类之间的关系，被继承的类称为父类，继承的类成为子类\n\n6. **方法的覆盖和重载有什么不同**\n\n   方法的重载是指一个类中可以有名字相同的多个方法，但这些方法的参数必须不同，或者是参数个数不同，或者是参数类型不同。返回值可以相同，也可以不同。（3分）\n\n   方法覆盖是指子类不需要使用==父类继承来的方法==的功能，则子类可以重写父类已有的方法，重写时应保持和父类完全相同的方法名、返回值和参数列表。（2分）\n\n7. **Java异常处理机制进行错误处理有哪些优点？**\n\n- 将错误处理代码从常规代码中分离出来；（1分）\n- 按错误类型和差别分组；（1分）\n- 对无法预测的错误的捕获和处理；（1分）\n- 克服了传统方法的错误信息有限的问题；（1分）\n- 把错误传播给调用堆栈。（1分）\n\n9. **一般来说抽象类中都需要抽象方法，为什么**？\n\n   抽象方法可以隐藏具体的细节信息，使调用该方法的程序不必过分关注该类和它的子类的内部状况；（2分）\n\n   抽象方法强迫子类完成指定的行为，抽象类的所有非抽象子类都必须完成其父类中声明的抽象方法，抽象类通常声明\n\n   抽象方法规定其子类需要用到的“标准”行为。（3分）\n\n10. **列举Java中基本数据类型。**\n\n    - Int float double boolean char byte long short\n\n11. **列举构造方法的特点。**\n\n    - 与类名同名。（1分）\n    - 没有返回值，也不能定义为void（2分）\n    - 一般是public，如果没有定义构造方法编译系统会自动生成无参构造方法（2分）\n\n12. **接口与抽象类有何区别？**\n\n    - 接口的的方法都是抽象方法，抽象类中可以有具体访求。（3分）\n    - 接口中要么没有数据成员要么就只能是常量数据成员，抽象类无此限制。（2分）\n\n13. **this和super分别有哪些特殊含义?有哪些特殊用法**\n\n    1. this:\n       - 代替对象用于访问对象的数据(属性)\n       - 调用本类的调用构造方法和其他方法\n       - 作为返回值:需要返回一个对象时,在return里使用this\n       - this指针是一个隐含指针,指向调用该方法的当前对象\n\n    2. super:\n       - 在子类的成员变量中，访问父类的成员变量。\n       - 在子类成员方法中, 访问父类的成员方法。\n       - 在子类的构造方法中，访问父类的构造方法\n       - 在子类方法中调用父类构造方法需放在第一行', '', 0, '', '', 'http://111.229.114.126/upload/2020/2/u=3536793445,2882105203&fm=26&gp=0-1b8ecace7070400cabacdbfb1421b43f.jpg', 'Java简答题', 0, 'javaquestion', 66, 0, NULL, NULL, 'javaquestion');
INSERT INTO `posts` VALUES (0, 25, '2020-01-19 13:33:30', 0, '2020-04-15 10:11:36', 0, 0, '2020-04-15 10:11:36', '<p>结论是：在项目应用中，VO对应于页面上需要显示的数据（表单），DO对应于数据库中存储的数据（数据表），DTO对应于除二者之外需要进行传递的数据。</p>\n<p>一、实体类</p>\n<p>百度百科中对于实体类的定义如下：</p>\n<p>实体类的主要职责是存储和管理系统内部的信息，它也可以有行为，甚至很复杂的行为，但这些行为必须与它所代表的实体对象密切相关。</p>\n<p>根据以上定义，我们可以了解到，实体类有两方面内容，存储数据和执行数据本身相关的操作。这两方面内容对应到实现上，最简单的实体类是POJO类，含有属性及属性对应的set和get方法，实体类常见的方法还有用于输出自身数据的toString方法。</p>\n<p>二、领域模型中的实体类</p>\n<p>领域模型中的实体类分为四种类型：VO、DTO、DO、PO，各种实体类用于不同业务层次间的交互，并会在层次内实现实体类之间的转化。</p>\n<p>业务分层为：视图层（VIEW+ACTION），服务层（SERVICE），持久层（DAO）</p>\n<p>相应各层间实体的传递如下图</p>\n<p>项目中我们并没有严格遵循这种传递关系，但这种和业务层次的关联对我们理解各实体类的作用是有帮助的。（我们没有接触到PO的原因，我理解为ORM对PO进行了封装）</p>\n<p>以下是资料的原文，上图是基于此绘制的：</p>\n<p>概念：</p>\n<p>VO（View Object）：视图对象，用于展示层，它的作用是把某个指定页面（或组件）的所有数据封装起来。</p>\n<p>DTO（Data Transfer Object）：数据传输对象，这个概念来源于J2EE的设计模式，原来的目的是为了EJB的分布式应用提供粗粒度的数据实体，以减少分布式调用的次数，从而提高分布式调用的性能和降低网络负载，但在这里，我泛指用于展示层与服务层之间的数据传输对象。</p>\n<p>DO（Domain Object）：领域对象，就是从现实世界中抽象出来的有形或无形的业务实体。</p>\n<p>PO（Persistent Object）：持久化对象，它跟持久层（通常是关系型数据库）的数据结构形成一一对应的映射关系，如果持久层是关系型数据库，那么，数据表中的每个字段（或若干个）就对应PO的一个（或若干个）属性。</p>\n<p>模型：</p>\n<p>下面以一个时序图建立简单模型来描述上述对象在三层架构应用中的位置<br />\nl 用户发出请求（可能是填写表单），表单的数据在展示层被匹配为VO。</p>\n<p>l 展示层把VO转换为服务层对应方法所要求的DTO，传送给服务层。</p>\n<p>l 服务层首先根据DTO的数据构造（或重建）一个DO，调用DO的业务方法完成具体业务。</p>\n<p>l 服务层把DO转换为持久层对应的PO（可以使用ORM工具，也可以不用），调用持久层的持久化方法，把PO传递给它，完成持久化操作。</p>\n<p>l 对于一个逆向操作，如读取数据，也是用类似的方式转换和传递，略。</p>\n<p>三、项目中的实体类</p>\n<p>项目中常见的实体类有VO，DO和DTO，命名规则也常是以相应字符串结尾，如<em>VO.Java。但是DTO不总是遵循这个规则，而通常与他的用途有关，如写成</em>Query.Java，表示存储了一个查询条件。项目中实体类出现的业务层次也没有这么严格，例如我们可以在视图层就组装一个DO，也可以将一个VO从持久层传出来，所以与业务分层相关联的划分方法显得有些冗余。从项目代码中抽象出的理解是：VO对应于页面上需要显示的数据，DO对应于数据库中存储的数据，DTO对应于除二者之外需要进行传递的数据。</p>\n', 0, '结论是：在项目应用中，VO对应于页面上需要显示的数据（表单），DO对应于数据库中存储的数据（数据表），DTO对应于除二者之外需要进行传递的数据。\n\n一、实体类\n\n百度百科中对于实体类的定义如下：\n\n实体类的主要职责是存储和管理系统内部的信息，它也可以有行为，甚至很复杂的行为，但这些行为必须与它所代表的实体对象密切相关。\n\n根据以上定义，我们可以了解到，实体类有两方面内容，存储数据和执行数据本身相关的操作。这两方面内容对应到实现上，最简单的实体类是POJO类，含有属性及属性对应的set和get方法，实体类常见的方法还有用于输出自身数据的toString方法。\n\n二、领域模型中的实体类\n\n领域模型中的实体类分为四种类型：VO、DTO、DO、PO，各种实体类用于不同业务层次间的交互，并会在层次内实现实体类之间的转化。\n\n业务分层为：视图层（VIEW+ACTION），服务层（SERVICE），持久层（DAO）\n\n相应各层间实体的传递如下图\n\n项目中我们并没有严格遵循这种传递关系，但这种和业务层次的关联对我们理解各实体类的作用是有帮助的。（我们没有接触到PO的原因，我理解为ORM对PO进行了封装）\n\n以下是资料的原文，上图是基于此绘制的：\n\n概念：\n\nVO（View Object）：视图对象，用于展示层，它的作用是把某个指定页面（或组件）的所有数据封装起来。\n\nDTO（Data Transfer Object）：数据传输对象，这个概念来源于J2EE的设计模式，原来的目的是为了EJB的分布式应用提供粗粒度的数据实体，以减少分布式调用的次数，从而提高分布式调用的性能和降低网络负载，但在这里，我泛指用于展示层与服务层之间的数据传输对象。\n\nDO（Domain Object）：领域对象，就是从现实世界中抽象出来的有形或无形的业务实体。\n\nPO（Persistent Object）：持久化对象，它跟持久层（通常是关系型数据库）的数据结构形成一一对应的映射关系，如果持久层是关系型数据库，那么，数据表中的每个字段（或若干个）就对应PO的一个（或若干个）属性。\n\n模型：\n\n   下面以一个时序图建立简单模型来描述上述对象在三层架构应用中的位置\nl 用户发出请求（可能是填写表单），表单的数据在展示层被匹配为VO。\n\nl 展示层把VO转换为服务层对应方法所要求的DTO，传送给服务层。\n\nl 服务层首先根据DTO的数据构造（或重建）一个DO，调用DO的业务方法完成具体业务。\n\nl 服务层把DO转换为持久层对应的PO（可以使用ORM工具，也可以不用），调用持久层的持久化方法，把PO传递给它，完成持久化操作。\n\nl 对于一个逆向操作，如读取数据，也是用类似的方式转换和传递，略。\n\n三、项目中的实体类\n\n项目中常见的实体类有VO，DO和DTO，命名规则也常是以相应字符串结尾，如*VO.Java。但是DTO不总是遵循这个规则，而通常与他的用途有关，如写成*Query.Java，表示存储了一个查询条件。项目中实体类出现的业务层次也没有这么严格，例如我们可以在视图层就组装一个DO，也可以将一个VO从持久层传出来，所以与业务分层相关联的划分方法显得有些冗余。从项目代码中抽象出的理解是：VO对应于页面上需要显示的数据，DO对应于数据库中存储的数据，DTO对应于除二者之外需要进行传递的数据。', '', 0, '结论是：在项目应用中，VO对应于页面上需要显示的数据（表单），DO对应于数据库中存储的数据（数据表），DTO对应于除二者之外需要进行传递的数据。一、实体类百度百科中对于实体类的定义如下：实体类的主要职责是存储和管理系统内部的信息，它也可以有行为，甚至很复杂的行为，但这些行为必须与它所代表的实体对象密', '', 'http://111.229.114.126:8089/upload/2020/2/u=3573756467,3701343599&fm=26&gp=0-08b9a87439e54dc28c6463d6822a2805.jpg', 'VO，DO，DTO的概念和使用', 0, 'DOandDTOandVO', 66, 0, NULL, NULL, 'doanddtoandvo');
INSERT INTO `posts` VALUES (0, 26, '2020-02-06 15:22:12', 0, '2020-04-15 10:11:16', 0, 0, '2020-04-15 10:11:16', '<h3 id=\"immutablemap一个不可变集合\">ImmutableMap：一个不可变集合</h3>\n<p>java中的Immutable对象：</p>\n<p>简单地说，如果一个对象实例不能被更改就是一个Immutable的对象，Java SDK提供的大量值对象，比如String等都是Immutable的对象。</p>\n<p>创建ImmutableMap:</p>\n<pre><code>Map&lt;String,Object&gt; immutableMap = new ImmutableMap.Builder&lt;String,Object&gt;().build();\n\n</code></pre>\n<p>在创建时放值：</p>\n<pre><code>\nMap&lt;String,Object&gt; immutableMap = new ImmutableMap.Builder&lt;String,Object&gt;()\n    .put(&quot;k1&quot;,&quot;v1&quot;)\n    .put(&quot;k2&quot;,&quot;v2&quot;)\n    .build();\n</code></pre>\n<p>创建后不可变：</p>\n<pre><code>immutableMap.put(&quot;k1&quot;,&quot;v3&quot;);//会抛出java.lang.UnsupportedOperationException\n</code></pre>\n<p>ImmutableMap中key和value均不能为null，放入null值会抛出NPE</p>\n<p>ImmutableMap的使用场景：</p>\n<p>适合</p>\n<ol>\n<li>确定性的配置, 比如根据不同的key值得到不同的请求url</li>\n<li>写单元测试</li>\n</ol>\n<p>不适合</p>\n<ol>\n<li>key, value为未知参数, 可能有null产生的情况</li>\n</ol>\n', 0, '### ImmutableMap：一个不可变集合\njava中的Immutable对象：\n\n简单地说，如果一个对象实例不能被更改就是一个Immutable的对象，Java SDK提供的大量值对象，比如String等都是Immutable的对象。\n\n创建ImmutableMap:\n```\nMap<String,Object> immutableMap = new ImmutableMap.Builder<String,Object>().build();\n\n```\n\n在创建时放值：\n\n```\n\nMap<String,Object> immutableMap = new ImmutableMap.Builder<String,Object>()\n    .put(\"k1\",\"v1\")\n    .put(\"k2\",\"v2\")\n    .build();\n```\n\n创建后不可变：\n```\nimmutableMap.put(\"k1\",\"v3\");//会抛出java.lang.UnsupportedOperationException\n```\n\nImmutableMap中key和value均不能为null，放入null值会抛出NPE\n\nImmutableMap的使用场景：\n\n适合\n\n1. 确定性的配置, 比如根据不同的key值得到不同的请求url\n2. 写单元测试\n\n不适合\n\n1. key, value为未知参数, 可能有null产生的情况\n\n', '', 0, 'ImmutableMap：一个不可变集合java中的Immutable对象：简单地说，如果一个对象实例不能被更改就是一个Immutable的对象，JavaSDK提供的大量值对象，比如String等都是Immutable的对象。创建ImmutableMap:Map&lt;String,Object&g', '', 'http://111.229.114.126:8089/upload/2020/2/u=3573756467,3701343599&fm=26&gp=0-08b9a87439e54dc28c6463d6822a2805.jpg', 'ImmutableMap', 0, 'ImmutableMap', 61, 0, NULL, NULL, 'immutablemap');
INSERT INTO `posts` VALUES (0, 27, '2020-02-09 22:33:34', 0, '2020-04-15 10:10:54', 0, 0, '2020-04-15 10:10:54', '<p>今天介绍一下IDEA的一些炫酷的插件，IDEA强大的插件库，不仅能给我们带来一些开发的便捷，还能体现我们的与众不同。</p>\n<h3 id=\"插件安装\">插件安装</h3>\n<h3 id=\"各种插件\">各种插件</h3>\n<ol>\n<li>\n<p>activate-power-mode 和 Power mode II</p>\n<p>根据Atom的插件activate-power-mode的效果移植到IDEA上</p>\n<p>写代码是整个屏幕都在抖动，activate-power-mode是白的的，Power mode II色彩更酷炫点。</p>\n</li>\n<li>\n<p>Background Image Plus</p>\n<p>idea背景修改插件，让你的idea与众不同，可以设置自己喜欢的图片作为code背景。</p>\n<p>安装成功之后重启，菜单栏的VIew标签&gt;点击Set Background Image(没安装插件是没有这个标签的)，在弹框中路由选择到本地图片，点击OK即可。</p>\n</li>\n<li>\n<p>Grep console</p>\n<p>自定义日志颜色，idea控制台可以彩色显示各种级别的log，安装完成后，在console中右键就能打开。</p>\n<p>并且可以设置不同的日志级别的显示样式。</p>\n<p>可以直接根据关键字搜索你想要的，搜索条件是支持正则表达式的。官网地址</p>\n<p><a href=\"https://plugins.jetbrains.com/idea/plugin/7125-grep-console\">https://plugins.jetbrains.com/idea/plugin/7125-grep-console</a></p>\n</li>\n<li>\n<p>Free Mybatis plugin</p>\n<p>mybatis 插件，让你的mybatis.xml像java代码一样编辑。我们开发中使用mybatis时时长需要通过mapper接口查找对应的xml中的sql语句，该插件方便了我们的操作。</p>\n<p>安装完成重启IDEA之后，我们会看到code左侧或多出一列绿色的箭头，点击箭头我们就可以直接定位到xml相应文件的位置。</p>\n<p>mapper</p>\n</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/20190408111052416.png\" alt=\"mapper\" /></p>\n<p>​		xml</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190408111107597.png\" alt=\"xml\" /></p>\n<ol start=\"5\">\n<li>\n<p>MyBatis Log Plugin</p>\n<p>Mybatis现在是java中操作数据库的首选，在开发的时候，我们都会把Mybatis的脚本直接输出在console中，但是默认的情况下，输出的脚本不是一个可以直接执行的。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190408111123402.png\" alt=\"\" /></p>\n<p>如果我们想直接执行，还需要在手动转化一下。</p>\n<p>MyBatis Log Plugin 这款插件是直接将Mybatis执行的sql脚本显示出来，无需处理，可以直接复制出来执行的，如图：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190408111137891.png\" alt=\"\" /></p>\n<p>执行程序后，我们可以很清晰的看到我们执行了哪些sql脚本，而且脚本可以执行拿出来运行。</p>\n</li>\n<li>\n<p>String Manipulation</p>\n<p>强大的字符串转换工具。使用快捷键，Alt+m。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190408111154893.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTY3MDM5,size_16,color_FFFFFF,t_70\" alt=\"\" /></p>\n<p>切换样式（camelCase, hyphen-lowercase, HYPHEN-UPPERCASE, snake_case, SCREAMING_SNAKE_CASE, dot.case, words lowercase, Words Capitalized, PascalCase）</p>\n<ul>\n<li>\n<p>转换为SCREAMING_SNAKE_CASE (或转换为camelCase)</p>\n</li>\n<li>\n<p>转换为 snake_case (或转换为camelCase)</p>\n</li>\n<li>\n<p>转换为dot.case (或转换为camelCase)</p>\n</li>\n<li>\n<p>转换为hyphen-case (或转换为camelCase)</p>\n</li>\n<li>\n<p>转换为hyphen-case (或转换为snake_case)</p>\n</li>\n<li>\n<p>转换为camelCase (或转换为Words)</p>\n</li>\n<li>\n<p>转换为camelCase (或转换为lowercase words)</p>\n</li>\n<li>\n<p>转换为PascalCase (或转换为camelCase)</p>\n<p>选定文本大写</p>\n<p>样式反转</p>\n</li>\n</ul>\n</li>\n<li>\n<p>Alibaba Java Coding Guidelines</p>\n<p>阿里巴巴代码规范检查插件，当然规范可以参考《阿里巴巴Java开发手册》。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190408111210770.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTY3MDM5,size_16,color_FFFFFF,t_70\" alt=\"\" /></p>\n</li>\n<li>\n<p>Lombok</p>\n<p>Java语言，每次写实体类的时候都需要写一大堆的setter，getter，如果bean中的属性一旦有修改、删除或增加时，需要重新生成或删除get/set等方法，给代码维护增加负担，这也是Java被诟病的一种原因。</p>\n<p>Lombok则为我们解决了这些问题，使用了lombok的注解(@Setter,@Getter,@ToString,@@RequiredArgsConstructor,@EqualsAndHashCode或@Data)之后，就不需要编写或生成get/set等方法，很大程度上减少了代码量，而且减少了代码维护的负担。</p>\n<p>安装完成之后，在应用Lombok的时候注意别忘了需要添加依，maven为例：</p>\n<pre><code class=\"language-xml\">&lt;dependency&gt;  \n          &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;  \n          &lt;artifactId&gt;lombok&lt;/artifactId&gt;   \n&lt;/dependency&gt;	\n</code></pre>\n<pre><code class=\"language-java\">@Setter\n@Getter\n@ToString\n@EqualsAndHashCode\npublic class People {\n    private String name;\n    private int age;\n    private String male;\n}\n</code></pre>\n</li>\n<li>\n<p>Key promoter</p>\n<p>Key promoter 是IntelliJ IDEA的快捷键提示插件，会统计你鼠标点击某个功能的次数，提示你应该用什么快捷键，帮助记忆快捷键，等熟悉了之后可以关闭掉这个插件。</p>\n</li>\n<li>\n<p>Gsonformat</p>\n<p>可根据json数据快速生成java实体类。</p>\n<p>自定义个javaBean(无任何内容，就一个空的类)，复制你要解析的Json，然后alt+insert弹出如下界面或者使用快捷键 Alt+S，在里面粘贴刚刚复制的Json，点击OK即可。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190408111253652.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>Restfultookit</p>\n<p>Spring MVC网页开发的时候，我们都是通过requestmapping的方式来定义页面的URL地址的，为了找到这个地址我们一般都是cmd+shift+F的方式进行查找，大家都知道，我们URL的命名一个是类requestmapping+方法requestmapping，查找的时候还是有那么一点不方便的，restfultookit就能很方便的帮忙进行查找。</p>\n<p>例如：我要找到/user/add 对应的controller,那么只要Ctrl+斜杠 ,（图片来自于网络）</p>\n</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/20190408111322532.png\" alt=\"\" /></p>\n<pre><code>就能直接定位到我们想要的controller。这个也是真心方便，当然restfultookit还为我们提供的其他的功能。根据我们的controller帮我们生成默认的测试数据，还能直接调用测试，这个可以是解决了我们每次postman调试数据时，自己傻傻的组装数据的的操作，这个更加清晰，比在console找数据包要方便多了。（图片来自于网络）\n</code></pre>\n<ol start=\"12\">\n<li>\n<p>JRebel</p>\n<p>JRebel是一种热部署生产力工具，修改代码后不用重新启动程序，所有的更改便可以生效。它跳过了Java开发中常见的重建、重新启动和重新部署周期。<br />\n使用方式参考此处:<br />\n<a href=\"https://jingyan.baidu.com/article/ac6a9a5e31417c2b653eace8.html\">https://jingyan.baidu.com/article/ac6a9a5e31417c2b653eace8.html</a></p>\n</li>\n</ol>\n<h3 id=\"常用插件推荐\">常用插件推荐</h3>\n<pre><code>注：微信不支持外链，如需打开请自行复制链接\n</code></pre>\n<ol>\n<li>\n<p>Gitee<br />\n开源中国的码云插件<br />\n<a href=\"https://plugins.jetbrains.com/plugin/8383-gitee\">https://plugins.jetbrains.com/plugin/8383-gitee</a></p>\n</li>\n<li>\n<p>Alibaba Java Coding Guidelines<br />\n阿里巴巴出的代码规范检查插件<br />\n<a href=\"https://plugins.jetbrains.com/plugin/10046-alibaba-java-coding-guidelines\">https://plugins.jetbrains.com/plugin/10046-alibaba-java-coding-guidelines</a></p>\n</li>\n<li>\n<p>IDE Features Trainer<br />\nIntelliJ IDEA 官方出的学习辅助插件<br />\n<a href=\"https://plugins.jetbrains.com/plugin/8554?pr=idea\">https://plugins.jetbrains.com/plugin/8554?pr=idea</a></p>\n</li>\n<li>\n<p>Key promoter<br />\n快捷键提示<br />\n<a href=\"https://plugins.jetbrains.com/plugin/4455?pr=idea\">https://plugins.jetbrains.com/plugin/4455?pr=idea</a></p>\n</li>\n<li>\n<p>Grep Console<br />\n自定义设置控制台输出颜色<br />\n<a href=\"https://plugins.jetbrains.com/idea/plugin/7125-grep-console\">https://plugins.jetbrains.com/idea/plugin/7125-grep-console</a></p>\n</li>\n<li>\n<p>String Manipulation<br />\n驼峰式命名和下划线命名交替变化<br />\n<a href=\"https://plugins.jetbrains.com/plugin/2162?pr=idea\">https://plugins.jetbrains.com/plugin/2162?pr=idea</a></p>\n</li>\n<li>\n<p>CheckStyle-IDEA<br />\n代码规范检查<br />\n<a href=\"https://plugins.jetbrains.com/plugin/1065?pr=idea\">https://plugins.jetbrains.com/plugin/1065?pr=idea</a></p>\n</li>\n<li>\n<p>FindBugs-IDEA<br />\n潜在 Bug 检查<br />\n<a href=\"https://plugins.jetbrains.com/plugin/3847?pr=idea\">https://plugins.jetbrains.com/plugin/3847?pr=idea</a></p>\n</li>\n<li>\n<p>MetricsReloaded<br />\n代码复杂度检查<br />\n<a href=\"https://plugins.jetbrains.com/plugin/93?pr=idea\">https://plugins.jetbrains.com/plugin/93?pr=idea</a></p>\n</li>\n<li>\n<p>Statistic<br />\n代码统计<br />\n<a href=\"https://plugins.jetbrains.com/plugin/4509?pr=idea\">https://plugins.jetbrains.com/plugin/4509?pr=idea</a></p>\n</li>\n<li>\n<p>JRebel Plugin<br />\n热部署<br />\n<a href=\"https://plugins.jetbrains.com/plugin/?id=4441\">https://plugins.jetbrains.com/plugin/?id=4441</a></p>\n</li>\n<li>\n<p>CodeGlance<br />\n在编辑代码最右侧，显示一块代码小地图<br />\n<a href=\"https://plugins.jetbrains.com/plugin/7275?pr=idea\">https://plugins.jetbrains.com/plugin/7275?pr=idea</a></p>\n</li>\n<li>\n<p>GsonFormat<br />\n把 JSON 字符串直接实例化成类<br />\n<a href=\"https://plugins.jetbrains.com/plugin/7654?pr=idea\">https://plugins.jetbrains.com/plugin/7654?pr=idea</a></p>\n</li>\n<li>\n<p>Markdown Navigator<br />\n书写 Markdown 文章<br />\n<a href=\"https://plugins.jetbrains.com/plugin/7896?pr=idea\">https://plugins.jetbrains.com/plugin/7896?pr=idea</a></p>\n</li>\n<li>\n<p>Eclipse Code Formatter<br />\n使用 Eclipse 的代码格式化风格，在一个团队中如果公司有规定格式化风格，这个可以使用。<br />\n<a href=\"https://plugins.jetbrains.com/plugin/6546?pr=idea\">https://plugins.jetbrains.com/plugin/6546?pr=idea</a></p>\n</li>\n<li>\n<p>Jindent-Source Code Formatter<br />\n自定义类、方法、doc、变量注释模板<br />\n<a href=\"http://plugins.jetbrains.com/plugin/2170?pr=idea\">http://plugins.jetbrains.com/plugin/2170?pr=idea</a></p>\n</li>\n<li>\n<p>Translation<br />\n翻译插件<br />\n<a href=\"https://github.com/YiiGuxing/TranslationPlugin\">https://github.com/YiiGuxing/TranslationPlugin</a></p>\n</li>\n<li>\n<p>Maven Helper<br />\nMaven 辅助插件<br />\n<a href=\"https://plugins.jetbrains.com/plugin/7179-maven-helper\">https://plugins.jetbrains.com/plugin/7179-maven-helper</a></p>\n</li>\n<li>\n<p>Properties to YAML Converter<br />\n把 Properties 的配置格式改为 YAML 格式<br />\n<a href=\"https://plugins.jetbrains.com/plugin/8000-properties-to-yaml-converter\">https://plugins.jetbrains.com/plugin/8000-properties-to-yaml-converter</a></p>\n</li>\n<li>\n<p>Git Flow Integration<br />\nGit Flow 的图形界面操作<br />\n<a href=\"https://plugins.jetbrains.com/plugin/7315-git-flow-integration\">https://plugins.jetbrains.com/plugin/7315-git-flow-integration</a></p>\n</li>\n<li>\n<p>Rainbow Brackets<br />\n对各个对称括号进行着色，方便查看<br />\n<a href=\"https://github.com/izhangzhihao/intellij-rainbow-brackets\">https://github.com/izhangzhihao/intellij-rainbow-brackets</a></p>\n</li>\n<li>\n<p>MybatisX<br />\nmybatis 框架辅助（免费）<br />\n<a href=\"https://plugins.jetbrains.com/plugin/10119-mybatisx\">https://plugins.jetbrains.com/plugin/10119-mybatisx</a></p>\n</li>\n<li>\n<p>Lombok Plugin<br />\nLombok 功能辅助插件<br />\n<a href=\"https://plugins.jetbrains.com/plugin/6317-lombok-plugin\">https://plugins.jetbrains.com/plugin/6317-lombok-plugin</a></p>\n</li>\n<li>\n<p>.ignore<br />\n各类版本控制忽略文件生成工具<br />\n<a href=\"https://plugins.jetbrains.com/plugin/7495--ignore\">https://plugins.jetbrains.com/plugin/7495--ignore</a></p>\n</li>\n<li>\n<p>mongo4idea<br />\nmongo客户端<br />\n<a href=\"https://github.com/dboissier/mongo4idea\">https://github.com/dboissier/mongo4idea</a></p>\n</li>\n<li>\n<p>iedis<br />\nredis客户端<br />\n<a href=\"https://plugins.jetbrains.com/plugin/9228-iedis\">https://plugins.jetbrains.com/plugin/9228-iedis</a></p>\n</li>\n<li>\n<p>GenerateAllSetter<br />\nnew POJO类的快速生成 set 方法<br />\n<a href=\"https://plugins.jetbrains.com/plugin/9360-generateallsetter\">https://plugins.jetbrains.com/plugin/9360-generateallsetter</a></p>\n</li>\n</ol>\n', 0, '今天介绍一下IDEA的一些炫酷的插件，IDEA强大的插件库，不仅能给我们带来一些开发的便捷，还能体现我们的与众不同。\n\n###  插件安装\n\n###  各种插件\n\n1. activate-power-mode 和 Power mode II\n\n   根据Atom的插件activate-power-mode的效果移植到IDEA上\n\n   写代码是整个屏幕都在抖动，activate-power-mode是白的的，Power mode II色彩更酷炫点。\n\n2. Background Image Plus\n\n   idea背景修改插件，让你的idea与众不同，可以设置自己喜欢的图片作为code背景。\n\n   安装成功之后重启，菜单栏的VIew标签>点击Set Background Image(没安装插件是没有这个标签的)，在弹框中路由选择到本地图片，点击OK即可。\n\n3. Grep console\n\n   自定义日志颜色，idea控制台可以彩色显示各种级别的log，安装完成后，在console中右键就能打开。\n\n   并且可以设置不同的日志级别的显示样式。\n\n   可以直接根据关键字搜索你想要的，搜索条件是支持正则表达式的。官网地址\n\n   https://plugins.jetbrains.com/idea/plugin/7125-grep-console\n\n4. Free Mybatis plugin\n\n   mybatis 插件，让你的mybatis.xml像java代码一样编辑。我们开发中使用mybatis时时长需要通过mapper接口查找对应的xml中的sql语句，该插件方便了我们的操作。\n\n   安装完成重启IDEA之后，我们会看到code左侧或多出一列绿色的箭头，点击箭头我们就可以直接定位到xml相应文件的位置。\n\n   mapper\n\n![mapper](https://img-blog.csdnimg.cn/20190408111052416.png)\n\n​		xml\n\n![xml](https://img-blog.csdnimg.cn/20190408111107597.png)\n\n5. MyBatis Log Plugin\n\n   Mybatis现在是java中操作数据库的首选，在开发的时候，我们都会把Mybatis的脚本直接输出在console中，但是默认的情况下，输出的脚本不是一个可以直接执行的。\n\n   ![](https://img-blog.csdnimg.cn/20190408111123402.png)\n\n   如果我们想直接执行，还需要在手动转化一下。\n\n   MyBatis Log Plugin 这款插件是直接将Mybatis执行的sql脚本显示出来，无需处理，可以直接复制出来执行的，如图：\n\n   ![](https://img-blog.csdnimg.cn/20190408111137891.png)\n\n   执行程序后，我们可以很清晰的看到我们执行了哪些sql脚本，而且脚本可以执行拿出来运行。\n\n6. String Manipulation\n\n   强大的字符串转换工具。使用快捷键，Alt+m。\n\n   ![](https://img-blog.csdnimg.cn/20190408111154893.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTY3MDM5,size_16,color_FFFFFF,t_70)\n\n   切换样式（camelCase, hyphen-lowercase, HYPHEN-UPPERCASE, snake_case, SCREAMING_SNAKE_CASE, dot.case, words lowercase, Words Capitalized, PascalCase）\n\n   - 转换为SCREAMING_SNAKE_CASE (或转换为camelCase)\n\n   - 转换为 snake_case (或转换为camelCase)\n\n   - 转换为dot.case (或转换为camelCase)\n\n   - 转换为hyphen-case (或转换为camelCase)\n\n   - 转换为hyphen-case (或转换为snake_case)\n\n   - 转换为camelCase (或转换为Words)\n\n   - 转换为camelCase (或转换为lowercase words)\n\n   - 转换为PascalCase (或转换为camelCase)\n\n     选定文本大写\n\n     样式反转\n\n7. Alibaba Java Coding Guidelines\n\n   阿里巴巴代码规范检查插件，当然规范可以参考《阿里巴巴Java开发手册》。\n\n   ![](https://img-blog.csdnimg.cn/20190408111210770.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTY3MDM5,size_16,color_FFFFFF,t_70)\n\n8. Lombok\n\n   Java语言，每次写实体类的时候都需要写一大堆的setter，getter，如果bean中的属性一旦有修改、删除或增加时，需要重新生成或删除get/set等方法，给代码维护增加负担，这也是Java被诟病的一种原因。\n\n   Lombok则为我们解决了这些问题，使用了lombok的注解(@Setter,@Getter,@ToString,@@RequiredArgsConstructor,@EqualsAndHashCode或@Data)之后，就不需要编写或生成get/set等方法，很大程度上减少了代码量，而且减少了代码维护的负担。\n\n   安装完成之后，在应用Lombok的时候注意别忘了需要添加依，maven为例：\n\n   ```xml\n   <dependency>  \n             <groupId>org.projectlombok</groupId>  \n             <artifactId>lombok</artifactId>   \n   </dependency>	\n   ```\n\n   ```java\n   @Setter\n   @Getter\n   @ToString\n   @EqualsAndHashCode\n   public class People {\n       private String name;\n       private int age;\n       private String male;\n   }\n   ```\n\n   \n\n9. Key promoter\n\n   Key promoter 是IntelliJ IDEA的快捷键提示插件，会统计你鼠标点击某个功能的次数，提示你应该用什么快捷键，帮助记忆快捷键，等熟悉了之后可以关闭掉这个插件。\n\n10. Gsonformat\n\n    可根据json数据快速生成java实体类。\n\n    自定义个javaBean(无任何内容，就一个空的类)，复制你要解析的Json，然后alt+insert弹出如下界面或者使用快捷键 Alt+S，在里面粘贴刚刚复制的Json，点击OK即可。\n\n    ![](https://img-blog.csdnimg.cn/20190408111253652.png)\n\n11. Restfultookit\n\n    Spring MVC网页开发的时候，我们都是通过requestmapping的方式来定义页面的URL地址的，为了找到这个地址我们一般都是cmd+shift+F的方式进行查找，大家都知道，我们URL的命名一个是类requestmapping+方法requestmapping，查找的时候还是有那么一点不方便的，restfultookit就能很方便的帮忙进行查找。\n\n    例如：我要找到/user/add 对应的controller,那么只要Ctrl+斜杠 ,（图片来自于网络）\n\n![](https://img-blog.csdnimg.cn/20190408111322532.png)\n\n    就能直接定位到我们想要的controller。这个也是真心方便，当然restfultookit还为我们提供的其他的功能。根据我们的controller帮我们生成默认的测试数据，还能直接调用测试，这个可以是解决了我们每次postman调试数据时，自己傻傻的组装数据的的操作，这个更加清晰，比在console找数据包要方便多了。（图片来自于网络）\n\n12. JRebel\n\n    JRebel是一种热部署生产力工具，修改代码后不用重新启动程序，所有的更改便可以生效。它跳过了Java开发中常见的重建、重新启动和重新部署周期。\n    使用方式参考此处:\n    https://jingyan.baidu.com/article/ac6a9a5e31417c2b653eace8.html\n\n    \n\n### 常用插件推荐\n\n    注：微信不支持外链，如需打开请自行复制链接\n\n1. Gitee \n   开源中国的码云插件 \n   https://plugins.jetbrains.com/plugin/8383-gitee\n\n2. Alibaba Java Coding Guidelines \n   阿里巴巴出的代码规范检查插件 \n   https://plugins.jetbrains.com/plugin/10046-alibaba-java-coding-guidelines\n\n3. IDE Features Trainer \n   IntelliJ IDEA 官方出的学习辅助插件 \n   https://plugins.jetbrains.com/plugin/8554?pr=idea\n\n4. Key promoter \n   快捷键提示 \n   https://plugins.jetbrains.com/plugin/4455?pr=idea\n\n5. Grep Console \n   自定义设置控制台输出颜色 \n   https://plugins.jetbrains.com/idea/plugin/7125-grep-console\n\n6. String Manipulation \n   驼峰式命名和下划线命名交替变化 \n   https://plugins.jetbrains.com/plugin/2162?pr=idea\n\n7. CheckStyle-IDEA \n   代码规范检查 \n   https://plugins.jetbrains.com/plugin/1065?pr=idea\n\n8. FindBugs-IDEA \n   潜在 Bug 检查 \n   https://plugins.jetbrains.com/plugin/3847?pr=idea\n\n9. MetricsReloaded \n   代码复杂度检查 \n   https://plugins.jetbrains.com/plugin/93?pr=idea\n\n10. Statistic \n    代码统计 \n    https://plugins.jetbrains.com/plugin/4509?pr=idea\n\n11. JRebel Plugin \n    热部署 \n    https://plugins.jetbrains.com/plugin/?id=4441\n\n12. CodeGlance \n    在编辑代码最右侧，显示一块代码小地图 \n    https://plugins.jetbrains.com/plugin/7275?pr=idea\n\n13. GsonFormat \n    把 JSON 字符串直接实例化成类 \n    https://plugins.jetbrains.com/plugin/7654?pr=idea\n\n14. Markdown Navigator \n    书写 Markdown 文章 \n    https://plugins.jetbrains.com/plugin/7896?pr=idea\n\n15. Eclipse Code Formatter \n    使用 Eclipse 的代码格式化风格，在一个团队中如果公司有规定格式化风格，这个可以使用。 \n    https://plugins.jetbrains.com/plugin/6546?pr=idea\n\n16. Jindent-Source Code Formatter \n    自定义类、方法、doc、变量注释模板 \n    http://plugins.jetbrains.com/plugin/2170?pr=idea\n\n17. Translation \n    翻译插件 \n    https://github.com/YiiGuxing/TranslationPlugin\n\n18. Maven Helper \n    Maven 辅助插件 \n    https://plugins.jetbrains.com/plugin/7179-maven-helper\n\n19. Properties to YAML Converter \n    把 Properties 的配置格式改为 YAML 格式 \n    https://plugins.jetbrains.com/plugin/8000-properties-to-yaml-converter\n\n20. Git Flow Integration \n    Git Flow 的图形界面操作 \n    https://plugins.jetbrains.com/plugin/7315-git-flow-integration\n\n21. Rainbow Brackets \n    对各个对称括号进行着色，方便查看 \n    https://github.com/izhangzhihao/intellij-rainbow-brackets\n\n22. MybatisX \n    mybatis 框架辅助（免费） \n    https://plugins.jetbrains.com/plugin/10119-mybatisx\n\n23. Lombok Plugin \n    Lombok 功能辅助插件 \n    https://plugins.jetbrains.com/plugin/6317-lombok-plugin\n\n24. .ignore \n    各类版本控制忽略文件生成工具 \n    https://plugins.jetbrains.com/plugin/7495--ignore\n\n25. mongo4idea \n    mongo客户端 \n    https://github.com/dboissier/mongo4idea\n\n26. iedis \n    redis客户端 \n    https://plugins.jetbrains.com/plugin/9228-iedis\n\n27. GenerateAllSetter \n    new POJO类的快速生成 set 方法 \n    https://plugins.jetbrains.com/plugin/9360-generateallsetter', '', 0, '今天介绍一下IDEA的一些炫酷的插件，IDEA强大的插件库，不仅能给我们带来一些开发的便捷，还能体现我们的与众不同。插件安装各种插件activate-power-mode和PowermodeII根据Atom的插件activate-power-mode的效果移植到IDEA上写代码是整个屏幕都在抖动，a', '', 'http://111.229.114.126:8089/upload/2020/2/u=3795141063,2338690031&fm=26&gp=0-b7e737f80a7a488b9b5ae5e362d6fd59.jpg', 'IDEA 插件集合', 0, 'IDEA 插件集合', 39, 0, NULL, NULL, 'idea插件集合');
INSERT INTO `posts` VALUES (0, 28, '2020-02-19 23:58:24', 0, '2020-04-15 10:10:21', 0, 0, '2020-04-15 10:10:21', '<h3 id=\"时间和字符传的转化\">时间和字符传的转化</h3>\n<ol>\n<li>\n<p>日期转为字符串</p>\n<pre><code class=\"language-java\">import java.text.SimpleDateFormat;\nimport java.util.Date;\n\npublic class Test01 {\n    public static void main(String[] args) {\n        Date date = new Date(); //获取当前时间\n        System.out.println(date.getClass().getName());  //打印date数据类型\n        System.out.println(date);           //打印当前时间\n        SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);\n        String format = sdf.format(date);       //将Date类型转换成String类型   \n        System.out.println(format.getClass().getName());//打印format数据类型\n        System.out.println(format);　　　　　　　　　　　　//打印当前时间\n    }\n}\n\n\n结果：\njava.util.Date\nTue Dec 26 19:31:48 CST 2017\njava.lang.String\n2017-12-26 19:31:48\n</code></pre>\n<ol start=\"2\">\n<li>字符串转为日期</li>\n</ol>\n<pre><code class=\"language-java\">import java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\n\npublic class Test01 {\n   public static void main(String[] args) {\n       String time = &quot;1994-11-24 07:11:24&quot;;   \n       SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);\n       try {\n           Date date = sdf.parse(time);\n           System.out.println(date);\n       } catch (ParseException e) {\n           // TODO Auto-generated catch block\n           e.printStackTrace();\n       }\n   }\n}	\n\n结果：\nThu Nov 24 07:11:24 CST 1994\n</code></pre>\n<ol start=\"3\">\n<li>对日期加减操作, 获得之前, 之后的时间</li>\n</ol>\n<pre><code class=\"language-java\">import java.text.SimpleDateFormat;\nimport java.util.Date;\n\npublic class DateTest {\n    public static void main(String[] args) {\n        SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);\n        Date date = new Date();\n        long dateTime = date.getTime(); //将date类型转换成long类型进行计算\n        System.out.println(sdf.format(date));   //以字符串打印当前时间\n\n        long time = (60*60+5)*1000;     //60个60分钟加5分钟，乘以1000，一小时零五分转换成毫秒\n        dateTime = dateTime + time;     //将当前时间加上一小时零五分\n        System.out.println(sdf.format(new Date(dateTime))); //打印一小时零五分之后的时间\n    }\n\n}\n\n结果：\n2018-01-07 08:52:21\n2018-01-07 09:52:26	\n</code></pre>\n<h3 id=\"时间和数字的转化\">时间和数字的转化</h3>\n<pre><code class=\"language-java\">package com.drew.utils;\n\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\n\n/**\n * long类型数字转换成时分秒毫秒格式\n *\n * @author Iszychen 2020/02/19\n */\npublic class ConvertorTime {\n\n    public static void main(String[] args) {\n        int seconds = 17854, msec = 360000;// 秒，毫秒\n        System.out.println(secToTime(seconds));\n        System.out.println(msec + &quot;毫秒转换格式时间：\\t&quot; + msecToTime(msec));\n        System.out.println(&quot;当前时间（时:分：秒.毫秒）\\t&quot; + new SimpleDateFormat(&quot;HH:mm:ss.SSS&quot;).format(new Date()));\n    }\n\n    /**\n     * 秒转换小时-分-秒analytics/util/DateUtil.java\n     *\n     * @param seconds 秒为单位 比如..600秒\n     * @return 比如...2小时3分钟52秒\n     */\n    public static String secToTime(int seconds) {\n        int hour = seconds / 3600;\n        int minute = (seconds - hour * 3600) / 60;\n        int second = (seconds - hour * 3600 - minute * 60);\n\n        StringBuffer sb = new StringBuffer();\n        if (hour &gt; 0) {\n            sb.append(hour + &quot;小时&quot;);\n        }\n        if (minute &gt; 0) {\n            sb.append(minute + &quot;分&quot;);\n        }\n        if (second &gt; 0) {\n            sb.append(second + &quot;秒&quot;);\n        }\n        if (second == 0) {\n            sb.append(&quot;&lt;1秒&quot;);\n        }\n        return sb.toString();\n    }\n\n    /**\n     * 将int类型数字转换成时分秒毫秒的格式数据\n     *\n     * @param time long类型的数据\n     * @return HH:mm:ss.SSS\n     * @author Iszychen 2020/02/19\n     */\n    public static String msecToTime(int time) {\n        String timeStr = null;\n        int hour = 0;\n        int minute = 0;\n        int second = 0;\n        int millisecond = 0;\n        if (time &lt;= 0)\n            return &quot;00:00:00.000&quot;;\n        else {\n            second = time / 1000;\n            minute = second / 60;\n            millisecond = time % 1000;\n            if (second &lt; 60) {\n                timeStr = &quot;00:00:&quot; + unitFormat(second) + &quot;.&quot; + unitFormat2(millisecond);\n            } else if (minute &lt; 60) {\n                second = second % 60;\n                timeStr = &quot;00:&quot; + unitFormat(minute) + &quot;:&quot; + unitFormat(second) + &quot;.&quot; + unitFormat2(millisecond);\n            } else {// 数字&gt;=3600 000的时候\n                hour = minute / 60;\n                minute = minute % 60;\n                second = second - hour * 3600 - minute * 60;\n                timeStr = unitFormat(hour) + &quot;:&quot; + unitFormat(minute) + &quot;:&quot; + unitFormat(second) + &quot;.&quot;\n                    + unitFormat2(millisecond);\n            }\n        }\n        return timeStr;\n    }\n\n    public static String unitFormat(int i) {// 时分秒的格式转换\n        String retStr = null;\n        if (i &gt;= 0 &amp;&amp; i &lt; 10)\n            retStr = &quot;0&quot; + Integer.toString(i);\n        else\n            retStr = &quot;&quot; + i;\n        return retStr;\n    }\n\n    public static String unitFormat2(int i) {// 毫秒的格式转换\n        String retStr = null;\n        if (i &gt;= 0 &amp;&amp; i &lt; 10)\n            retStr = &quot;00&quot; + Integer.toString(i);\n        else if (i &gt;= 10 &amp;&amp; i &lt; 100) {\n            retStr = &quot;0&quot; + Integer.toString(i);\n        } else\n            retStr = &quot;&quot; + i;\n        return retStr;\n    }\n\n}	\n</code></pre>\n<h6 id=\"可转为工具类测试结果\">可转为工具类=&gt;测试结果</h6>\n<p><img src=\"https://img2018.cnblogs.com/blog/1301422/201904/1301422-20190411160134848-2110597655.png\" alt=\"测试结果\" /></p>\n</li>\n</ol>\n', 0, '###   时间和字符传的转化\n\n1. 日期转为字符串\n\n   ```java\n   import java.text.SimpleDateFormat;\n   import java.util.Date;\n    \n   public class Test01 {\n       public static void main(String[] args) {\n           Date date = new Date(); //获取当前时间\n           System.out.println(date.getClass().getName());  //打印date数据类型\n           System.out.println(date);           //打印当前时间\n           SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n           String format = sdf.format(date);       //将Date类型转换成String类型   \n           System.out.println(format.getClass().getName());//打印format数据类型\n           System.out.println(format);　　　　　　　　　　　　//打印当前时间\n       }\n   }\n   \n   \n   结果：\n   java.util.Date\n   Tue Dec 26 19:31:48 CST 2017\n   java.lang.String\n   2017-12-26 19:31:48\n   ```\n\n   2. 字符串转为日期\n   \n    ```java\n   import java.text.ParseException;\n   import java.text.SimpleDateFormat;\n   import java.util.Date;\n    \n   public class Test01 {\n       public static void main(String[] args) {\n           String time = \"1994-11-24 07:11:24\";   \n           SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n           try {\n               Date date = sdf.parse(time);\n               System.out.println(date);\n           } catch (ParseException e) {\n               // TODO Auto-generated catch block\n               e.printStackTrace();\n           }\n       }\n   }	\n   \n   结果：\n   Thu Nov 24 07:11:24 CST 1994\n    ```\n   \n   3. 对日期加减操作, 获得之前, 之后的时间\n   \n   ```java\n   import java.text.SimpleDateFormat;\n   import java.util.Date;\n    \n   public class DateTest {\n       public static void main(String[] args) {\n           SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n           Date date = new Date();\n           long dateTime = date.getTime(); //将date类型转换成long类型进行计算\n           System.out.println(sdf.format(date));   //以字符串打印当前时间\n            \n           long time = (60*60+5)*1000;     //60个60分钟加5分钟，乘以1000，一小时零五分转换成毫秒\n           dateTime = dateTime + time;     //将当前时间加上一小时零五分\n           System.out.println(sdf.format(new Date(dateTime))); //打印一小时零五分之后的时间\n       }\n    \n   }\n    \n   结果：\n   2018-01-07 08:52:21\n   2018-01-07 09:52:26	\n   ```\n   \n   ### 时间和数字的转化\n   \n   ```java\n   package com.drew.utils;\n    \n   import java.text.SimpleDateFormat;\n   import java.util.Date;\n    \n   /**\n    * long类型数字转换成时分秒毫秒格式\n    *\n    * @author Iszychen 2020/02/19\n    */\n   public class ConvertorTime {\n    \n       public static void main(String[] args) {\n           int seconds = 17854, msec = 360000;// 秒，毫秒\n           System.out.println(secToTime(seconds));\n           System.out.println(msec + \"毫秒转换格式时间：\\t\" + msecToTime(msec));\n           System.out.println(\"当前时间（时:分：秒.毫秒）\\t\" + new SimpleDateFormat(\"HH:mm:ss.SSS\").format(new Date()));\n       }\n    \n       /**\n        * 秒转换小时-分-秒analytics/util/DateUtil.java\n        *\n        * @param seconds 秒为单位 比如..600秒\n        * @return 比如...2小时3分钟52秒\n        */\n       public static String secToTime(int seconds) {\n           int hour = seconds / 3600;\n           int minute = (seconds - hour * 3600) / 60;\n           int second = (seconds - hour * 3600 - minute * 60);\n    \n           StringBuffer sb = new StringBuffer();\n           if (hour > 0) {\n               sb.append(hour + \"小时\");\n           }\n           if (minute > 0) {\n               sb.append(minute + \"分\");\n           }\n           if (second > 0) {\n               sb.append(second + \"秒\");\n           }\n           if (second == 0) {\n               sb.append(\"<1秒\");\n           }\n           return sb.toString();\n       }\n    \n       /**\n        * 将int类型数字转换成时分秒毫秒的格式数据\n        *\n        * @param time long类型的数据\n        * @return HH:mm:ss.SSS\n        * @author Iszychen 2020/02/19\n        */\n       public static String msecToTime(int time) {\n           String timeStr = null;\n           int hour = 0;\n           int minute = 0;\n           int second = 0;\n           int millisecond = 0;\n           if (time <= 0)\n               return \"00:00:00.000\";\n           else {\n               second = time / 1000;\n               minute = second / 60;\n               millisecond = time % 1000;\n               if (second < 60) {\n                   timeStr = \"00:00:\" + unitFormat(second) + \".\" + unitFormat2(millisecond);\n               } else if (minute < 60) {\n                   second = second % 60;\n                   timeStr = \"00:\" + unitFormat(minute) + \":\" + unitFormat(second) + \".\" + unitFormat2(millisecond);\n               } else {// 数字>=3600 000的时候\n                   hour = minute / 60;\n                   minute = minute % 60;\n                   second = second - hour * 3600 - minute * 60;\n                   timeStr = unitFormat(hour) + \":\" + unitFormat(minute) + \":\" + unitFormat(second) + \".\"\n                       + unitFormat2(millisecond);\n               }\n           }\n           return timeStr;\n       }\n    \n       public static String unitFormat(int i) {// 时分秒的格式转换\n           String retStr = null;\n           if (i >= 0 && i < 10)\n               retStr = \"0\" + Integer.toString(i);\n           else\n               retStr = \"\" + i;\n           return retStr;\n       }\n    \n       public static String unitFormat2(int i) {// 毫秒的格式转换\n           String retStr = null;\n           if (i >= 0 && i < 10)\n               retStr = \"00\" + Integer.toString(i);\n           else if (i >= 10 && i < 100) {\n               retStr = \"0\" + Integer.toString(i);\n           } else\n               retStr = \"\" + i;\n           return retStr;\n       }\n    \n   }	\n   ```\n   \n   ###### 可转为工具类=>测试结果\n   \n   \n   \n   ![测试结果](https://img2018.cnblogs.com/blog/1301422/201904/1301422-20190411160134848-2110597655.png)\n\n', '', 0, '时间和字符传的转化日期转为字符串importjava.text.SimpleDateFormat;importjava.util.Date;publicclassTest01{publicstaticvoidmain(String[]args){Datedate=newDate();//获取当前时间', '', 'http://111.229.114.126:8089/upload/2020/2/u=3573756467,3701343599&fm=26&gp=0-08b9a87439e54dc28c6463d6822a2805.jpg', '时间,字符串,数字的相互转化', 0, 'DateToStringAndInteger', 44, 0, NULL, NULL, 'datetostringandinteger');
INSERT INTO `posts` VALUES (0, 29, '2020-03-11 22:09:54', 0, '2020-04-15 10:09:52', 0, 0, '2020-04-15 10:09:52', '<p>Java中我们在定义类的成员变量时，如果是私有属性，我们通过调用属性对应的set和get方法来获取和设置变量的值，如果我们将这种方式来用于python那么代码如下:</p>\n<pre><code class=\"language-#\">class Money(object):\n    def __init__(self):\n        self.money = 0\n \n    def getMoney(self):\n        return self.money\n \n    def setMoney(self, value):\n        if isinstance(value, int):\n            self.money = value\n        else:\n            print(&quot;error：输入类型与预设类型不一致&quot;)\n \n \ndef main():\n    money = Money()\n    money.setMoney(10)\n    print(money.getMoney())\n \n \nif __name__ == \'__main__\':\n    main()\n\n</code></pre>\n<p>但是在python中我们可以利用python属性来实现，代码如下：</p>\n<pre><code class=\"language-#\">class Money(object):\n    def __init__(self):\n        self.money = 0\n \n    def getMoney(self):\n        return self.money\n \n    def setMoney(self, value):\n        if isinstance(value, int):\n            self.money = value\n        else:\n            print(&quot;error：输入类型与预设类型不一致&quot;)\n \n    dealValue = property(getMoney, setMoney)\n \n \ndef main():\n    money = Money()\n    money.dealValue=100\n    print(money.dealValue)\n \n \nif __name__ == \'__main__\':\n    main()\n\n</code></pre>\n<p>也使用property完全取代get/set</p>\n<pre><code class=\"language-#\">class Money(object):\n    def __init__(self):\n        self.__money = 0\n \n    @property\n    def money(self):\n        return self.__money\n \n    @money.setter\n    def money(self, value):\n        if isinstance(value, int):\n            self.__money = value\n        else:\n            print(&quot;error：输入类型与预设类型不一致&quot;)\n \n \ndef main():\n    a = Money()\n    a.money = 10\n    print(a.money)\n \n \nif __name__ == \'__main__\':\n    main()\n\n</code></pre>\n', 0, 'Java中我们在定义类的成员变量时，如果是私有属性，我们通过调用属性对应的set和get方法来获取和设置变量的值，如果我们将这种方式来用于python那么代码如下:\n```# coding=utf-8\nclass Money(object):\n    def __init__(self):\n        self.money = 0\n \n    def getMoney(self):\n        return self.money\n \n    def setMoney(self, value):\n        if isinstance(value, int):\n            self.money = value\n        else:\n            print(\"error：输入类型与预设类型不一致\")\n \n \ndef main():\n    money = Money()\n    money.setMoney(10)\n    print(money.getMoney())\n \n \nif __name__ == \'__main__\':\n    main()\n\n```\n\n但是在python中我们可以利用python属性来实现，代码如下：\n\n```# coding=utf-8\nclass Money(object):\n    def __init__(self):\n        self.money = 0\n \n    def getMoney(self):\n        return self.money\n \n    def setMoney(self, value):\n        if isinstance(value, int):\n            self.money = value\n        else:\n            print(\"error：输入类型与预设类型不一致\")\n \n    dealValue = property(getMoney, setMoney)\n \n \ndef main():\n    money = Money()\n    money.dealValue=100\n    print(money.dealValue)\n \n \nif __name__ == \'__main__\':\n    main()\n\n```\n\n也使用property完全取代get/set\n\n```# coding=utf-8\nclass Money(object):\n    def __init__(self):\n        self.__money = 0\n \n    @property\n    def money(self):\n        return self.__money\n \n    @money.setter\n    def money(self, value):\n        if isinstance(value, int):\n            self.__money = value\n        else:\n            print(\"error：输入类型与预设类型不一致\")\n \n \ndef main():\n    a = Money()\n    a.money = 10\n    print(a.money)\n \n \nif __name__ == \'__main__\':\n    main()\n\n```\n', '', 0, 'Java中我们在定义类的成员变量时，如果是私有属性，我们通过调用属性对应的set和get方法来获取和设置变量的值，如果我们将这种方式来用于python那么代码如下:classMoney(object):def__init__(self):self.money=0defgetMoney(self):r', '', 'http://111.229.114.126:8089/upload/2020/3/u=4111600323,3235941168&fm=26&gp=0-1fea7ad4ce724585b6c8e065e641d6bd.jpg', 'Python的Get/Set', 0, 'PythonGetAndSet', 37, 0, NULL, NULL, 'pythongetandset');
INSERT INTO `posts` VALUES (0, 30, '2020-03-17 22:58:52', 0, '2020-04-15 10:09:23', 0, 0, '2020-04-15 10:09:23', '<p>Shiro框架中有三个核心概念：Subject ，SecurityManager和Realms。</p>\n<h3 id=\"1-subject\">1    Subject</h3>\n<p>Subject一词是一个安全术语，其基本意思是“当前的操作用户”。称之为“用户”并不准确，因为“用户”一词通常跟人相关。在安全领域，术语“Subject”可以是人，也可以是第三方进程、后台帐户（Daemon Account）、定时作业（Corn Job）或其他类似事物。它仅仅意味着“当前跟软件交互的东西”。但考虑到大多数目的和用途，你可以把它认为是Shiro的“用户”概念。<br />\n在程序中你都能轻易的获得Subject，允许在任何需要的地方进行安全操作。每个Subject对象都必须与一个SecurityManager进行绑定，你访问Subject对象其实都是在与SecurityManager里的特定Subject进行交互。</p>\n<h3 id=\"2-securitymanager\">2    SecurityManager</h3>\n<p>Subject的“幕后”推手是SecurityManager。Subject代表了当前用户的安全操作，SecurityManager则管理所有用户的安全操作。它是Shiro框架的核心，充当“保护伞”，引用了多个内部嵌套安全组件，它们形成了对象图。但是，一旦SecurityManager及其内部对象图配置好，它就会退居幕后，应用开发人员几乎把他们的所有时间都花在Subject API调用上。<br />\n那么，如何设置SecurityManager呢？嗯，这要看应用的环境。例如，Web应用通常会在Web.xml中指定一个Shiro Servlet Filter，这会创建SecurityManager实例，如果你运行的是一个独立应用，你需要用其他配置方式，但有很多配置选项。<br />\n一个应用几乎总是只有一个SecurityManager实例。它实际是应用的Singleton（尽管不必是一个静态Singleton）。跟Shiro里的几乎所有组件一样，SecurityManager的缺省实现是POJO，而且可用POJO兼容的任何配置机制进行配置 - 普通的Java代码、Spring XML、YAML、.properties和.ini文件等。基本来讲，能够实例化类和调用JavaBean兼容方法的任何配置形式都可使用。</p>\n<h3 id=\"3-realms\">3    Realms</h3>\n<p>Shiro的第三个也是最后一个概念是Realm。Realm充当了Shiro与应用安全数据间的“桥梁”或者“连接器”。也就是说，当与像用户帐户这类安全相关数据进行交互，执行认证（登录）和授权（访问控制）时，Shiro会从应用配置的Realm中查找很多内容。<br />\n从这个意义上讲，Realm实质上是一个安全相关的DAO：它封装了数据源的连接细节，并在需要时将相关数据提供给Shiro。当配置Shiro时，你必须至少指定一个Realm，用于认证和（或）授权。配置多个Realm是可以的，但是至少需要一个。<br />\nShiro内置了可以连接大量安全数据源（又名目录）的Realm，如LDAP、关系数据库（JDBC）、类似INI的文本配置资源以及属性文件 等。如果缺省的Realm不能满足需求，你还可以插入代表自定义数据源的自己的Realm实现。<br />\n象其他内部组件一样，由SecurityManager来管理如何使用Realms来获取安全的身份数据。</p>\n', 0, 'Shiro框架中有三个核心概念：Subject ，SecurityManager和Realms。\n### 1    Subject\nSubject一词是一个安全术语，其基本意思是“当前的操作用户”。称之为“用户”并不准确，因为“用户”一词通常跟人相关。在安全领域，术语“Subject”可以是人，也可以是第三方进程、后台帐户（Daemon Account）、定时作业（Corn Job）或其他类似事物。它仅仅意味着“当前跟软件交互的东西”。但考虑到大多数目的和用途，你可以把它认为是Shiro的“用户”概念。\n在程序中你都能轻易的获得Subject，允许在任何需要的地方进行安全操作。每个Subject对象都必须与一个SecurityManager进行绑定，你访问Subject对象其实都是在与SecurityManager里的特定Subject进行交互。\n\n\n### 2    SecurityManager\nSubject的“幕后”推手是SecurityManager。Subject代表了当前用户的安全操作，SecurityManager则管理所有用户的安全操作。它是Shiro框架的核心，充当“保护伞”，引用了多个内部嵌套安全组件，它们形成了对象图。但是，一旦SecurityManager及其内部对象图配置好，它就会退居幕后，应用开发人员几乎把他们的所有时间都花在Subject API调用上。\n那么，如何设置SecurityManager呢？嗯，这要看应用的环境。例如，Web应用通常会在Web.xml中指定一个Shiro Servlet Filter，这会创建SecurityManager实例，如果你运行的是一个独立应用，你需要用其他配置方式，但有很多配置选项。\n一个应用几乎总是只有一个SecurityManager实例。它实际是应用的Singleton（尽管不必是一个静态Singleton）。跟Shiro里的几乎所有组件一样，SecurityManager的缺省实现是POJO，而且可用POJO兼容的任何配置机制进行配置 - 普通的Java代码、Spring XML、YAML、.properties和.ini文件等。基本来讲，能够实例化类和调用JavaBean兼容方法的任何配置形式都可使用。\n\n### 3    Realms\nShiro的第三个也是最后一个概念是Realm。Realm充当了Shiro与应用安全数据间的“桥梁”或者“连接器”。也就是说，当与像用户帐户这类安全相关数据进行交互，执行认证（登录）和授权（访问控制）时，Shiro会从应用配置的Realm中查找很多内容。\n从这个意义上讲，Realm实质上是一个安全相关的DAO：它封装了数据源的连接细节，并在需要时将相关数据提供给Shiro。当配置Shiro时，你必须至少指定一个Realm，用于认证和（或）授权。配置多个Realm是可以的，但是至少需要一个。\nShiro内置了可以连接大量安全数据源（又名目录）的Realm，如LDAP、关系数据库（JDBC）、类似INI的文本配置资源以及属性文件 等。如果缺省的Realm不能满足需求，你还可以插入代表自定义数据源的自己的Realm实现。\n象其他内部组件一样，由SecurityManager来管理如何使用Realms来获取安全的身份数据。\n', '', 0, 'Shiro框架中有三个核心概念：Subject，SecurityManager和Realms。1   SubjectSubject一词是一个安全术语，其基本意思是“当前的操作用户”。称之为“用户”并不准确，因为“用户”一词通常跟人相关。在安全领域，术语“Subject”可以是人，也可以是第三方进程、', '', 'http://111.229.114.126:8089/upload/2020/3/shiro-0253c465c05b4020be98273e1e8d40c8.jfif', 'Shiro的三个组件', 0, 'shiro_1', 30, 0, NULL, NULL, 'shiro1');
INSERT INTO `posts` VALUES (0, 31, '2020-03-29 17:54:06', 0, '2020-04-15 10:08:33', 0, 0, '2020-04-15 10:08:32', '<h3 id=\"1页面模板解析\">1.页面模板解析</h3>\n<p>可通过使用thymeleaf模板对应的spring配置，默认已经配置好，可手动配置其他路径</p>\n<pre><code>spring.thymeleaf.prefix=classpath:/templates/\n\n</code></pre>\n<p>并且引入依赖</p>\n<pre><code class=\"language-xml\"> &lt;!-- SpringBoot集成thymeleaf模板 --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n</code></pre>\n<p>即可在控制层实现页面跳转</p>\n<pre><code class=\"language-Java\">@Controller\n@RequestMapping(path = &quot;crud&quot;)\npublic class UserController extends BaseController {\n\n	@Autowired\n	private UserDAO userDAO;\n\n	@Autowired\n	private DepartmentDAO departmentDAO;\n\n	/**\n	 * 查询所有用户\n	 *\n	 * @return\n	 */\n	@GetMapping(&quot;/users&quot;)\n	public String list(ModelMap map) {\n		List&lt;UserDO&gt; all = userDAO.getAll();\n		map.put(&quot;users&quot;, all);\n		return &quot;user/users&quot;; //对应templates/user/users.html\n	}\n\n\n</code></pre>\n<p>在页面访问 {ip：端口}/项目路径/curd/users 即可访问对应页面。其中若<br />\n注解 @@RequestMapping(path = &quot;crud&quot;) 为 &quot;/curd&quot; 或者 @GetMapping(&quot;users&quot;)为&quot;/users&quot; 都可。</p>\n<h3 id=\"2-重定向\">2. 重定向</h3>\n<p>重定向可带参数或者不带参数</p>\n<ol>\n<li>不带参数</li>\n</ol>\n<pre><code class=\"language-java\">/**\n	 * 添加用户请求\n	 * SpringMVC 自动将属性绑定  入参名和对象属性名一样\n	 *\n	 * @return\n	 */\n	@PostMapping(&quot;/user&quot;)\n	public String  addUser(UserDO userDO) {\n		System.out.println(&quot;提交的用户信息&quot; + userDO);\n		userDAO.insert(userDO);\n		//　TODO　添加完成后来到用户列表页面 redirect: 重定向地址  forward:转发地址 不能有空格\n		return &quot;redirect:/crud/users&quot;;\n	}\n\n\n</code></pre>\n<ol start=\"2\">\n<li>带参数传递<br />\n<img src=\"http://111.229.114.126/upload/2020/3/image-3ba4e6b3f99d445aad0417be4b4d70d1.png\" alt=\"image.png\" /></li>\n</ol>\n<p>redirect 目标有三种构建方式：</p>\n<ol>\n<li>使用 redirect: 前缀url方式构建目标url</li>\n<li>使用 RedirectView 类型指定目标, 推荐使用这个,</li>\n<li>使用 ModelAndView 类型指定目标, ModelAndView 视图名默认是forward, 所以对于redirect, 需要加上 redirect: 前缀</li>\n</ol>\n<p>传参和取参方式:</p>\n<ol>\n<li>传参: 以字符串的形式构建目标url, 可以使用 query variable的格式拼url. 取参: @RequestParam()来fetch</li>\n<li>传参: redirectAttributes.addAttribute() 加的attr. 取参: @RequestParam()来fetch</li>\n<li>传参: redirectAttributes.addFlashAttribute() 加的attr. 取参: @ModelAttribute()来fetch</li>\n</ol>\n<p>Flash attribute的特点:</p>\n<ol>\n<li>addFlashAttribute() 可以是任意类型的数据(不局限在String等基本类型), addAttribute()只能加基本类型的参数.</li>\n<li>addFlashAttribute() 加的 attr, 不会出现在url 地址栏上.</li>\n<li>addFlashAttribute() 加的 attr, 一旦fetch后, 就会自动清空, 非常适合 form 提交后 feedback Message.</li>\n</ol>\n<h3 id=\"3-请求转发\">3. 请求转发</h3>\n<p>在Spring MVC 中, 构建forward 目标有两种方式:</p>\n<ol>\n<li>以字符串的形式构建目标url, url 需要加上 forward: 前缀</li>\n<li>使用 ModelAndView 对象来设置转发的forward目标, viewName 可以省略 forward: 前缀, viewName 应该是目标url, 而不是目标视图的函数名.<br />\n传参方式:</li>\n<li>以字符串的形式构建目标url, 可以使用 query variable的格式拼url</li>\n<li>使用 ModelAndView 对象来增加 attribute Object, 其结果也是在拼接url.<br />\n取参的方式: 可以使用 @RequestParam 来取参.</li>\n</ol>\n<p>eg：Java代码</p>\n<pre><code class=\"language-java\">@Controller\n@RequestMapping(&quot;/&quot;)\npublic class DemoController {\n\n    /*\n     * forward 示例: 以字符串的形式构建目标url, url 需要加上 forward: 前缀\n     * */\n    @RequestMapping(&quot;/forwardTest1&quot;)\n    public String forwardTest1() {\n        return &quot;forward:/forwardTarget?param1=v1&amp;param2=v2&quot;;\n    }\n\n\n    /*\n     * forward 示例: 使用 ModelAndView() 设置转发的目标url\n     * */\n    @RequestMapping(&quot;/forwardTest2&quot;)\n    public ModelAndView forwardTest2() {\n        ModelAndView mav=new ModelAndView(&quot;/forwardTarget&quot;); // 绝对路径OK\n        //ModelAndView mav=new ModelAndView(&quot;forwardTarget&quot;); // 相对路径也OK\n        mav.addObject(&quot;param1&quot;, &quot;value1&quot;);\n        mav.addObject(&quot;param2&quot;, &quot;value2&quot;);\n        return mav ;\n    }\n\n    @RequestMapping(&quot;/forwardTarget&quot;)\n    public String forwardTargetView(Model model, @RequestParam(&quot;param1&quot;) String param1,\n            @RequestParam(&quot;param2&quot;) String param2) {\n        model.addAttribute(&quot;param1&quot;, param1);\n        model.addAttribute(&quot;param2&quot;, param2);\n        return &quot;forwardTarget&quot;;\n    }\n\n\n    /*\n     * redirect 目标有三种构建方式\n     * 1. 使用 redirect: 前缀url方式构建目标url\n     * 2. 使用 RedirectView 类型指定目标\n     * 3. 使用 ModelAndView 类型指定目标, ModelAndView 视图名默认是forward, 所以对于redirect, 需要加上 redirect: 前缀\n     * */\n    @RequestMapping(&quot;/noParamRedirect&quot;)\n    public RedirectView noParamTest() {\n        RedirectView redirectTarget = new RedirectView();\n        redirectTarget.setContextRelative(true);\n        redirectTarget.setUrl(&quot;noParamTarget&quot;);\n        return redirectTarget;\n    }\n\n    @RequestMapping(&quot;/noParamTarget&quot;)\n    public String redirectTarget() {\n        return &quot;noParamTarget&quot;;\n    }\n\n    @RequestMapping(&quot;/withParamRedirect&quot;)\n    public RedirectView withParamRedirect(RedirectAttributes redirectAttributes) {\n        RedirectView redirectTarget = new RedirectView();\n        redirectTarget.setContextRelative(true);\n        redirectTarget.setUrl(&quot;withParamTarget&quot;);\n\n        redirectAttributes.addAttribute(&quot;param1&quot;, &quot;value1&quot;);\n        redirectAttributes.addAttribute(&quot;param2&quot;, &quot;value2&quot;);\n        return redirectTarget;\n    }\n\n    @RequestMapping(&quot;/withParamTarget&quot;)\n    public String withParamTarget(Model model, @RequestParam(&quot;param1&quot;) String param1,\n            @RequestParam(&quot;param2&quot;) String param2) {\n        model.addAttribute(&quot;param1&quot;, param1);\n        model.addAttribute(&quot;param2&quot;, param2);\n        return &quot;withParamTarget&quot;;\n    }\n\n    @RequestMapping(&quot;/withFlashRedirect&quot;)\n    public RedirectView withFlashTest(RedirectAttributes redirectAttributes) {\n        RedirectView redirectTarget = new RedirectView();\n        redirectTarget.setContextRelative(true);\n        redirectTarget.setUrl(&quot;withFlashTarget&quot;);\n\n        redirectAttributes.addAttribute(&quot;param&quot;, &quot;value&quot;);\n        redirectAttributes.addFlashAttribute(&quot;flashParam&quot;, &quot;flashValue&quot;);\n        return redirectTarget;\n    }\n\n\n    /*\n     * redirectAttributes.addAttribute加的attr, 使用 @RequestParam()来fetch\n     * redirectAttributes.addFlashAttribute()加的attr, 使用 @ModelAttribute()来fetch\n     * */\n    @RequestMapping(&quot;/withFlashTarget&quot;)\n    public String withFlashTarget(Model model, @RequestParam(&quot;param&quot;) String param,\n            @ModelAttribute(&quot;flashParam&quot;) String flashParam) {\n        model.addAttribute(&quot;param&quot;, param);\n        model.addAttribute(&quot;flashParam&quot;, flashParam);\n        return &quot;withFlashTarget&quot;;\n    }\n\n\n\n    @GetMapping(&quot;/input&quot;)\n    public String input() {\n        return &quot;input&quot;;\n    }\n\n    /*\n     * form 提交后, 如果form数据有问题, 使用redirectAttributes.addFlashAttribute()加上 flash message.\n     * addFlashAttribute()可以是任意类型的数据(不局限在String等基本类型)\n     * addFlashAttribute() 加的 attr, 不会出现在url 地址栏上.\n     * addFlashAttribute() 加的 attr, 一旦fetch后, 就会自动清空, 非常适合 form 提交后 feedback Message.\n     * */\n    @PostMapping(&quot;/submit&quot;)\n    public RedirectView submit(RedirectAttributes redirectAttributes) {\n        boolean passed = false;\n        if (passed==false) {\n            RedirectView redirectTarget = new RedirectView();\n            redirectTarget.setContextRelative(true);\n            redirectTarget.setUrl(&quot;input&quot;);\n            redirectAttributes.addFlashAttribute(&quot;errorMessage&quot;, &quot;some error information here&quot;);\n            return redirectTarget;\n        }else {\n            RedirectView redirectTarget = new RedirectView();\n            redirectTarget.setContextRelative(true);\n            redirectTarget.setUrl(&quot;inputOK&quot;);\n            return redirectTarget;\n        }\n    }\n}\n\n</code></pre>\n', 0, '### 1.页面模板解析\n可通过使用thymeleaf模板对应的spring配置，默认已经配置好，可手动配置其他路径\n```\nspring.thymeleaf.prefix=classpath:/templates/\n\n```\n并且引入依赖\n```xml\n <!-- SpringBoot集成thymeleaf模板 -->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-thymeleaf</artifactId>\n        </dependency>\n\n```\n即可在控制层实现页面跳转\n```Java\n@Controller\n@RequestMapping(path = \"crud\")\npublic class UserController extends BaseController {\n\n	@Autowired\n	private UserDAO userDAO;\n\n	@Autowired\n	private DepartmentDAO departmentDAO;\n\n	/**\n	 * 查询所有用户\n	 *\n	 * @return\n	 */\n	@GetMapping(\"/users\")\n	public String list(ModelMap map) {\n		List<UserDO> all = userDAO.getAll();\n		map.put(\"users\", all);\n		return \"user/users\"; //对应templates/user/users.html\n	}\n\n\n```\n在页面访问 {ip：端口}/项目路径/curd/users 即可访问对应页面。其中若\n注解 @@RequestMapping(path = \"crud\") 为 \"/curd\" 或者 @GetMapping(\"users\")为\"/users\" 都可。\n### 2. 重定向\n\n重定向可带参数或者不带参数\n1. 不带参数\n```java\n/**\n	 * 添加用户请求\n	 * SpringMVC 自动将属性绑定  入参名和对象属性名一样\n	 *\n	 * @return\n	 */\n	@PostMapping(\"/user\")\n	public String  addUser(UserDO userDO) {\n		System.out.println(\"提交的用户信息\" + userDO);\n		userDAO.insert(userDO);\n		//　TODO　添加完成后来到用户列表页面 redirect: 重定向地址  forward:转发地址 不能有空格\n		return \"redirect:/crud/users\";\n	}\n\n\n```\n2. 带参数传递\n![image.png](http://111.229.114.126/upload/2020/3/image-3ba4e6b3f99d445aad0417be4b4d70d1.png)\n\nredirect 目标有三种构建方式：\n1. 使用 redirect: 前缀url方式构建目标url\n2. 使用 RedirectView 类型指定目标, 推荐使用这个,\n3. 使用 ModelAndView 类型指定目标, ModelAndView 视图名默认是forward, 所以对于redirect, 需要加上 redirect: 前缀\n\n传参和取参方式:\n1. 传参: 以字符串的形式构建目标url, 可以使用 query variable的格式拼url. 取参: @RequestParam()来fetch\n2. 传参: redirectAttributes.addAttribute() 加的attr. 取参: @RequestParam()来fetch\n3. 传参: redirectAttributes.addFlashAttribute() 加的attr. 取参: @ModelAttribute()来fetch\n\nFlash attribute的特点:\n1. addFlashAttribute() 可以是任意类型的数据(不局限在String等基本类型), addAttribute()只能加基本类型的参数.\n2. addFlashAttribute() 加的 attr, 不会出现在url 地址栏上.\n3. addFlashAttribute() 加的 attr, 一旦fetch后, 就会自动清空, 非常适合 form 提交后 feedback Message.\n### 3. 请求转发\n在Spring MVC 中, 构建forward 目标有两种方式:\n1. 以字符串的形式构建目标url, url 需要加上 forward: 前缀\n2. 使用 ModelAndView 对象来设置转发的forward目标, viewName 可以省略 forward: 前缀, viewName 应该是目标url, 而不是目标视图的函数名.\n传参方式:\n1. 以字符串的形式构建目标url, 可以使用 query variable的格式拼url\n2. 使用 ModelAndView 对象来增加 attribute Object, 其结果也是在拼接url. \n取参的方式: 可以使用 @RequestParam 来取参. \n\neg：Java代码\n```java\n@Controller\n@RequestMapping(\"/\")\npublic class DemoController {\n\n    /*\n     * forward 示例: 以字符串的形式构建目标url, url 需要加上 forward: 前缀\n     * */\n    @RequestMapping(\"/forwardTest1\")\n    public String forwardTest1() {\n        return \"forward:/forwardTarget?param1=v1&param2=v2\";\n    }\n\n\n    /*\n     * forward 示例: 使用 ModelAndView() 设置转发的目标url\n     * */\n    @RequestMapping(\"/forwardTest2\")\n    public ModelAndView forwardTest2() {\n        ModelAndView mav=new ModelAndView(\"/forwardTarget\"); // 绝对路径OK\n        //ModelAndView mav=new ModelAndView(\"forwardTarget\"); // 相对路径也OK\n        mav.addObject(\"param1\", \"value1\");\n        mav.addObject(\"param2\", \"value2\");\n        return mav ;\n    }\n\n    @RequestMapping(\"/forwardTarget\")\n    public String forwardTargetView(Model model, @RequestParam(\"param1\") String param1,\n            @RequestParam(\"param2\") String param2) {\n        model.addAttribute(\"param1\", param1);\n        model.addAttribute(\"param2\", param2);\n        return \"forwardTarget\";\n    }\n\n\n    /*\n     * redirect 目标有三种构建方式\n     * 1. 使用 redirect: 前缀url方式构建目标url\n     * 2. 使用 RedirectView 类型指定目标\n     * 3. 使用 ModelAndView 类型指定目标, ModelAndView 视图名默认是forward, 所以对于redirect, 需要加上 redirect: 前缀\n     * */\n    @RequestMapping(\"/noParamRedirect\")\n    public RedirectView noParamTest() {\n        RedirectView redirectTarget = new RedirectView();\n        redirectTarget.setContextRelative(true);\n        redirectTarget.setUrl(\"noParamTarget\");\n        return redirectTarget;\n    }\n\n    @RequestMapping(\"/noParamTarget\")\n    public String redirectTarget() {\n        return \"noParamTarget\";\n    }\n\n    @RequestMapping(\"/withParamRedirect\")\n    public RedirectView withParamRedirect(RedirectAttributes redirectAttributes) {\n        RedirectView redirectTarget = new RedirectView();\n        redirectTarget.setContextRelative(true);\n        redirectTarget.setUrl(\"withParamTarget\");\n\n        redirectAttributes.addAttribute(\"param1\", \"value1\");\n        redirectAttributes.addAttribute(\"param2\", \"value2\");\n        return redirectTarget;\n    }\n\n    @RequestMapping(\"/withParamTarget\")\n    public String withParamTarget(Model model, @RequestParam(\"param1\") String param1,\n            @RequestParam(\"param2\") String param2) {\n        model.addAttribute(\"param1\", param1);\n        model.addAttribute(\"param2\", param2);\n        return \"withParamTarget\";\n    }\n\n    @RequestMapping(\"/withFlashRedirect\")\n    public RedirectView withFlashTest(RedirectAttributes redirectAttributes) {\n        RedirectView redirectTarget = new RedirectView();\n        redirectTarget.setContextRelative(true);\n        redirectTarget.setUrl(\"withFlashTarget\");\n\n        redirectAttributes.addAttribute(\"param\", \"value\");\n        redirectAttributes.addFlashAttribute(\"flashParam\", \"flashValue\");\n        return redirectTarget;\n    }\n\n\n    /*\n     * redirectAttributes.addAttribute加的attr, 使用 @RequestParam()来fetch\n     * redirectAttributes.addFlashAttribute()加的attr, 使用 @ModelAttribute()来fetch\n     * */\n    @RequestMapping(\"/withFlashTarget\")\n    public String withFlashTarget(Model model, @RequestParam(\"param\") String param,\n            @ModelAttribute(\"flashParam\") String flashParam) {\n        model.addAttribute(\"param\", param);\n        model.addAttribute(\"flashParam\", flashParam);\n        return \"withFlashTarget\";\n    }\n\n\n\n    @GetMapping(\"/input\")\n    public String input() {\n        return \"input\";\n    }\n\n    /*\n     * form 提交后, 如果form数据有问题, 使用redirectAttributes.addFlashAttribute()加上 flash message.\n     * addFlashAttribute()可以是任意类型的数据(不局限在String等基本类型)\n     * addFlashAttribute() 加的 attr, 不会出现在url 地址栏上.\n     * addFlashAttribute() 加的 attr, 一旦fetch后, 就会自动清空, 非常适合 form 提交后 feedback Message.\n     * */\n    @PostMapping(\"/submit\")\n    public RedirectView submit(RedirectAttributes redirectAttributes) {\n        boolean passed = false;\n        if (passed==false) {\n            RedirectView redirectTarget = new RedirectView();\n            redirectTarget.setContextRelative(true);\n            redirectTarget.setUrl(\"input\");\n            redirectAttributes.addFlashAttribute(\"errorMessage\", \"some error information here\");\n            return redirectTarget;\n        }else {\n            RedirectView redirectTarget = new RedirectView();\n            redirectTarget.setContextRelative(true);\n            redirectTarget.setUrl(\"inputOK\");\n            return redirectTarget;\n        }\n    }\n}\n\n```\n\n', '', 0, '1.页面模板解析可通过使用thymeleaf模板对应的spring配置，默认已经配置好，可手动配置其他路径spring.thymeleaf.prefix=classpath:/templates/并且引入依赖&lt;!--SpringBoot集成thymeleaf模板--&gt;&lt;depend', '', 'http://111.229.114.126:8089/upload/2020/2/u=3536793445,2882105203&fm=26&gp=0-1b8ecace7070400cabacdbfb1421b43f.jpg', 'SpringMVC的页面跳转', 0, 'modelandview', 22, 0, NULL, NULL, 'modelandview');
INSERT INTO `posts` VALUES (0, 32, '2020-03-30 15:08:40', 0, '2020-04-15 10:08:10', 0, 0, '2020-03-30 15:08:40', '', 0, '### FastJSON 使用\n1. 如果使用Maven,在pom.xml文件加入以下依赖\n```\n<dependency>\n     <groupId>com.alibaba</groupId>\n     <artifactId>fastjson</artifactId>\n     <version>1.1.23</version>\n </dependency>\n\n```\n2. Map序列化与反序列化\n	\n```java\nMap<String, Object> map = new HashMap<String, Object>();\n		map.put(\"key1\", \"value1\");\n		map.put(\"key2\", \"value2\");\n		String mapJson = JSON.toJSONString(map);\n		System.out.println(mapJson);\n		//输出{\"key1\":\"value1\",\"key2\":\"value2\"}\n\n		//TODO 泛型的反序列化（使用TypeReference传入类型信息）\n		Map<String, Object> map2 = JSON.parseObject(mapJson, new TypeReference<Map<String, Object>>(){});\n		System.out.println(map2);\n\n```\n3. List<Map<String, Object>>\n```java\nList<Map<String, Object>> list = new ArrayList<Map<String, Object>>();\n		Map<String, Object> map1 = new HashMap<String, Object>();\n		map1.put(\"key1\", \"value1\");\n		map1.put(\"key2\", \"value2\");\n\n		Map<String, Object> map2 = new HashMap<String, Object>();\n		map2.put(\"key1\", \"value3\");\n		map2.put(\"key2\", \"value4\");\n		list.add(map1);\n		list.add(map2);\n\n		String jsonstr = JSON.toJSONString(list);\n		System.out.println(jsonstr);\n		System.out.println(\"==========================================\");\n\n		//输出 [{\"key1\":\"value1\",\"key2\":\"value2\"},{\"key1\":\"value3\",\"key2\":\"value4\"}]\n		// TODO String objJson = JSON.toJSONString(Object object, boolean prettyFormat)\n		//TODO 传入一个对象和一个布尔类型（是否格式化），将对象转成格式化后的JSON字符串。\n		String listJson1 = JSONArray.toJSONString(list, true);\n		System.out.println(listJson1);\n		System.out.println(\"==========================================\");\n		String listJson2 = JSONArray.toJSONString(list, false);\n		System.out.println(listJson2);\n		System.out.println(\"==========================================\");\n\n		//TODO 使用单引号\n		String listJson = JSON.toJSONString(list, SerializerFeature.UseSingleQuotes);\n		//输出 [{\'key1\':\'value1\',\'key2\':\'value2\'},{\'key1\':\'value3\',\'key2\':\'value4\'}]\n		System.out.println(listJson);\n		System.out.println(\"==========================================\");\n\n		//TODO	集合反序列化\n		List<Map> list1 = JSON.parseArray(listJson, Map.class);\n		for(Map<String, Object> map : list1){\n			System.out.println(map.get(\"key1\"));\n			System.out.println(map.get(\"key2\"));\n		}\n		//输出 value1 value2 value3 value4\n\n```\n4. JAVA bean\n```java\n	UserDO userDO = new UserDO();\n		userDO.setId(1);\n		userDO.setName(\"乐乐\");\n		userDO.setAge(12);\n		String userJson = JSON.toJSONString(userDO);\n		System.out.println(userJson);\n		//输出 {\"age\":12,\"id\":1,\"username\":\"乐乐\"}\n\n		//TODO 普通序列化\n		UserDO user1 = (UserDO) JSON.parse(userJson);\n		System.out.println(user1.getAge());\n		//输出 12\n\n		//TODO 指定Class信息反序列化\n		UserDO user2 = JSON.parseObject(userJson,UserDO.class);\n		System.out.println(user2.getName());\n		//输出 乐乐\n\n```\n5. 时间\n```java\n//TODO （1）FastJSON将java.util.Date转成long。\n		String dateJson1 = JSON.toJSONString(new Date());\n		System.out.println(dateJson1);\n		System.out.println(\"==========================================\");\n\n		//输出 1547900848449\n		//TODO（2）使用SerializerFeature特性格式化日期。\n		String dateJson2 = JSON.toJSONString(new Date(), SerializerFeature.WriteDateUseDateFormat);\n		System.out.println(dateJson2);\n		System.out.println(\"==========================================\");\n\n		//输出 \"2019-01-19 20:29:24\"\n		//TODO（3）指定输出日期格式\n		String dateJson3 = JSON.toJSONStringWithDateFormat(new Date(), \"yyyy-MM-dd HH:mm:ss\");\n		System.out.println(dateJson3);\n		System.out.println(\"==========================================\");\n		//输出\"2019-01-19 20:32:34\"\n\n```\n\n\n\n', '', 2, '', '', '', 'Alibaba JSON', 0, 'Alibaba JSON', 0, 0, NULL, NULL, 'Alibaba JSON');
INSERT INTO `posts` VALUES (0, 33, '2020-03-30 15:13:00', 0, '2020-04-15 10:07:31', 0, 0, '2020-04-15 10:07:31', '<h3 id=\"fastjson\">FastJSON</h3>\n<ol>\n<li>引入依赖或者Jar包</li>\n</ol>\n<pre><code class=\"language-xml\">&lt;dependency&gt;\n     &lt;groupId&gt;com.alibaba&lt;/groupId&gt;\n     &lt;artifactId&gt;fastjson&lt;/artifactId&gt;\n     &lt;version&gt;1.1.23&lt;/version&gt;\n &lt;/dependency&gt;\n\n</code></pre>\n<ol start=\"2\">\n<li>将Map转成JSON</li>\n</ol>\n<pre><code class=\"language-java\">	Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();\n		map.put(&quot;key1&quot;, &quot;value1&quot;);\n		map.put(&quot;key2&quot;, &quot;value2&quot;);\n		String mapJson = JSON.toJSONString(map);\n		System.out.println(mapJson);\n		//输出{&quot;key1&quot;:&quot;value1&quot;,&quot;key2&quot;:&quot;value2&quot;}\n\n		//TODO 泛型的反序列化（使用TypeReference传入类型信息）\n		Map&lt;String, Object&gt; map2 = JSON.parseObject(mapJson, new TypeReference&lt;Map&lt;String, Object&gt;&gt;(){});\n		System.out.println(map2);\n\n</code></pre>\n<ol start=\"3\">\n<li>将List&lt;Map转成JSON</li>\n</ol>\n<pre><code class=\"language-java\">List&lt;Map&lt;String, Object&gt;&gt; list = new ArrayList&lt;Map&lt;String, Object&gt;&gt;();\n		Map&lt;String, Object&gt; map1 = new HashMap&lt;String, Object&gt;();\n		map1.put(&quot;key1&quot;, &quot;value1&quot;);\n		map1.put(&quot;key2&quot;, &quot;value2&quot;);\n\n		Map&lt;String, Object&gt; map2 = new HashMap&lt;String, Object&gt;();\n		map2.put(&quot;key1&quot;, &quot;value3&quot;);\n		map2.put(&quot;key2&quot;, &quot;value4&quot;);\n		list.add(map1);\n		list.add(map2);\n\n		String jsonstr = JSON.toJSONString(list);\n		System.out.println(jsonstr);\n		System.out.println(&quot;==========================================&quot;);\n\n		//输出 [{&quot;key1&quot;:&quot;value1&quot;,&quot;key2&quot;:&quot;value2&quot;},{&quot;key1&quot;:&quot;value3&quot;,&quot;key2&quot;:&quot;value4&quot;}]\n		// TODO String objJson = JSON.toJSONString(Object object, boolean prettyFormat)\n		//TODO 传入一个对象和一个布尔类型（是否格式化），将对象转成格式化后的JSON字符串。\n		String listJson1 = JSONArray.toJSONString(list, true);\n		System.out.println(listJson1);\n		System.out.println(&quot;==========================================&quot;);\n		String listJson2 = JSONArray.toJSONString(list, false);\n		System.out.println(listJson2);\n		System.out.println(&quot;==========================================&quot;);\n\n		//TODO 使用单引号\n		String listJson = JSON.toJSONString(list, SerializerFeature.UseSingleQuotes);\n		//输出 [{\'key1\':\'value1\',\'key2\':\'value2\'},{\'key1\':\'value3\',\'key2\':\'value4\'}]\n		System.out.println(listJson);\n		System.out.println(&quot;==========================================&quot;);\n\n		//TODO	集合反序列化\n		List&lt;Map&gt; list1 = JSON.parseArray(listJson, Map.class);\n		for(Map&lt;String, Object&gt; map : list1){\n			System.out.println(map.get(&quot;key1&quot;));\n			System.out.println(map.get(&quot;key2&quot;));\n		}\n		//输出 value1 value2 value3 value4\n</code></pre>\n<ol start=\"4\">\n<li>Java bean</li>\n</ol>\n<pre><code class=\"language-java\">UserDO userDO = new UserDO();\n		userDO.setId(1);\n		userDO.setName(&quot;乐乐&quot;);\n		userDO.setAge(12);\n		String userJson = JSON.toJSONString(userDO);\n		System.out.println(userJson);\n		//输出 {&quot;age&quot;:12,&quot;id&quot;:1,&quot;username&quot;:&quot;乐乐&quot;}\n\n		//TODO 普通序列化\n		UserDO user1 = (UserDO) JSON.parse(userJson);\n		System.out.println(user1.getAge());\n		//输出 12\n\n		//TODO 指定Class信息反序列化\n		UserDO user2 = JSON.parseObject(userJson,UserDO.class);\n		System.out.println(user2.getName());\n		//输出 乐乐\n\n</code></pre>\n<ol start=\"5\">\n<li>时间</li>\n</ol>\n<pre><code class=\"language-java\">//TODO （1）FastJSON将java.util.Date转成long。\n		String dateJson1 = JSON.toJSONString(new Date());\n		System.out.println(dateJson1);\n		System.out.println(&quot;==========================================&quot;);\n\n		//输出 1547900848449\n		//TODO（2）使用SerializerFeature特性格式化日期。\n		String dateJson2 = JSON.toJSONString(new Date(), SerializerFeature.WriteDateUseDateFormat);\n		System.out.println(dateJson2);\n		System.out.println(&quot;==========================================&quot;);\n\n		//输出 &quot;2019-01-19 20:29:24&quot;\n		//TODO（3）指定输出日期格式\n		String dateJson3 = JSON.toJSONStringWithDateFormat(new Date(), &quot;yyyy-MM-dd HH:mm:ss&quot;);\n		System.out.println(dateJson3);\n		System.out.println(&quot;==========================================&quot;);\n		//输出&quot;2019-01-19 20:32:34&quot;\n\n</code></pre>\n', 0, '### FastJSON\n1. 引入依赖或者Jar包\n```xml\n<dependency>\n     <groupId>com.alibaba</groupId>\n     <artifactId>fastjson</artifactId>\n     <version>1.1.23</version>\n </dependency>\n\n```\n2. 将Map转成JSON\n```java\n	Map<String, Object> map = new HashMap<String, Object>();\n		map.put(\"key1\", \"value1\");\n		map.put(\"key2\", \"value2\");\n		String mapJson = JSON.toJSONString(map);\n		System.out.println(mapJson);\n		//输出{\"key1\":\"value1\",\"key2\":\"value2\"}\n\n		//TODO 泛型的反序列化（使用TypeReference传入类型信息）\n		Map<String, Object> map2 = JSON.parseObject(mapJson, new TypeReference<Map<String, Object>>(){});\n		System.out.println(map2);\n\n```\n\n3. 将List<Map转成JSON\n```java\nList<Map<String, Object>> list = new ArrayList<Map<String, Object>>();\n		Map<String, Object> map1 = new HashMap<String, Object>();\n		map1.put(\"key1\", \"value1\");\n		map1.put(\"key2\", \"value2\");\n\n		Map<String, Object> map2 = new HashMap<String, Object>();\n		map2.put(\"key1\", \"value3\");\n		map2.put(\"key2\", \"value4\");\n		list.add(map1);\n		list.add(map2);\n\n		String jsonstr = JSON.toJSONString(list);\n		System.out.println(jsonstr);\n		System.out.println(\"==========================================\");\n\n		//输出 [{\"key1\":\"value1\",\"key2\":\"value2\"},{\"key1\":\"value3\",\"key2\":\"value4\"}]\n		// TODO String objJson = JSON.toJSONString(Object object, boolean prettyFormat)\n		//TODO 传入一个对象和一个布尔类型（是否格式化），将对象转成格式化后的JSON字符串。\n		String listJson1 = JSONArray.toJSONString(list, true);\n		System.out.println(listJson1);\n		System.out.println(\"==========================================\");\n		String listJson2 = JSONArray.toJSONString(list, false);\n		System.out.println(listJson2);\n		System.out.println(\"==========================================\");\n\n		//TODO 使用单引号\n		String listJson = JSON.toJSONString(list, SerializerFeature.UseSingleQuotes);\n		//输出 [{\'key1\':\'value1\',\'key2\':\'value2\'},{\'key1\':\'value3\',\'key2\':\'value4\'}]\n		System.out.println(listJson);\n		System.out.println(\"==========================================\");\n\n		//TODO	集合反序列化\n		List<Map> list1 = JSON.parseArray(listJson, Map.class);\n		for(Map<String, Object> map : list1){\n			System.out.println(map.get(\"key1\"));\n			System.out.println(map.get(\"key2\"));\n		}\n		//输出 value1 value2 value3 value4\n```\n4. Java bean\n```java\nUserDO userDO = new UserDO();\n		userDO.setId(1);\n		userDO.setName(\"乐乐\");\n		userDO.setAge(12);\n		String userJson = JSON.toJSONString(userDO);\n		System.out.println(userJson);\n		//输出 {\"age\":12,\"id\":1,\"username\":\"乐乐\"}\n\n		//TODO 普通序列化\n		UserDO user1 = (UserDO) JSON.parse(userJson);\n		System.out.println(user1.getAge());\n		//输出 12\n\n		//TODO 指定Class信息反序列化\n		UserDO user2 = JSON.parseObject(userJson,UserDO.class);\n		System.out.println(user2.getName());\n		//输出 乐乐\n\n```\n5. 时间\n```java\n//TODO （1）FastJSON将java.util.Date转成long。\n		String dateJson1 = JSON.toJSONString(new Date());\n		System.out.println(dateJson1);\n		System.out.println(\"==========================================\");\n\n		//输出 1547900848449\n		//TODO（2）使用SerializerFeature特性格式化日期。\n		String dateJson2 = JSON.toJSONString(new Date(), SerializerFeature.WriteDateUseDateFormat);\n		System.out.println(dateJson2);\n		System.out.println(\"==========================================\");\n\n		//输出 \"2019-01-19 20:29:24\"\n		//TODO（3）指定输出日期格式\n		String dateJson3 = JSON.toJSONStringWithDateFormat(new Date(), \"yyyy-MM-dd HH:mm:ss\");\n		System.out.println(dateJson3);\n		System.out.println(\"==========================================\");\n		//输出\"2019-01-19 20:32:34\"\n\n```', '', 0, 'FastJSON引入依赖或者Jar包&lt;dependency&gt;&lt;groupId&gt;com.alibaba&lt;/groupId&gt;&lt;artifactId&gt;fastjson&lt;/artifactId&gt;&lt;version&gt;1.1.23&lt;/v', '', 'http://111.229.114.126:8089/upload/2020/3/u=689510063,2684890774&fm=26&gp=0-053490f102584b5a9aa55698f26b6120.jpg', 'Alibaba JSON', 0, 'json', 30, 0, NULL, NULL, 'json');
INSERT INTO `posts` VALUES (0, 34, '2020-04-04 12:53:15', 0, '2020-04-15 10:07:02', 0, 0, '2020-04-15 10:07:02', '<h2 id=\"java常用工具类\">JAVA常用工具类</h2>\n<p>目录<br />\n- 第一部分：常用的16个工具类<br />\n- 第二部分：常用的测试库（链接及用法）<br />\n- 第三部分：java开发常用工具类（正则校验）</p>\n<h4 id=\"第一部分常用的16个工具类\">第一部分：常用的16个工具类</h4>\n<pre><code class=\"language-xml\">&lt;!-- https://mvnrepository.com/artifact/org.apache.commons/org.apache.commons.lang --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;\n    &lt;artifactId&gt;org.apache.commons.lang&lt;/artifactId&gt;\n    &lt;version&gt;2.4.0&lt;/version&gt;\n&lt;/dependency&gt;\n\n</code></pre>\n<h5 id=\"一orgapachecommonsioioutils\">一、org.apache.commons.io.IOUtils</h5>\n<p>1、closeQuietly 关闭一个IO流、socket、或者selector且不抛出异常。通常放在finally块。</p>\n<p>2、toString 转换IO流、Uri、byte[]为String。</p>\n<p>3、copy IO流数据复制，从输入流写到输出流中，最大支持2GB。</p>\n<p>4、toByteArray 从输入流、URI获取byte[]。</p>\n<p>5、write 把字节、字符等写入输出流。</p>\n<p>6、toInputStream 把字符转换为输入流。</p>\n<p>7、readLines 从输入流中读取多行数据，返回List</p>\n<p>8、copyLarge 同copy，支持2GB以上数据的复制。</p>\n<p>9、lineIterator 从输入流返回一个迭代器，</p>\n<p>10、根据参数要求读取的数据量，全部读取，如果数据不够，则失败。</p>\n<h5 id=\"二orgapachecommonsiofileutils\">二、org.apache.commons.io.FileUtils</h5>\n<p>1、deleteDirectory 删除文件夹</p>\n<p>2、readFileToString 以字符形式读取文件内容。</p>\n<p>3、deleteQueitly 删除文件或文件夹且不会抛出异常。</p>\n<p>4、copyFile 复制文件</p>\n<p>5、writeStringToFile 把字符写到目标文件，如果文件不存在，则创建。</p>\n<p>6、forceMkdir 强制创建文件夹，如果该文件夹父级目录不存在，则创建父级。</p>\n<p>7、write 把字符写到指定文件中</p>\n<p>8、listFiles 列举某个目录下的文件(根据过滤器)</p>\n<p>9、copyDirectory 复制文件夹</p>\n<p>10、forceDelete 强制删除文件</p>\n<h5 id=\"三orgapachecommonslangstringutils\">三、org.apache.commons.lang.StringUtils</h5>\n<p>1、isBlank 字符串是否为空 (trim后判断)</p>\n<p>2、isEmpty 字符串是否为空 (不trim并判断)</p>\n<p>3、equals 字符串是否相等</p>\n<p>4、join 合并数组为单一字符串，可传分隔符</p>\n<p>5、split 分割字符串</p>\n<p>6、EMPTY 空字符串</p>\n<p>7、trimToNull trim后为空字符串则转换为null</p>\n<p>8、replace 替换字符串</p>\n<h5 id=\"四orgapachehttputilentityutils\">四、org.apache.http.util.EntityUtils</h5>\n<p>1、toString 把Entity转换为字符串</p>\n<p>2、consume 确保Entity中的内容全部被消费。可以看到源码里又一次消费了Entity的内容，假如用户没有消费，那调用Entity时候将会把它消费掉。</p>\n<p>3、toByteArray 把Entity转换为字节流</p>\n<p>4、consumeQuietly 和consume一样，但不抛异常</p>\n<p>5、getContentCharset 获取内容的编码</p>\n<h5 id=\"五orgapachecommonslang3stringutils\">五、org.apache.commons.lang3.StringUtils</h5>\n<p>1、isBlank 字符串是否为空 (trim后判断)</p>\n<p>2、isEmpty 字符串是否为空 (不trim并判断)</p>\n<p>3、equals 字符串是否相等</p>\n<p>4、join 合并数组为单一字符串，可传分隔符</p>\n<p>5、split 分割字符串</p>\n<p>6、EMPTY 空字符串</p>\n<p>7、replace 替换字符串</p>\n<p>9、capitalize 首字符大写</p>\n<h5 id=\"六orgapachecommonsiofilenameutils\">六、org.apache.commons.io.FilenameUtils</h5>\n<p>1、getExtension 返回文件后缀名</p>\n<p>2、getBaseName 返回文件名，不包含后缀名</p>\n<p>3、getName 返回文件全名</p>\n<p>4、concat 按命令行风格组合文件路径(详见方法注释)</p>\n<p>5、removeExtension 删除后缀名</p>\n<p>6、normalize 使路径正常化</p>\n<p>7、wildcardMatch 匹配通配符</p>\n<p>8、seperatorToUnix 路径分隔符改成unix系统格式的，即/</p>\n<p>9、getFullPath 获取文件路径，不包括文件名</p>\n<p>10、isExtension 检查文件后缀名是不是传入参数(List)中的一个</p>\n<h5 id=\"七orgspringframeworkutilstringutils\">七、org.springframework.util.StringUtils</h5>\n<p>1、hasText 检查字符串中是否包含文本</p>\n<p>2、hasLength 检测字符串是否长度大于0</p>\n<p>3、isEmpty 检测字符串是否为空（若传入为对象，则判断对象是否为null）</p>\n<p>4、commaDelimitedStringToArray 逗号分隔的String转换为数组</p>\n<p>5、collectionToDelimitedString 把集合转为CSV格式字符串</p>\n<p>6、replace 替换字符串</p>\n<p>7、delimitedListToStringArray 相当于split</p>\n<p>8、uncapitalize 首字母小写</p>\n<p>9、collectionToDelimitedCommaString 把集合转为CSV格式字符串</p>\n<p>10、tokenizeToStringArray 和split基本一样，但能自动去掉空白的单词</p>\n<h5 id=\"八orgapachecommonslangarrayutils\">八、org.apache.commons.lang.ArrayUtils</h5>\n<p>1、contains 是否包含某字符串</p>\n<p>2、addAll 添加所有</p>\n<p>3、clone 克隆一个数组</p>\n<p>4、isEmpty 是否空数组</p>\n<p>5、add 向数组添加元素</p>\n<p>6、subarray 截取数组</p>\n<p>7、indexOf 查找下标</p>\n<p>8、isEquals 比较数组是否相等</p>\n<p>9、toObject 基础类型数据数组转换为对应的Object数组</p>\n<h5 id=\"九orgapachecommonslangstringescapeutils支持编码转换\">九、org.apache.commons.lang.StringEscapeUtils支持编码转换</h5>\n<p>escapeXml unEscapeXml。</p>\n<p>此外，还支持html、java、JavaScript、sql、csv等</p>\n<h5 id=\"十orgapachehttpclientutilsurlencodedutils\">十、org.apache.http.client.utils.URLEncodedUtils</h5>\n<p>1、format 格式化参数，返回一个HTTP POST或者HTTP PUT可用 application/x-www-form-urlencoded字符串</p>\n<p>2、parse 把String或者URI等转换为List</p>\n<h5 id=\"十一orgapachecommonscodecdigestdigestutils\">十一、org.apache.commons.codec.digest.DigestUtils</h5>\n<p>1、md5Hex MD5加密，返回32位</p>\n<p>2、sha1Hex SHA-1加密</p>\n<p>3、sha256Hex SHA-256加密</p>\n<p>4、sha512Hex SHA-512加密</p>\n<p>5、md5 MD5加密，返回16位</p>\n<h5 id=\"十二orgapachecommonscollectionscollectionutils\">十二、org.apache.commons.collections.CollectionUtils</h5>\n<p>1、isEmpty 是否为空</p>\n<p>2、select 根据条件筛选集合元素</p>\n<p>3、transform 根据指定方法处理集合元素，类似List的map()。</p>\n<p>4、filter 过滤元素，雷瑟List的filter()</p>\n<p>5、find 基本和select一样</p>\n<p>6、collect 和transform 差不多一样，但是返回新数组</p>\n<p>7、forAllDo 调用每个元素的指定方法。</p>\n<p>8、isEqualCollection 判断两个集合是否一致</p>\n<h5 id=\"十三orgapachecommonslang3arrayutils\">十三、org.apache.commons.lang3.ArrayUtils</h5>\n<p>1、contains 是否包含某字符串</p>\n<p>2、addAll 添加所有</p>\n<p>3、clone 克隆一个数组</p>\n<p>4、isEmpty 是否空数组</p>\n<p>5、add 向数组添加元素</p>\n<p>6、subarray 截取数组</p>\n<p>7、indexOf 查找下标</p>\n<p>8、isEquals 比较数组是否相等</p>\n<p>9、toObject 基础类型数据数组转换为对应的Object数组</p>\n<h5 id=\"十四orgapachecommonsbeanutilspropertyutils\">十四、org.apache.commons.beanutils.PropertyUtils</h5>\n<p>1、getProperty 获取对象属性值</p>\n<p>2、setProperty 设置对象属性值</p>\n<p>3、getPropertyDiscriptor 获取属性描述器</p>\n<p>4、isReadable 检查属性是否可访问</p>\n<p>5、copyProperties 复制属性值，从一个对象到另一个对象</p>\n<p>6、getPropertyDiscriptors 获取所有属性描述器</p>\n<p>7、isWriteable 检查属性是否可写</p>\n<p>8、getPropertyType 获取对象属性类型</p>\n<h5 id=\"十五orgapachecommonslang3stringescapeutils\">十五、org.apache.commons.lang3.StringEscapeUtils</h5>\n<p>支持编码转换</p>\n<p>escapeJson unEscapeJson。</p>\n<p>此外，还支持html、java、JavaScript、sql、csv、xml等</p>\n<h5 id=\"十六orgapachecommonsbeanutilsbeanutils\">十六、org.apache.commons.beanutils.BeanUtils</h5>\n<p>1、copyPeoperties 复制属性值，从一个对象到另一个对象</p>\n<p>2、getProperty 获取对象属性值</p>\n<p>3、setProperty 设置对象属性值</p>\n<p>4、populate 根据Map给属性复制</p>\n<p>5、copyPeoperty 复制单个值，从一个对象到另一个对象。</p>\n<p>6、cloneBean 克隆</p>\n<h6 id=\"第二部分常用的测试库链接及用法\">第二部分：常用的测试库（链接及用法）</h6>\n<p>以下提供一些类库的测试，希望对大家有用：</p>\n<table>\n<thead>\n<tr><th> </th><th> </th></tr>\n</thead>\n<tbody>\n<tr><td> </td><td><li>Java命令行选项解析之Commons-CLI &amp; Args4J &amp; JCommander<a href=\"http://rensanning.iteye.com/blog/2161201\" rel=\"nofollow\" target=\"_blank\">详细内容</a></li></td></tr>\n<tr><td> </td><td><li>Java调用Native API之JNA<a href=\"http://rensanning.iteye.com/blog/2154075\" rel=\"nofollow\" target=\"_blank\">详细内容</a></li></td></tr>\n<tr><td> </td><td><li>Java执行SSH/SCP之JSch<a href=\"http://rensanning.iteye.com/blog/2109675\" rel=\"nofollow\" target=\"_blank\">详细内容</a></li></td></tr>\n<tr><td> </td><td><li>Java元组类型之javatuples<a href=\"http://rensanning.iteye.com/blog/2068554\" rel=\"nofollow\" target=\"_blank\">详细内容</a></li></td></tr>\n<tr><td> </td><td><li>Java读写Excel之POI超入门<a href=\"http://rensanning.iteye.com/blog/1538591\" rel=\"nofollow\" target=\"_blank\">详细内容</a></li></td></tr>\n<tr><td> </td><td><li>Java操作PDF之iText超入门<a href=\"http://rensanning.iteye.com/blog/1538689\" rel=\"nofollow\" target=\"_blank\">详细内容</a></li></td></tr>\n<tr><td> </td><td><li>Java构建工具之Ant<a href=\"http://rensanning.iteye.com/blog/1540336\" rel=\"nofollow\" target=\"_blank\">详细内容</a></li></td></tr>\n<tr><td> </td><td><li>Java模板引擎之FreeMarker<a href=\"http://rensanning.iteye.com/blog/1540613\" rel=\"nofollow\" target=\"_blank\">详细内容</a></li></td></tr>\n<tr><td> </td><td><li>Java生成缩略图之Thumbnailator<a href=\"http://rensanning.iteye.com/blog/1545708\" rel=\"nofollow\" target=\"_blank\">详细内容</a></li></td></tr>\n<tr><td> </td><td><li>Java日期计算之Joda-Time<a href=\"http://rensanning.iteye.com/blog/1546652\" rel=\"nofollow\" target=\"_blank\">详细内容</a></li></td></tr>\n<tr><td> </td><td><li>Java工具类之Apache的Commons Lang和BeanUtils<a href=\"http://rensanning.iteye.com/blog/1547845\" rel=\"nofollow\" target=\"_blank\">详细内容</a></li></td></tr>\n<tr><td> </td><td><li>Java集合框架之fastutil<a href=\"http://rensanning.iteye.com/blog/1548162\" rel=\"nofollow\" target=\"_blank\">详细内容</a></li></td></tr>\n<tr><td> </td><td><li>Java网络通信之HttpClient<a href=\"http://rensanning.iteye.com/blog/1550436\" rel=\"nofollow\" target=\"_blank\">详细内容</a></li></td></tr>\n<tr><td> </td><td><li>Java解析HTML之NekoHTML<a href=\"http://rensanning.iteye.com/blog/1551831\" rel=\"nofollow\" target=\"_blank\">详细内容</a></li></td></tr>\n<tr><td> </td><td><li>Java读写CSV之SuperCSV<a href=\"http://rensanning.iteye.com/blog/1552053\" rel=\"nofollow\" target=\"_blank\">详细内容</a></li></td></tr>\n<tr><td> </td><td><li>Java作业调度之Quartz<a href=\"http://rensanning.iteye.com/blog/1836263\" rel=\"nofollow\" target=\"_blank\">详细内容</a></li></td></tr>\n<tr><td> </td><td><li>Java压缩解压ZIP之Zip4j<a href=\"http://rensanning.iteye.com/blog/1836727\" rel=\"nofollow\" target=\"_blank\">详细内容</a></li></td></tr>\n<tr><td> </td><td><li>Java嵌入式NoSQL数据库之Berkeley DB Java Edition<a href=\"http://rensanning.iteye.com/blog/1872481\" rel=\"nofollow\" target=\"_blank\">详细内容</a></li></td></tr>\n<tr><td> </td><td><li>Java单元测试之邮件测试-GreenMail<a href=\"http://rensanning.iteye.com/blog/2001617\" rel=\"nofollow\" target=\"_blank\">详细内容</a></li></td></tr>\n<tr><td> </td><td><li>Java单元测试之代码覆盖率-JaCoCo<a href=\"http://rensanning.iteye.com/blog/2002371\" rel=\"nofollow\" target=\"_blank\">详细内容</a></li></td></tr>\n<tr><td> </td><td><li>Java日文分词器之Kuromoji<a href=\"http://rensanning.iteye.com/blog/2008575\" rel=\"nofollow\" target=\"_blank\">详细内容</a></li></td></tr>\n<tr><td> </td><td><li>Java数学表达式计算(Expression Evaluator)<a href=\"http://rensanning.iteye.com/blog/2011558\" rel=\"nofollow\" target=\"_blank\">详细内容</a></li></td></tr>\n<tr><td> </td><td><li>Java检测无用代码之UCDetector<a href=\"http://rensanning.iteye.com/blog/2012010\" rel=\"nofollow\" target=\"_blank\">详细内容</a></li></td></tr>\n<tr><td> </td><td><li>Java简化臃肿代码之Lombok<a href=\"http://rensanning.iteye.com/blog/1930853\" rel=\"nofollow\" target=\"_blank\">详细内容</a></li></td></tr>\n<tr><td> </td><td></ul></td></tr>\n</tbody>\n</table>\n<p>第三部分：java开发常用工具类（正则校验）<br />\n原文链接<a href=\"https://www.cnblogs.com/ITzhangda/p/9146452.html\">https://www.cnblogs.com/ITzhangda/p/9146452.html</a></p>\n<p>java正则表达式的匹配包括：</p>\n<ul>\n<li>\n<p>邮箱，手机，姓名，昵称，身份证号，银行卡号等；</p>\n</li>\n<li>\n<p>生成6位随机数；</p>\n</li>\n<li>\n<p>对url中字符串进行编码和解码；</p>\n</li>\n<li>\n<p>获取客户端ip地址；</p>\n</li>\n<li>\n<p>获取系统当前时间；</p>\n</li>\n<li>\n<p>生成32位编码不含横线；</p>\n</li>\n<li>\n<p>生成MD5编码；</p>\n</li>\n<li>\n<p>通过身份证获取性别；</p>\n</li>\n<li>\n<p>通过身份证获取生日；</p>\n</li>\n<li>\n<p>手机号中间4位替换成星号；</p>\n</li>\n<li>\n<p>邮箱地址加星号；</p>\n</li>\n<li>\n<p>生成随机密码；</p>\n</li>\n</ul>\n', 0, '## JAVA常用工具类\n\n目录\n\\- 第一部分：常用的16个工具类\n\\- 第二部分：常用的测试库（链接及用法）\n\\- 第三部分：java开发常用工具类（正则校验）\n\n#### 第一部分：常用的16个工具类\n```xml\n<!-- https://mvnrepository.com/artifact/org.apache.commons/org.apache.commons.lang -->\n<dependency>\n    <groupId>org.apache.commons</groupId>\n    <artifactId>org.apache.commons.lang</artifactId>\n    <version>2.4.0</version>\n</dependency>\n\n```\n\n\n##### 一、org.apache.commons.io.IOUtils\n\n1、closeQuietly 关闭一个IO流、socket、或者selector且不抛出异常。通常放在finally块。\n\n2、toString 转换IO流、Uri、byte[]为String。\n\n3、copy IO流数据复制，从输入流写到输出流中，最大支持2GB。\n\n4、toByteArray 从输入流、URI获取byte[]。\n\n5、write 把字节、字符等写入输出流。\n\n6、toInputStream 把字符转换为输入流。\n\n7、readLines 从输入流中读取多行数据，返回List\n\n8、copyLarge 同copy，支持2GB以上数据的复制。\n\n9、lineIterator 从输入流返回一个迭代器，\n\n10、根据参数要求读取的数据量，全部读取，如果数据不够，则失败。\n\n##### 二、org.apache.commons.io.FileUtils\n\n1、deleteDirectory 删除文件夹\n\n2、readFileToString 以字符形式读取文件内容。\n\n3、deleteQueitly 删除文件或文件夹且不会抛出异常。\n\n4、copyFile 复制文件\n\n5、writeStringToFile 把字符写到目标文件，如果文件不存在，则创建。\n\n6、forceMkdir 强制创建文件夹，如果该文件夹父级目录不存在，则创建父级。\n\n7、write 把字符写到指定文件中\n\n8、listFiles 列举某个目录下的文件(根据过滤器)\n\n9、copyDirectory 复制文件夹\n\n10、forceDelete 强制删除文件\n\n##### 三、org.apache.commons.lang.StringUtils\n\n1、isBlank 字符串是否为空 (trim后判断)\n\n2、isEmpty 字符串是否为空 (不trim并判断)\n\n3、equals 字符串是否相等\n\n4、join 合并数组为单一字符串，可传分隔符\n\n5、split 分割字符串\n\n6、EMPTY 空字符串\n\n7、trimToNull trim后为空字符串则转换为null\n\n8、replace 替换字符串\n\n##### 四、org.apache.http.util.EntityUtils\n\n1、toString 把Entity转换为字符串\n\n2、consume 确保Entity中的内容全部被消费。可以看到源码里又一次消费了Entity的内容，假如用户没有消费，那调用Entity时候将会把它消费掉。\n\n3、toByteArray 把Entity转换为字节流\n\n4、consumeQuietly 和consume一样，但不抛异常\n\n5、getContentCharset 获取内容的编码\n\n##### 五、org.apache.commons.lang3.StringUtils\n\n1、isBlank 字符串是否为空 (trim后判断)\n\n2、isEmpty 字符串是否为空 (不trim并判断)\n\n3、equals 字符串是否相等\n\n4、join 合并数组为单一字符串，可传分隔符\n\n5、split 分割字符串\n\n6、EMPTY 空字符串\n\n7、replace 替换字符串\n\n9、capitalize 首字符大写\n\n##### 六、org.apache.commons.io.FilenameUtils\n\n1、getExtension 返回文件后缀名\n\n2、getBaseName 返回文件名，不包含后缀名\n\n3、getName 返回文件全名\n\n4、concat 按命令行风格组合文件路径(详见方法注释)\n\n5、removeExtension 删除后缀名\n\n6、normalize 使路径正常化\n\n7、wildcardMatch 匹配通配符\n\n8、seperatorToUnix 路径分隔符改成unix系统格式的，即/\n\n9、getFullPath 获取文件路径，不包括文件名\n\n10、isExtension 检查文件后缀名是不是传入参数(List)中的一个\n\n##### 七、org.springframework.util.StringUtils\n\n1、hasText 检查字符串中是否包含文本\n\n2、hasLength 检测字符串是否长度大于0\n\n3、isEmpty 检测字符串是否为空（若传入为对象，则判断对象是否为null）\n\n4、commaDelimitedStringToArray 逗号分隔的String转换为数组\n\n5、collectionToDelimitedString 把集合转为CSV格式字符串\n\n6、replace 替换字符串\n\n7、delimitedListToStringArray 相当于split\n\n8、uncapitalize 首字母小写\n\n9、collectionToDelimitedCommaString 把集合转为CSV格式字符串\n\n10、tokenizeToStringArray 和split基本一样，但能自动去掉空白的单词\n\n##### 八、org.apache.commons.lang.ArrayUtils\n\n1、contains 是否包含某字符串\n\n2、addAll 添加所有\n\n3、clone 克隆一个数组\n\n4、isEmpty 是否空数组\n\n5、add 向数组添加元素\n\n6、subarray 截取数组\n\n7、indexOf 查找下标\n\n8、isEquals 比较数组是否相等\n\n9、toObject 基础类型数据数组转换为对应的Object数组\n\n##### 九、org.apache.commons.lang.StringEscapeUtils支持编码转换\n\nescapeXml unEscapeXml。\n\n此外，还支持html、java、JavaScript、sql、csv等\n\n##### 十、org.apache.http.client.utils.URLEncodedUtils\n\n1、format 格式化参数，返回一个HTTP POST或者HTTP PUT可用 application/x-www-form-urlencoded字符串\n\n2、parse 把String或者URI等转换为List\n\n##### 十一、org.apache.commons.codec.digest.DigestUtils\n\n1、md5Hex MD5加密，返回32位\n\n2、sha1Hex SHA-1加密\n\n3、sha256Hex SHA-256加密\n\n4、sha512Hex SHA-512加密\n\n5、md5 MD5加密，返回16位\n\n##### 十二、org.apache.commons.collections.CollectionUtils\n\n1、isEmpty 是否为空\n\n2、select 根据条件筛选集合元素\n\n3、transform 根据指定方法处理集合元素，类似List的map()。\n\n4、filter 过滤元素，雷瑟List的filter()\n\n5、find 基本和select一样\n\n6、collect 和transform 差不多一样，但是返回新数组\n\n7、forAllDo 调用每个元素的指定方法。\n\n8、isEqualCollection 判断两个集合是否一致\n\n##### 十三、org.apache.commons.lang3.ArrayUtils\n\n1、contains 是否包含某字符串\n\n2、addAll 添加所有\n\n3、clone 克隆一个数组\n\n4、isEmpty 是否空数组\n\n5、add 向数组添加元素\n\n6、subarray 截取数组\n\n7、indexOf 查找下标\n\n8、isEquals 比较数组是否相等\n\n9、toObject 基础类型数据数组转换为对应的Object数组\n\n##### 十四、org.apache.commons.beanutils.PropertyUtils\n\n1、getProperty 获取对象属性值\n\n2、setProperty 设置对象属性值\n\n3、getPropertyDiscriptor 获取属性描述器\n\n4、isReadable 检查属性是否可访问\n\n5、copyProperties 复制属性值，从一个对象到另一个对象\n\n6、getPropertyDiscriptors 获取所有属性描述器\n\n7、isWriteable 检查属性是否可写\n\n8、getPropertyType 获取对象属性类型\n\n##### 十五、org.apache.commons.lang3.StringEscapeUtils\n\n支持编码转换\n\nescapeJson unEscapeJson。\n\n此外，还支持html、java、JavaScript、sql、csv、xml等\n\n##### 十六、org.apache.commons.beanutils.BeanUtils\n\n1、copyPeoperties 复制属性值，从一个对象到另一个对象\n\n2、getProperty 获取对象属性值\n\n3、setProperty 设置对象属性值\n\n4、populate 根据Map给属性复制\n\n5、copyPeoperty 复制单个值，从一个对象到另一个对象。\n\n6、cloneBean 克隆\n\n###### 第二部分：常用的测试库（链接及用法）\n\n以下提供一些类库的测试，希望对大家有用：\n\n|      |                                                              |\n| ---- | --------------------------------------------------------\n|      | <li>Java命令行选项解析之Commons-CLI &amp; Args4J &amp; JCommander<a href=\"http://rensanning.iteye.com/blog/2161201\" rel=\"nofollow\" target=\"_blank\">详细内容</a></li> |\n|      | <li>Java调用Native API之JNA<a href=\"http://rensanning.iteye.com/blog/2154075\" rel=\"nofollow\" target=\"_blank\">详细内容</a></li> |\n|      | <li>Java执行SSH/SCP之JSch<a href=\"http://rensanning.iteye.com/blog/2109675\" rel=\"nofollow\" target=\"_blank\">详细内容</a></li> |\n|      | <li>Java元组类型之javatuples<a href=\"http://rensanning.iteye.com/blog/2068554\" rel=\"nofollow\" target=\"_blank\">详细内容</a></li> |\n|      | <li>Java读写Excel之POI超入门<a href=\"http://rensanning.iteye.com/blog/1538591\" rel=\"nofollow\" target=\"_blank\">详细内容</a></li> |\n|      | <li>Java操作PDF之iText超入门<a href=\"http://rensanning.iteye.com/blog/1538689\" rel=\"nofollow\" target=\"_blank\">详细内容</a></li> |\n|      | <li>Java构建工具之Ant<a href=\"http://rensanning.iteye.com/blog/1540336\" rel=\"nofollow\" target=\"_blank\">详细内容</a></li> |\n|      | <li>Java模板引擎之FreeMarker<a href=\"http://rensanning.iteye.com/blog/1540613\" rel=\"nofollow\" target=\"_blank\">详细内容</a></li> |\n|      | <li>Java生成缩略图之Thumbnailator<a href=\"http://rensanning.iteye.com/blog/1545708\" rel=\"nofollow\" target=\"_blank\">详细内容</a></li> |\n|      | <li>Java日期计算之Joda-Time<a href=\"http://rensanning.iteye.com/blog/1546652\" rel=\"nofollow\" target=\"_blank\">详细内容</a></li> |\n|      | <li>Java工具类之Apache的Commons Lang和BeanUtils<a href=\"http://rensanning.iteye.com/blog/1547845\" rel=\"nofollow\" target=\"_blank\">详细内容</a></li> |\n|      | <li>Java集合框架之fastutil<a href=\"http://rensanning.iteye.com/blog/1548162\" rel=\"nofollow\" target=\"_blank\">详细内容</a></li> |\n|      | <li>Java网络通信之HttpClient<a href=\"http://rensanning.iteye.com/blog/1550436\" rel=\"nofollow\" target=\"_blank\">详细内容</a></li> |\n|      | <li>Java解析HTML之NekoHTML<a href=\"http://rensanning.iteye.com/blog/1551831\" rel=\"nofollow\" target=\"_blank\">详细内容</a></li> |\n|      | <li>Java读写CSV之SuperCSV<a href=\"http://rensanning.iteye.com/blog/1552053\" rel=\"nofollow\" target=\"_blank\">详细内容</a></li> |\n|      | <li>Java作业调度之Quartz<a href=\"http://rensanning.iteye.com/blog/1836263\" rel=\"nofollow\" target=\"_blank\">详细内容</a></li> |\n|      | <li>Java压缩解压ZIP之Zip4j<a href=\"http://rensanning.iteye.com/blog/1836727\" rel=\"nofollow\" target=\"_blank\">详细内容</a></li> |\n|      | <li>Java嵌入式NoSQL数据库之Berkeley DB Java Edition<a href=\"http://rensanning.iteye.com/blog/1872481\" rel=\"nofollow\" target=\"_blank\">详细内容</a></li> |\n|      | <li>Java单元测试之邮件测试-GreenMail<a href=\"http://rensanning.iteye.com/blog/2001617\" rel=\"nofollow\" target=\"_blank\">详细内容</a></li> |\n|      | <li>Java单元测试之代码覆盖率-JaCoCo<a href=\"http://rensanning.iteye.com/blog/2002371\" rel=\"nofollow\" target=\"_blank\">详细内容</a></li> |\n|      | <li>Java日文分词器之Kuromoji<a href=\"http://rensanning.iteye.com/blog/2008575\" rel=\"nofollow\" target=\"_blank\">详细内容</a></li> |\n|      | <li>Java数学表达式计算(Expression Evaluator)<a href=\"http://rensanning.iteye.com/blog/2011558\" rel=\"nofollow\" target=\"_blank\">详细内容</a></li> |\n|      | <li>Java检测无用代码之UCDetector<a href=\"http://rensanning.iteye.com/blog/2012010\" rel=\"nofollow\" target=\"_blank\">详细内容</a></li> |\n|      | <li>Java简化臃肿代码之Lombok<a href=\"http://rensanning.iteye.com/blog/1930853\" rel=\"nofollow\" target=\"_blank\">详细内容</a></li> |                                                \n|      | </ul>                                                        \n\n第三部分：java开发常用工具类（正则校验）\n原文链接https://www.cnblogs.com/ITzhangda/p/9146452.html\n\njava正则表达式的匹配包括：\n\n- 邮箱，手机，姓名，昵称，身份证号，银行卡号等；\n- 生成6位随机数；\n\n- 对url中字符串进行编码和解码；\n- 获取客户端ip地址；\n- 获取系统当前时间；\n- 生成32位编码不含横线；\n- 生成MD5编码；\n- 通过身份证获取性别；\n- 通过身份证获取生日；\n- 手机号中间4位替换成星号；\n- 邮箱地址加星号；\n- 生成随机密码；', '', 0, 'JAVA常用工具类目录-第一部分：常用的16个工具类-第二部分：常用的测试库（链接及用法）-第三部分：java开发常用工具类（正则校验）第一部分：常用的16个工具类&lt;!--https://mvnrepository.com/artifact/org.apache.commons/org.apa', '', 'http://luna.iszychen.club:8089/upload/2020/2/u=3536793445,2882105203&fm=26&gp=0-1b8ecace7070400cabacdbfb1421b43f.jpg', 'Java Util', 0, 'util', 19, 0, NULL, NULL, 'util');
INSERT INTO `posts` VALUES (0, 35, '2020-04-05 12:47:54', 0, '2020-04-15 10:06:18', 0, 0, '2020-04-15 10:06:18', '<h3 id=\"1-构建正则表达式\">1. 构建正则表达式</h3>\n<ul>\n<li>\n<p>pattern() 返回正则表达式的字符串形式,其实就是返回Pattern.complile(String regex)的regex参数</p>\n<p><code>p.pattern();//返回 \\d+</code></p>\n</li>\n<li>\n<p>split(CharSequence input)方法,用于分隔字符串,并返回一个String[]</p>\n<p><code>String[] str = p.split(&quot;我的QQ是:456456我的电话是:0532214我的邮箱是:aaa@aaa.com&quot;); System.out.println(Arrays.toString(str));</code></p>\n</li>\n<li>\n<p>Pattern.matchers(String regex,CharSequence input)是一个静态方法,用于快速匹配字符串,该方法适合用于只匹配一次,且匹配全部字符串.</p>\n</li>\n</ul>\n<pre><code class=\"language-java\">		System.out.println(Pattern.matches(&quot;\\\\d+&quot;, &quot;2223&quot;));\n		//返回true\n		System.out.println(Pattern.matches(&quot;\\\\d+&quot;, &quot;2223aa&quot;));\n		//返回false,需要匹配到所有字符串才能返回true,这里aa不能匹配到\n		System.out.println(Pattern.matches(&quot;\\\\d+&quot;, &quot;22bb23&quot;));\n		//返回false,需要匹配到所有字符串才能返回true,这里bb不能匹配到\n</code></pre>\n<ul>\n<li>//Pattern.matcher(CharSequence input)返回一个Matcher对象.</li>\n</ul>\n<pre><code class=\"language-java\">	Matcher mq = p.matcher(&quot;22bb23&quot;);\n		Pattern mx = mq.pattern();\n		//返回 p 也就是返回该 Matcher 对象是由哪个 Pattern 对象的创建的\n		System.out.println(p.toString());\n		System.out.println(mx.equals(p));\n</code></pre>\n<h3 id=\"2-常用方法\">2. 常用方法</h3>\n<p>Matcher.matches()/ Matcher.lookingAt()/ Matcher.find() * 三个方法均返回boolean类型,当匹配到时返回true,没匹配到则返回false</p>\n<pre><code class=\"language-java\">//TODO matches()对整个字符串进行匹配,只有整个字符串都匹配了才返回true\n		Matcher m1 = p.matcher(&quot;22bb23&quot;);\n		System.out.println(m1.matches());\n		//返回false,因为bb不能被\\d+匹配,导致整个字符串匹配未成功.\n		Matcher m2 = p.matcher(&quot;2223&quot;);\n		System.out.println(m2.matches());\n		//返回true,因为\\d+匹配到了整个字符串\n\n		//TODO lookingAt()对前面的字符串进行匹配,只有匹配到的字符串在最前面才返回true\n		Matcher m3 = p.matcher(&quot;22bb23&quot;);\n		System.out.println(m3.lookingAt());\n		//返回true,因为\\d+匹配到了前面的22\n		Matcher m4 = p.matcher(&quot;aa2223&quot;);\n		System.out.println(m4.lookingAt());\n		//返回false,因为\\d+不能匹配前面的aa\n\n		// TODO find()对字符串进行匹配,匹配到的字符串可以在任何位置.\n		Matcher m5 = p.matcher(&quot;22bb23&quot;);\n		System.out.println(m5.find());\n		//返回true\n		Matcher m6 = p.matcher(&quot;aa2223&quot;);\n		System.out.println(m6.find());\n		//返回true\n		Matcher m7 = p.matcher(&quot;aa2223bb&quot;);\n		System.out.println(m7.find());\n		//返回true\n		Matcher m8 = p.matcher(&quot;aabb&quot;);\n		System.out.println(m8.find());\n		//返回false\n</code></pre>\n<h3 id=\"3-获取位置方法\">3. 获取位置方法</h3>\n<p>Mathcer.start()/ Matcher.end()/ Matcher.group() * * 当使用matches(),lookingAt(),find()执行匹配操作后,就可以利用以上三个方法得到更详细的信息.</p>\n<pre><code class=\"language-java\">//TODO start()返回匹配到的子字符串在字符串中的索引位置.\n		//TODO end()返回匹配到的子字符串的最后一个字符在字符串中的索引位置.\n		//TODO group()返回匹配到的子字符串\n		Matcher mz = p.matcher(&quot;aaa2223bb&quot;);\n		System.out.println(mz.find());\n		//匹配2223\n		System.out.println(mz.start());\n		//返回3\n		System.out.println(mz.end());\n		//返回7,返回的是2223后的索引号\n		System.out.println(mz.group());\n		//返回2223\n\n		Matcher mw = p.matcher(&quot;2223bb&quot;);\n		System.out.println(mw.lookingAt());\n		//匹配2223\n		System.out.println(mw.start());\n		//返回0,由于lookingAt()只能匹配前面的字符串,所以当使用lookingAt()匹配时,start()方法总是返回0\n		System.out.println(mw.end());\n		//返回4\n		System.out.println(mw.group());\n		//返回2223\n\n		Matcher mn = p.matcher(&quot;123213&quot;);\n		System.out.println(mn.matches());\n		//匹配整个字符串\n		System.out.println(mn.start());\n		//匹配成功返回0 ,异常,因为没有匹配到\n		System.out.println(mn.end());\n		//匹配成功返回结尾数,因为matches()需要匹配所有字符串 不成功抛出异常\n		System.out.println(mn.group());\n		//成功返回字符 失败抛出异常\n\n		/**\n		 * 正则表达式的分组在java中是怎么使用的.\n		 * start(),end(),group()均有一个重载方法它们是start(int i),end(int i),group(int i)专用于分组操作,Mathcer 类还有一个groupCount()用于返回有多少组.\n		 */\n		Pattern p=Pattern.compile(&quot;([a-z]+)(\\\\d+)&quot;);\n		Matcher m=p.matcher(&quot;aaa2223bb&quot;);\n		System.out.println(m.find());\n		//匹配aaa2223\n		System.out.println(m.groupCount());\n		//返回2,因为有2组\n		System.out.println(m.start(1));\n		//返回0 返回第一组匹配到的子字符串在字符串中的索引号\n		System.out.println(m.start(2));\n		//返回3\n		System.out.println(m.end(1));\n		//返回3 返回第一组匹配到的子字符串的最后一个字符在字符串中的索引位置.\n		System.out.println(m.end(2));\n		//返回7\n		System.out.println(m.group(1));\n		//返回aaa,返回第一组匹配到的子字符串\n		System.out.println(m.group(2));\n		//返回2223,返回第二组匹配到的子字符串\n</code></pre>\n<h3 id=\"4-分组的使用\">4. 分组的使用</h3>\n<p>一段文本,里面有很多数字,而且这些数字是分开的,我们现在要将文本中所有数字都取出</p>\n<pre><code class=\"language-java\">Pattern p=Pattern.compile(&quot;\\\\d+&quot;);\n		Matcher m=p.matcher(&quot;我的QQ是:456456 我的电话是:0532214 我的邮箱是:aaa123@aaa.com&quot;);\n//		while(m.find()) {\n//			System.out.println(m.group());\n//		}\n		// TODO 或者\n		while(m.find()) {\n			System.out.println(m.group());\n			System.out.print(&quot;start:&quot;+m.start());\n			System.out.println(&quot; end:&quot;+m.end());\n		}\n</code></pre>\n', 0, '### 1. 构建正则表达式\n\n   - pattern() 返回正则表达式的字符串形式,其实就是返回Pattern.complile(String regex)的regex参数\n\n     `p.pattern();//返回 \\d+`\n\n   - split(CharSequence input)方法,用于分隔字符串,并返回一个String[]\n\n     `String[] str = p.split(\"我的QQ是:456456我的电话是:0532214我的邮箱是:aaa@aaa.com\");\n     		System.out.println(Arrays.toString(str));`\n\n   - Pattern.matchers(String regex,CharSequence input)是一个静态方法,用于快速匹配字符串,该方法适合用于只匹配一次,且匹配全部字符串.\n\n   ```java\n   		System.out.println(Pattern.matches(\"\\\\d+\", \"2223\"));\n   		//返回true\n   		System.out.println(Pattern.matches(\"\\\\d+\", \"2223aa\"));\n   		//返回false,需要匹配到所有字符串才能返回true,这里aa不能匹配到\n   		System.out.println(Pattern.matches(\"\\\\d+\", \"22bb23\"));\n   		//返回false,需要匹配到所有字符串才能返回true,这里bb不能匹配到\n   ```\n\n   - //Pattern.matcher(CharSequence input)返回一个Matcher对象.\n\n   ```java\n   	Matcher mq = p.matcher(\"22bb23\");\n   		Pattern mx = mq.pattern();\n   		//返回 p 也就是返回该 Matcher 对象是由哪个 Pattern 对象的创建的\n   		System.out.println(p.toString());\n   		System.out.println(mx.equals(p));\n   ```\n\n### 2. 常用方法\n\n   Matcher.matches()/ Matcher.lookingAt()/ Matcher.find() * 三个方法均返回boolean类型,当匹配到时返回true,没匹配到则返回false\n\n   ```java\n   //TODO matches()对整个字符串进行匹配,只有整个字符串都匹配了才返回true\n   		Matcher m1 = p.matcher(\"22bb23\");\n   		System.out.println(m1.matches());\n   		//返回false,因为bb不能被\\d+匹配,导致整个字符串匹配未成功.\n   		Matcher m2 = p.matcher(\"2223\");\n   		System.out.println(m2.matches());\n   		//返回true,因为\\d+匹配到了整个字符串\n   \n   		//TODO lookingAt()对前面的字符串进行匹配,只有匹配到的字符串在最前面才返回true\n   		Matcher m3 = p.matcher(\"22bb23\");\n   		System.out.println(m3.lookingAt());\n   		//返回true,因为\\d+匹配到了前面的22\n   		Matcher m4 = p.matcher(\"aa2223\");\n   		System.out.println(m4.lookingAt());\n   		//返回false,因为\\d+不能匹配前面的aa\n   \n   		// TODO find()对字符串进行匹配,匹配到的字符串可以在任何位置.\n   		Matcher m5 = p.matcher(\"22bb23\");\n   		System.out.println(m5.find());\n   		//返回true\n   		Matcher m6 = p.matcher(\"aa2223\");\n   		System.out.println(m6.find());\n   		//返回true\n   		Matcher m7 = p.matcher(\"aa2223bb\");\n   		System.out.println(m7.find());\n   		//返回true\n   		Matcher m8 = p.matcher(\"aabb\");\n   		System.out.println(m8.find());\n   		//返回false\n   ```\n\n### 3. 获取位置方法\n\n   Mathcer.start()/ Matcher.end()/ Matcher.group() * * 当使用matches(),lookingAt(),find()执行匹配操作后,就可以利用以上三个方法得到更详细的信息. \n\n   ```java\n   //TODO start()返回匹配到的子字符串在字符串中的索引位置.\n   		//TODO end()返回匹配到的子字符串的最后一个字符在字符串中的索引位置.\n   		//TODO group()返回匹配到的子字符串\n   		Matcher mz = p.matcher(\"aaa2223bb\");\n   		System.out.println(mz.find());\n   		//匹配2223\n   		System.out.println(mz.start());\n   		//返回3\n   		System.out.println(mz.end());\n   		//返回7,返回的是2223后的索引号\n   		System.out.println(mz.group());\n   		//返回2223\n   \n   		Matcher mw = p.matcher(\"2223bb\");\n   		System.out.println(mw.lookingAt());\n   		//匹配2223\n   		System.out.println(mw.start());\n   		//返回0,由于lookingAt()只能匹配前面的字符串,所以当使用lookingAt()匹配时,start()方法总是返回0\n   		System.out.println(mw.end());\n   		//返回4\n   		System.out.println(mw.group());\n   		//返回2223\n   \n   		Matcher mn = p.matcher(\"123213\");\n   		System.out.println(mn.matches());\n   		//匹配整个字符串\n   		System.out.println(mn.start());\n   		//匹配成功返回0 ,异常,因为没有匹配到\n   		System.out.println(mn.end());\n   		//匹配成功返回结尾数,因为matches()需要匹配所有字符串 不成功抛出异常\n   		System.out.println(mn.group());\n   		//成功返回字符 失败抛出异常\n   \n   		/**\n   		 * 正则表达式的分组在java中是怎么使用的.\n   		 * start(),end(),group()均有一个重载方法它们是start(int i),end(int i),group(int i)专用于分组操作,Mathcer 类还有一个groupCount()用于返回有多少组.\n   		 */\n   		Pattern p=Pattern.compile(\"([a-z]+)(\\\\d+)\");\n   		Matcher m=p.matcher(\"aaa2223bb\");\n   		System.out.println(m.find());\n   		//匹配aaa2223\n   		System.out.println(m.groupCount());\n   		//返回2,因为有2组\n   		System.out.println(m.start(1));\n   		//返回0 返回第一组匹配到的子字符串在字符串中的索引号\n   		System.out.println(m.start(2));\n   		//返回3\n   		System.out.println(m.end(1));\n   		//返回3 返回第一组匹配到的子字符串的最后一个字符在字符串中的索引位置.\n   		System.out.println(m.end(2));\n   		//返回7\n   		System.out.println(m.group(1));\n   		//返回aaa,返回第一组匹配到的子字符串\n   		System.out.println(m.group(2));\n   		//返回2223,返回第二组匹配到的子字符串\n   ```\n\n### 4. 分组的使用\n\n   一段文本,里面有很多数字,而且这些数字是分开的,我们现在要将文本中所有数字都取出\n\n   ```java\n   Pattern p=Pattern.compile(\"\\\\d+\");\n   		Matcher m=p.matcher(\"我的QQ是:456456 我的电话是:0532214 我的邮箱是:aaa123@aaa.com\");\n   //		while(m.find()) {\n   //			System.out.println(m.group());\n   //		}\n   		// TODO 或者\n   		while(m.find()) {\n   			System.out.println(m.group());\n   			System.out.print(\"start:\"+m.start());\n   			System.out.println(\" end:\"+m.end());\n   		}\n   ```\n\n   ', '', 0, '1.构建正则表达式pattern()返回正则表达式的字符串形式,其实就是返回Pattern.complile(Stringregex)的regex参数p.pattern();//返回\\d+split(CharSequenceinput)方法,用于分隔字符串,并返回一个String[]String[]', '', 'http://luna.iszychen.club:8089/upload/2020/4/regular-d522ed9b810b43259a1ac62e2a3a315a.jpg', '正则表达式 ', 0, 'regular', 21, 0, NULL, NULL, 'regular');
INSERT INTO `posts` VALUES (0, 36, '2020-04-12 23:48:47', 0, '2020-04-15 10:05:47', 0, 0, '2020-04-15 10:05:47', '<h3 id=\"java注解获取\">Java注解获取</h3>\n<p>java.lang.reflect.AnnotatedElement 接口是所有程序元素（Class、Method和Constructor）的父接口，所以程序通过反射获取了某个类的AnnotatedElement对象之后，程序就可以调用该对象的如下四个个方法来访问Annotation信息：</p>\n<p>　　1. 方法：<T extends Annotation> T getAnnotation(Class<T> annotationClass): 返回改程序元素上存在的、指定类型的注解，如果该类型注解不存在，则返回null。<br />\n　　2. 方法：Annotation[] getAnnotations():返回该程序元素上存在的所有注解。<br />\n　　3. 方法：boolean is AnnotationPresent(Class&lt;?extends Annotation&gt; annotationClass):判断该程序元素上是否包含指定类型的注解，存在则返回true，否则返回false.<br />\n　　4. 方法：Annotation[] getDeclaredAnnotations()：返回直接存在于此元素上的所有注释。与此接口中的其他方法不同，该方法将忽略继承的注释。（如果没有注释直接存在于此元素上，则返回长度为零的一个数组。）该方法的调用者可以随意修改返回的数组；这不会对其他调用者返回的数组产生任何影响</p>\n', 0, '### Java注解获取\n\njava.lang.reflect.AnnotatedElement 接口是所有程序元素（Class、Method和Constructor）的父接口，所以程序通过反射获取了某个类的AnnotatedElement对象之后，程序就可以调用该对象的如下四个个方法来访问Annotation信息：\n\n　　1. 方法：<T extends Annotation> T getAnnotation(Class<T> annotationClass): 返回改程序元素上存在的、指定类型的注解，如果该类型注解不存在，则返回null。\n　　2. 方法：Annotation[] getAnnotations():返回该程序元素上存在的所有注解。\n　　3. 方法：boolean is AnnotationPresent(Class<?extends Annotation> annotationClass):判断该程序元素上是否包含指定类型的注解，存在则返回true，否则返回false.\n　　4. 方法：Annotation[] getDeclaredAnnotations()：返回直接存在于此元素上的所有注释。与此接口中的其他方法不同，该方法将忽略继承的注释。（如果没有注释直接存在于此元素上，则返回长度为零的一个数组。）该方法的调用者可以随意修改返回的数组；这不会对其他调用者返回的数组产生任何影响', '', 0, 'Java注解获取java.lang.reflect.AnnotatedElement接口是所有程序元素（Class、Method和Constructor）的父接口，所以程序通过反射获取了某个类的AnnotatedElement对象之后，程序就可以调用该对象的如下四个个方法来访问Annotation信', '', 'http://luna.iszychen.club:8089/upload/2020/2/u=3573756467,3701343599&fm=26&gp=0-08b9a87439e54dc28c6463d6822a2805.jpg', 'Java注解获取', 0, NULL, 18, 0, NULL, NULL, 'anno');
INSERT INTO `posts` VALUES (0, 37, '2020-05-07 13:44:14', 0, '2020-05-07 13:44:14', 0, 0, '2020-05-07 13:44:14', '<h1 id=\"luna-common\">luna-common</h1>\n<p><img src=\"https://img.shields.io/badge/luna--common-1.0--SNAPSHOT-green\" alt=\"\" /></p>\n<p>一直想写一个开发工具的Utils,市面各种工具类层出不穷,当然都是特别好的,但是工具类的总类不同,往往有时候需要使用的时候又去找度娘。<br />\n我就写了个工具maven包，直接导入就好。</p>\n<h2 id=\"maven依赖\">Maven依赖</h2>\n<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;com.luna&lt;/groupId&gt;\n    &lt;artifactId&gt;common&lt;/artifactId&gt;\n    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n<h2 id=\"使用说明\">使用说明</h2>\n<ul>\n<li>参见Wiki 《组件基础API使用说明》（ps 还没写）</li>\n</ul>\n<h2 id=\"更新日志\">更新日志</h2>\n<h3 id=\"10--snapshot\">1.0--SNAPSHOT</h3>\n<ul>\n<li>\n<p>引入环境配置文件,免去可能密钥泄露风险</p>\n</li>\n<li>\n<p>增加百度人体识别</p>\n</li>\n<li>\n<p>增加百度语音合成</p>\n</li>\n<li>\n<p>增加腾讯地图 ip 经纬度返回位置信息</p>\n</li>\n<li>\n<p>增加百度Ocr文字位置 通用版和精确版</p>\n</li>\n<li>\n<p>增加ffmpeg图像处理 截帧 合成 视频截取 视频截图</p>\n</li>\n<li>\n<p>增加百度物体识别,链接百度百科,自动识别名人,著名建筑物等</p>\n</li>\n<li>\n<p>增加勾画人脸矩形框结合百度人脸检测Api</p>\n</li>\n<li>\n<p>增加百度人证审核</p>\n</li>\n<li>\n<p>增加学小易答案搜索Api</p>\n</li>\n<li>\n<p>增加百度Ocr 人脸识别 人脸检测 人脸比对 活体检测 Api调用</p>\n</li>\n</ul>\n<h3 id=\"版权说明\">版权说明</h3>\n<p><img src=\"https://img.shields.io/badge/License-Apache%20License%202.0-yellowgreen\" alt=\"\" /></p>\n', 0, '# luna-common \n![](https://img.shields.io/badge/luna--common-1.0--SNAPSHOT-green)\n\n一直想写一个开发工具的Utils,市面各种工具类层出不穷,当然都是特别好的,但是工具类的总类不同,往往有时候需要使用的时候又去找度娘。\n我就写了个工具maven包，直接导入就好。\n\n## Maven依赖\n```\n<dependency>\n    <groupId>com.luna</groupId>\n    <artifactId>common</artifactId>\n    <version>1.0-SNAPSHOT</version>\n</dependency>\n```\n\n## 使用说明\n\n+ 参见Wiki 《组件基础API使用说明》（ps 还没写）\n\n\n## 更新日志\n\n### 1.0--SNAPSHOT\n\n+ 引入环境配置文件,免去可能密钥泄露风险\n\n+ 增加百度人体识别\n\n+ 增加百度语音合成\n\n+ 增加腾讯地图 ip 经纬度返回位置信息\n\n+ 增加百度Ocr文字位置 通用版和精确版\n\n+ 增加ffmpeg图像处理 截帧 合成 视频截取 视频截图\n\n+ 增加百度物体识别,链接百度百科,自动识别名人,著名建筑物等\n\n+ 增加勾画人脸矩形框结合百度人脸检测Api\n\n+ 增加百度人证审核\n\n+ 增加学小易答案搜索Api\n\n+ 增加百度Ocr 人脸识别 人脸检测 人脸比对 活体检测 Api调用\n\n\n### 版权说明\n![](https://img.shields.io/badge/License-Apache%20License%202.0-yellowgreen)\n', '', 0, '', '', 'http://luna.iszychen.club:8089/upload/2020/4/luna-1da26dd7eae1422396cf77bb3ba2e5e2.png', 'luna-common Java工具集', 0, NULL, 23, 0, NULL, NULL, 'luna-common');
INSERT INTO `posts` VALUES (0, 38, '2020-05-18 20:12:16', 0, '2020-05-18 20:12:16', 0, 0, '2020-05-18 20:12:16', '<pre><code class=\"language-xml\"> &lt;!-- https://mvnrepository.com/artifact/org.apache.commons/commons-collections4 --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;\n            &lt;artifactId&gt;commons-collections4&lt;/artifactId&gt;\n            &lt;version&gt;4.3&lt;/version&gt;\n        &lt;/dependency&gt;\n\n</code></pre>\n<pre><code class=\"language-java\">/**\n 迭代器的扩展\n 1、MapIterator 以后不再使用map.keySet.iterator访问\n IterableMap  HashedMap\n 2、UniqueFilterIterator 去重迭代器\n 3、FilterIterator 自定义过滤 +Predicate\n 4、LoopingIterator 循环迭代器\n 5、ArrayListIterator 数组迭代器\n * @author Administrator\n *\n */\npublic class Demo02 {\n\n	/**\n	 * @param args\n	 */\n	public static void main(String[] args) {\n		mapIt();\n//		uniqueIt();\n//		filterIt();\n//		loopIt();\n//		arrayIt();\n	}\n	/**\n	 * 数组迭代器\n	 */\n	public static void arrayIt(){\n		System.out.println(&quot;===== 数组迭代器  ====&quot;);\n		int[] arr ={1,2,3,4,5};\n		//数组迭代器\n		Iterator&lt;Integer&gt; it =new ArrayListIterator&lt;Integer&gt;(arr);\n		//指定起始索引和结束索引\n//		Iterator&lt;Integer&gt; it =new ArrayListIterator&lt;Integer&gt;(arr,1,3);\n		while(it.hasNext()){\n			System.out.println(it.next());\n		}\n	}\n	/**\n	 * 循环迭代器\n	 */\n	public static void loopIt(){\n		System.out.println(&quot;===== 循环迭代器  ====&quot;);\n		List&lt;String&gt; list =new ArrayList&lt;String&gt;();\n		list.add(&quot;refer&quot;);\n		list.add(&quot;dad&quot;);\n		list.add(&quot;bjsxt&quot;);\n		list.add(&quot;moom&quot;);\n\n		Iterator&lt;String&gt; it =new LoopingIterator(list);\n		for(int i=0;i&lt;15;i++){\n			System.out.println(it.next());\n		}\n	}\n	/**\n	 * 自定义迭代器\n	 */\n	public static void filterIt(){\n		System.out.println(&quot;=====自定义迭代器  ====&quot;);\n		List&lt;String&gt; list =new ArrayList&lt;String&gt;();\n		list.add(&quot;refer&quot;);\n		list.add(&quot;dad&quot;);\n		list.add(&quot;bjsxt&quot;);\n		list.add(&quot;moom&quot;);\n		//自定义条件判断\n		Predicate&lt;String&gt; pre =new Predicate&lt;String&gt;(){\n			public boolean evaluate(String value) {\n				//回文判断\n				return new StringBuilder(value).reverse().toString().equals(value);\n			}};\n\n\n		//去除重复的过滤器\n		Iterator&lt;String&gt; it =new FilterIterator(list.iterator(),pre);\n		while(it.hasNext()){\n			System.out.println(it.next());\n		}\n	}\n	/**\n	 * 去重迭代器\n	 */\n	public static void uniqueIt(){\n		System.out.println(&quot;=====去重迭代器 ====&quot;);\n		List&lt;String&gt; list =new ArrayList&lt;String&gt;();\n		list.add(&quot;a&quot;);\n		list.add(&quot;b&quot;);\n		list.add(&quot;a&quot;);\n		//去除重复的过滤器\n		Iterator&lt;String&gt; it =new UniqueFilterIterator(list.iterator());\n		while(it.hasNext()){\n			System.out.println(it.next());\n		}\n	}\n	/**\n	 * map迭代器\n	 */\n	public static void mapIt(){\n		System.out.println(&quot;=====map迭代器====&quot;);\n		IterableMap&lt;String,String&gt; map =new HashedMap&lt;String,String&gt;();\n		map.put(&quot;a&quot;,&quot;bjsxt&quot;);\n		map.put(&quot;b&quot;, &quot;sxt&quot;);\n		map.put(&quot;c&quot;, &quot;good&quot;);\n		//使用 MapIterator\n		MapIterator&lt;String,String&gt; it =map.mapIterator();\n		while(it.hasNext()){\n			//一定要it.next()\n            /*\n            it.next();\n            String key =it.getKey();\n            */\n			String key =it.next();\n			String value =it.getValue();\n			System.out.println(key+&quot;--&gt;&quot;+value);\n		}\n\n\n	}\n\n}\n\n</code></pre>\n', 0, '```xml\n <!-- https://mvnrepository.com/artifact/org.apache.commons/commons-collections4 -->\n        <dependency>\n            <groupId>org.apache.commons</groupId>\n            <artifactId>commons-collections4</artifactId>\n            <version>4.3</version>\n        </dependency>\n\n```\n\n\n```java\n/**\n 迭代器的扩展\n 1、MapIterator 以后不再使用map.keySet.iterator访问\n IterableMap  HashedMap\n 2、UniqueFilterIterator 去重迭代器\n 3、FilterIterator 自定义过滤 +Predicate\n 4、LoopingIterator 循环迭代器\n 5、ArrayListIterator 数组迭代器\n * @author Administrator\n *\n */\npublic class Demo02 {\n\n	/**\n	 * @param args\n	 */\n	public static void main(String[] args) {\n		mapIt();\n//		uniqueIt();\n//		filterIt();\n//		loopIt();\n//		arrayIt();\n	}\n	/**\n	 * 数组迭代器\n	 */\n	public static void arrayIt(){\n		System.out.println(\"===== 数组迭代器  ====\");\n		int[] arr ={1,2,3,4,5};\n		//数组迭代器\n		Iterator<Integer> it =new ArrayListIterator<Integer>(arr);\n		//指定起始索引和结束索引\n//		Iterator<Integer> it =new ArrayListIterator<Integer>(arr,1,3);\n		while(it.hasNext()){\n			System.out.println(it.next());\n		}\n	}\n	/**\n	 * 循环迭代器\n	 */\n	public static void loopIt(){\n		System.out.println(\"===== 循环迭代器  ====\");\n		List<String> list =new ArrayList<String>();\n		list.add(\"refer\");\n		list.add(\"dad\");\n		list.add(\"bjsxt\");\n		list.add(\"moom\");\n\n		Iterator<String> it =new LoopingIterator(list);\n		for(int i=0;i<15;i++){\n			System.out.println(it.next());\n		}\n	}\n	/**\n	 * 自定义迭代器\n	 */\n	public static void filterIt(){\n		System.out.println(\"=====自定义迭代器  ====\");\n		List<String> list =new ArrayList<String>();\n		list.add(\"refer\");\n		list.add(\"dad\");\n		list.add(\"bjsxt\");\n		list.add(\"moom\");\n		//自定义条件判断\n		Predicate<String> pre =new Predicate<String>(){\n			public boolean evaluate(String value) {\n				//回文判断\n				return new StringBuilder(value).reverse().toString().equals(value);\n			}};\n\n\n		//去除重复的过滤器\n		Iterator<String> it =new FilterIterator(list.iterator(),pre);\n		while(it.hasNext()){\n			System.out.println(it.next());\n		}\n	}\n	/**\n	 * 去重迭代器\n	 */\n	public static void uniqueIt(){\n		System.out.println(\"=====去重迭代器 ====\");\n		List<String> list =new ArrayList<String>();\n		list.add(\"a\");\n		list.add(\"b\");\n		list.add(\"a\");\n		//去除重复的过滤器\n		Iterator<String> it =new UniqueFilterIterator(list.iterator());\n		while(it.hasNext()){\n			System.out.println(it.next());\n		}\n	}\n	/**\n	 * map迭代器\n	 */\n	public static void mapIt(){\n		System.out.println(\"=====map迭代器====\");\n		IterableMap<String,String> map =new HashedMap<String,String>();\n		map.put(\"a\",\"bjsxt\");\n		map.put(\"b\", \"sxt\");\n		map.put(\"c\", \"good\");\n		//使用 MapIterator\n		MapIterator<String,String> it =map.mapIterator();\n		while(it.hasNext()){\n			//一定要it.next()\n            /*\n            it.next();\n            String key =it.getKey();\n            */\n			String key =it.next();\n			String value =it.getValue();\n			System.out.println(key+\"-->\"+value);\n		}\n\n\n	}\n\n}\n\n```\n', '', 0, '', '', 'http://luna.iszychen.club:8089/upload/2020/05/commons-logo-727d29ca44d04ac4bbdbf8efb936988a.png', 'Apache Commons Collections4迭代器', 0, NULL, 11, 0, NULL, NULL, 'apache-commons-collections4');
INSERT INTO `posts` VALUES (0, 39, '2020-05-18 21:14:46', 0, '2020-05-18 21:14:46', 0, 0, '2020-05-18 21:14:46', '<pre><code>/**\n * 以秒为标准时间的毫秒数\n */\npublic static final long MILLIS_PER_SECOND = 1000\n/**\n *以分钟为标准时间的毫秒数\n */\npublic static final long MILLIS_PER_MINUTE = 60 * MILLIS_PER_SECOND\n/**\n *以小时为标准时间的毫秒数\n */\npublic static final long MILLIS_PER_HOUR = 60 * MILLIS_PER_MINUTE\n/**\n * 以天为标准时间的毫秒数\n */\npublic static final long MILLIS_PER_DAY = 24 * MILLIS_PER_HOUR\n/**\n * 这个类型是半个月， 所以这可以代表日期是上还是下半个月 。\n */\npublic static final int SEMI_MONTH = 1001\n/**\n * 周范围， 从星期日开始 。\n */\npublic static final int RANGE_WEEK_SUNDAY = 1\n/**\n * 周范围，从星期一开始 。\n */\npublic static final int RANGE_WEEK_MONDAY = 2\n/**\n * 周范围，从关注的那天开始。\n */\npublic static final int RANGE_WEEK_RELATIVE = 3\n/**\n * 周范围，以关注的天为中心。\n */\npublic static final int RANGE_WEEK_CENTER = 4\n /**\n * 月范围，从星期日开始 。\n */\npublic static final int RANGE_MONTH_SUNDAY = 5\n/**\n * 月范围，从星期一开始 。\n */\npublic static final int RANGE_MONTH_MONDAY = 6\n /**\n * 不应在标准编成构造获取实列， 而应该直接使用类中的静态方法，如：DateUtils.parseDate(str) 。\n * 此构造函数意在允许需要一个javabeen实列的工具中使用 。  \n */\npublic DateUtils()\n/**\n * 判断两个日期时间是否是同一天 。\n *\n * @param date1  第一个日期，不可修改，非null\n * @param date2  第二个日期，不可修改，非null\n */\npublic static boolean isSameDay(final Date date1, final Date date2)\n/**\n * 判断两个日历时间是否是同一天 。   \n *\n * @param cal1  第一个日历，不可修改，非null\n * @param cal2  第二个日历，不可修改，非null\n */\npublic static boolean isSameDay(final Calendar cal1, final Calendar cal2)\n/**\n * 判断两个日期是否相同\n * 这种方法比较两个对象的毫秒时间 \n *\n * @param date1  第一个日期，不可修改，非null\n * @param date2  第二个日期，不可修改，非null\n */\npublic static boolean isSameInstant(final Date date1, final Date date2)\n/**\n * 判断两个日历是否相同\n * 这种方法比较两个对象的毫秒时间 \n *\n * @param cal1  第一个日历，不可修改，非null\n * @param cal2  第二个日历，不可修改，非null\n */\npublic static boolean isSameInstant(final Calendar cal1, final Calendar cal2)\n/**\n * 判断两个日历本地时间是否相同\n * 除了比较数值外两个日历对象的类型还要相同\n *\n * @param cal1  第一个日历，不可修改，非null\n * @param cal2  第二个日历，不可修改，非null\n */\npublic static boolean isSameLocalTime(final Calendar cal1, final Calendar cal2)\n/**\n * 尝试用parsePatterns中各种不同的日期格式解析代表时间的字符串str 。\n * \n * 解析时会逐个使用parsePatterns中的格式，如果都没有匹配上， 则抛出异常ParseException 。\n * \n * @param str  被解析的时间字符串，非null\n * @param parsePatterns  用于解析str的时间格式，有一个或几个，非null\n */\npublic static Date parseDate(final String str, final String... parsePatterns) throws ParseException\n/**\n * 尝试用parsePatterns中各种不同的日期格式解析代表时间的字符串str 。\n * 解析时会使用给定的日期格式符locale 。\n * \n * 解析时会逐个使用parsePatterns中的格式，如果都没有匹配上， 则抛出异常ParseException 。\n * \n * @param str  被解析的时间字符串，非null\n * @param locale 使用locale中的日期格式符，如果为null，则使用系统默认的locale\n * @param parsePatterns  用于解析str的时间格式，有一个或几个，非null\n */\npublic static Date parseDate(final String str, final Locale locale, final String... parsePatterns) throws ParseException\n/**\n * 尝试用parsePatterns中各种不同的日期格式解析代表时间的字符串str 。\n *\n * 解析时会逐个使用parsePatterns中的格式，如果都没有匹配上， 则抛出异常ParseException 。\n * 解析器解析严格不允许的日期， 如：&quot;February 942, 1996&quot; 。\n * \n * @param str  被解析的时间字符串，非null\n * @param parsePatterns  用于解析str的时间格式，有一个或几个，非null\n */\npublic static Date parseDateStrictly(final String str, final String... parsePatterns) throws ParseException\n/**\n * 尝试用parsePatterns中各种不同的日期格式解析代表时间的字符串str 。\n * 解析时会使用给定的日期格式符locale 。\n *\n * 解析时会逐个使用parsePatterns中的格式，如果都没有匹配上， 则抛出异常ParseException 。\n * 解析器解析严格不允许的日期， 如：&quot;February 942, 1996&quot; 。\n * \n * @param str  被解析的时间字符串，非null\n * @param locale 使用locale中的日期格式符，如果为null，则使用系统默认的locale\n * @param parsePatterns  用于解析str的时间格式，有一个或几个，非null\n */\npublic static Date parseDateStrictly(final String str, final Locale locale, final String... parsePatterns) throws ParseException\n/**\n * 在日期date上增加amount年 。\n *\n * @param date  处理的日期，非null\n * @param amount  要加的年数，可能为负数\n */\npublic static Date addYears(final Date date, final int amount)\n/**\n * 在日期date上增加amount月 。\n *\n * @param date  处理的日期，非null\n * @param amount  要加的月数，可能为负数\n */\npublic static Date addMonths(final Date date, final int amount)\n/**\n * 在日期date上增加amount周 。\n *\n * @param date  处理的日期，非null\n * @param amount  要加的周数，可能为负数\n */\npublic static Date addWeeks(final Date date, final int amount)\n/**\n * 在日期date上增加amount天 。\n *\n * @param date  处理的日期，非null\n * @param amount  要加的天数，可能为负数\n */\npublic static Date addDays(final Date date, final int amount)\n/**\n * 在日期date上增加amount小时 。\n *\n * @param date  处理的日期，非null\n * @param amount  要加的小时数，可能为负数\n */\npublic static Date addHours(final Date date, final int amount)\n/**\n * 在日期date上增加amount分钟 。\n *\n * @param date  处理的日期，非null\n * @param amount  要加的分钟数，可能为负数\n */\npublic static Date addMinutes(final Date date, final int amount)\n/**\n * 在日期date上增加amount秒 。\n *\n * @param date  处理的日期，非null\n * @param amount  要加的秒数，可能为负数\n */\npublic static Date addSeconds(final Date date, final int amount)\n/**\n * 在日期date上增加amount 毫秒 。\n *\n * @param date  处理的日期，非null\n * @param amount  要加的毫秒数，可能为负数\n */\npublic static Date addMilliseconds(final Date date, final int amount)\n /**\n * 给日期data设置一个新的年份 。\n *\n * @param date 处理的日期，非null\n * @param amount 要设置的年份\n */\npublic static Date setYears(final Date date, final int amount)\n /**\n * 给日期data设置一个新的月份 。\n *\n * @param date 处理的日期，非null\n * @param amount 要设置的月份\n */\npublic static Date setMonths(final Date date, final int amount)\n/**\n * 给日期data设置一个新的天 。\n *\n * @param date 处理的日期，非null\n * @param amount 要设置的天\n */\npublic static Date setDays(final Date date, final int amount)\n/**\n * 给日期data设置一个新的小时 。\n *\n * @param date 处理的日期，非null\n * @param amount 要设置的小时\n */\npublic static Date setHours(final Date date, final int amount)\n /**\n * 给日期data设置一个新的分钟 。\n *\n * @param date 处理的日期，非null\n * @param amount 要设置的分钟\n */\npublic static Date setMinutes(final Date date, final int amount)\n/**\n * 给日期data设置一个新的秒 。\n *\n * @param date 处理的日期，非null\n * @param amount 要设置的秒\n */\npublic static Date setSeconds(final Date date, final int amount)\n/**\n * 给日期data设置一个新的毫秒 。\n *\n * @param date 处理的日期，非null\n * @param amount 要设置的毫秒\n */\npublic static Date setMilliseconds(final Date date, final int amount)\n/**\n * 将一个日期放到日历中 。\n */\npublic static Calendar toCalendar(final Date date)\n/**\n * 根据阈值field四舍五入日历date 。\n *\n * 例如， 如果你的时间是 28 Mar 2002 13:45:01.231，\n * 如果field为HOUR，它将返回 28 Mar 2002 14:00:00.000；\n * 如果field为MONTH，它将返回 1 April 2002 0:00:00.000 。\n * \n * @param date  处理的日期，非null\n * @param field  阈值\n */\npublic static Date round(final Date date, final int field)\n/**\n * 根据阈值field四舍五入日历date 。\n *\n * 例如， 如果你的时间是 28 Mar 2002 13:45:01.231，\n * 如果field为HOUR，它将返回 28 Mar 2002 14:00:00.000；\n * 如果field为MONTH，它将返回 1 April 2002 0:00:00.000 。\n * \n * @param date  处理的日期，非null\n * @param field  阈值  \n */\npublic static Calendar round(final Calendar date, final int field)\n/**\n * 根据阈值field四舍五入日历date 。\n *\n * 例如， 如果你的时间是 28 Mar 2002 13:45:01.231，\n * 如果field为HOUR，它将返回 28 Mar 2002 14:00:00.000；\n * 如果field为MONTH，它将返回 1 April 2002 0:00:00.000 。\n * \n * @param date  处理的日期，非null\n * @param field  阈值 \n */\npublic static Date round(final Object date, final int field)\n/**\n * 根据阈值field截取日期date 。\n *\n * 例如， 如果你的时间是 28 Mar 2002 13:45:01.231，\n * 如果field为HOUR，它将返回 28 Mar 2002 13:00:00.000；\n * 如果field为MONTH，它将返回 1 Mar 2002 0:00:00.000 。\n * \n * @param date  处理的日期，非null\n * @param field  阈值 \n */\npublic static Date truncate(final Date date, final int field)\n /**\n * 根据阈值field截取日历date 。\n *\n * 例如， 如果你的时间是 28 Mar 2002 13:45:01.231，\n * 如果field为HOUR，它将返回 28 Mar 2002 13:00:00.000；\n * 如果field为MONTH，它将返回 1 Mar 2002 0:00:00.000 。\n * \n * @param date  处理的日期，非null\n * @param field  阈值\n */\npublic static Calendar truncate(final Calendar date, final int field)\n/**\n * 根据阈值field截取日期date 。\n *\n * 例如， 如果你的时间是 28 Mar 2002 13:45:01.231，\n * 如果field为HOUR，它将返回 28 Mar 2002 13:00:00.000；\n * 如果field为MONTH，它将返回 1 Mar 2002 0:00:00.000 。\n * \n * @param date  处理的日期，非null\n * @param field  阈值\n */\npublic static Date truncate(final Object date, final int field)\n/**\n * 根据阈值field向上舍入日期date 。\n *\n * 例如， 如果你的时间是 28 Mar 2002 13:45:01.231，\n * 如果field为HOUR，它将返回 28 Mar 2002 14:00:00.000；\n * 如果field为MONTH，它将返回 1 Apr 2002 0:00:00.000 。\n * \n * @param date  处理的日期，非null\n * @param field  阈值\n */\npublic static Date ceiling(final Date date, final int field)\n/**\n * 根据阈值field向上舍入日期date 。\n *\n * 例如， 如果你的时间是 28 Mar 2002 13:45:01.231，\n * 如果field为HOUR，它将返回 28 Mar 2002 14:00:00.000；\n * 如果field为MONTH，它将返回 1 Apr 2002 0:00:00.000 。\n * \n * @param date  处理的日期，非null\n * @param field  阈值\n */\npublic static Calendar ceiling(final Calendar date, final int field)\n/**\n * 根据阈值field向上舍入日期date 。\n *\n * 例如， 如果你的时间是 28 Mar 2002 13:45:01.231，\n * 如果field为HOUR，它将返回 28 Mar 2002 14:00:00.000；\n * 如果field为MONTH，它将返回 1 Apr 2002 0:00:00.000 。\n * \n * @param date  处理的日期，非null\n * @param field  阈值\n */\npublic static Date ceiling(final Object date, final int field)\n/**\n * 根据指定的时间focus和范围类型rangeStyle构建一个时间范围迭代器 。\n *\n * 如传入的时间是Thursday, July 4, 2002，范围类型是RANGE_MONTH_SUNDAY，\n * 则返回迭代器的范围是从Sunday, June 30, 2002 到 Saturday, August 3, 2002\n *\n * @param focus  指定的时间\n * @param rangeStyle  范围类型，值必须是如下之一：\n * DateUtils.RANGE_MONTH_SUNDAY， \n * DateUtils.RANGE_MONTH_MONDAY，\n * DateUtils.RANGE_WEEK_SUNDAY，\n * DateUtils.RANGE_WEEK_MONDAY，\n * DateUtils.RANGE_WEEK_RELATIVE，\n * DateUtils.RANGE_WEEK_CENTER\n */\npublic static Iterator&lt;Calendar&gt; iterator(final Date focus, final int rangeStyle)\n/**\n * 根据指定的时间focus和范围类型rangeStyle构建一个时间范围迭代器 。\n *\n * 如传入的时间是Thursday, July 4, 2002，范围类型是RANGE_MONTH_SUNDAY，\n * 则返回迭代器的范围是从Sunday, June 30, 2002 到 Saturday, August 3, 2002\n *\n * @param focus  指定的时间\n * @param rangeStyle  范围类型，值必须是如下之一：\n * DateUtils.RANGE_MONTH_SUNDAY， \n * DateUtils.RANGE_MONTH_MONDAY，\n * DateUtils.RANGE_WEEK_SUNDAY，\n * DateUtils.RANGE_WEEK_MONDAY，\n * DateUtils.RANGE_WEEK_RELATIVE，\n * DateUtils.RANGE_WEEK_CENTER\n */\npublic static Iterator&lt;Calendar&gt; iterator(final Calendar focus, final int rangeStyle)\n/**\n * 根据指定的时间focus和范围类型rangeStyle构建一个时间范围迭代器 。\n *\n * 如传入的时间是Thursday, July 4, 2002，范围类型是RANGE_MONTH_SUNDAY，\n * 则返回迭代器的范围是从Sunday, June 30, 2002 到 Saturday, August 3, 2002\n *\n * @param focus  指定的时间\n * @param rangeStyle  范围类型，值必须是iterator(Calendar, int)方法注释中列出的\n */\npublic static Iterator&lt;?&gt; iterator(final Object focus, final int rangeStyle)\n</code></pre>\n<p>/**<br />\n* 返回指定分段内的毫秒数 。 所有大于分段的DateFields将被忽略 。<br />\n*<br />\n* 请求任何日期毫秒，将返回当前秒的毫秒数 (返回一个数字在0和999之间) 。<br />\n* 有效的分段值是： Calendar.YEAR、Calendar.MONTH、Calendar.DAY_OF_YEAR、<br />\n* Calendar.DATE、Calendar.HOUR_OF_DAY、Calendar.MINUTE、<br />\n* Calendar.SECOND 和 Calendar.MILLISECOND<br />\n* 分段值小于或等于MILLISECOND，将返回0 。<br />\n*<br />\n*  January 1, 2008 7:15:10.538 with Calendar.SECOND as fragment will return 538<br />\n*  January 6, 2008 7:15:10.538 with Calendar.SECOND as fragment will return 538<br />\n*  January 6, 2008 7:15:10.538 with Calendar.MINUTE as fragment will return 10538<br />\n*  January 16, 2008 7:15:10.538 with Calendar.MILLISECOND as fragment will return 0<br />\n*   (a millisecond cannot be split in milliseconds)<br />\n*<br />\n* @param calendar 获取值得日历对象，非null<br />\n* @param fragment 分段值<br />\n<em>/<br />\npublic static long getFragmentInMilliseconds(final Calendar calendar, final int fragment)<br />\n/</em>*<br />\n* 返回指定分段内的秒数 。 所有大于分段的DateFields将被忽略 。<br />\n*<br />\n* 请求任何日期秒，将返回当前的分钟的秒数 (返回一个数字在0和59之间) 。<br />\n* 有效的分段值是： Calendar.YEAR、Calendar.MONTH、Calendar.DAY_OF_YEAR、<br />\n* Calendar.DATE、Calendar.HOUR_OF_DAY、Calendar.MINUTE、<br />\n* Calendar.SECOND 和 Calendar.MILLISECOND<br />\n* 分段值小于或等于SECOND，将返回0 。<br />\n*<br />\n*  January 1, 2008 7:15:10.538 with Calendar.MINUTE as fragment will return 10<br />\n*  January 6, 2008 7:15:10.538 with Calendar.MINUTE as fragment will return 10<br />\n*  January 6, 2008 7:15:10.538 with Calendar.DAY_OF_YEAR as fragment will return 26110<br />\n*   (7<em>3600 + 15</em>60 + 10)</li><br />\n*  January 16, 2008 7:15:10.538 with Calendar.MILLISECOND as fragment will return 0<br />\n*<br />\n* @param calendar 获取值得日历对象，非null<br />\n* @param fragment 分段值<br />\n<em>/<br />\npublic static long getFragmentInSeconds(final Calendar calendar, final int fragment)<br />\n/</em>*<br />\n* 返回指定分段内的分钟数 。 所有大于分段的DateFields将被忽略 。<br />\n*<br />\n* 请求任何日期分钟，将返回当前的小时的分钟数 (返回一个数字在0和59之间)<br />\n* 有效的分段值是： Calendar.YEAR、Calendar.MONTH、Calendar.DAY_OF_YEAR、<br />\n* Calendar.DATE、Calendar.HOUR_OF_DAY、Calendar.MINUTE、<br />\n* Calendar.SECOND 和 Calendar.MILLISECOND<br />\n* 分段值小于或等于MINUTE，将返回0 。<br />\n*<br />\n*  January 1, 2008 7:15:10.538 with Calendar.HOUR_OF_DAY as fragment will return 15<br />\n*  January 6, 2008 7:15:10.538 with Calendar.HOUR_OF_DAY as fragment will return 15<br />\n*  January 1, 2008 7:15:10.538 with Calendar.MONTH as fragment will return 15<br />\n*  January 6, 2008 7:15:10.538 with Calendar.MONTH as fragment will return 435 (7<em>60 + 15)<br />\n*  January 16, 2008 7:15:10.538 with Calendar.MILLISECOND as fragment will return 0<br />\n*<br />\n* @param calendar 获取值得日历对象，非null<br />\n* @param fragment 分段值<br />\n<em>/<br />\npublic static long getFragmentInMinutes(final Calendar calendar, final int fragment)<br />\n/</em></em><br />\n* 返回指定分段内的小时数 。 所有大于分段的DateFields将被忽略 。<br />\n*<br />\n* 请求任何日期小时，将返回当前的天的小时数 (返回一个数字在0和23之间) 。<br />\n* 有效的分段值是： Calendar.YEAR、Calendar.MONTH、Calendar.DAY_OF_YEAR、<br />\n* Calendar.DATE、Calendar.HOUR_OF_DAY、Calendar.MINUTE、<br />\n* Calendar.SECOND 和 Calendar.MILLISECOND<br />\n* 分段值小于或等于HOUR_OF_DAY，将返回0 。<br />\n*<br />\n*  January 1, 2008 7:15:10.538 with Calendar.DAY_OF_YEAR as fragment will return 7<br />\n*  January 6, 2008 7:15:10.538 with Calendar.DAY_OF_YEAR as fragment will return 7<br />\n*  January 1, 2008 7:15:10.538 with Calendar.MONTH as fragment will return 7<br />\n*  January 6, 2008 7:15:10.538 with Calendar.MONTH as fragment will return 127 (5<em>24 + 7)<br />\n*  January 16, 2008 7:15:10.538 with Calendar.MILLISECOND as fragment will return 0<br />\n*<br />\n* @param calendar 获取值得日历对象，非null<br />\n* @param fragment 分段值<br />\n<em>/<br />\npublic static long getFragmentInHours(final Calendar calendar, final int fragment)<br />\n/</em></em><br />\n* 返回指定分段内的天数 。 所有大于分段的DateFields将被忽略 。<br />\n*<br />\n* 请求任何日期天数，将返回当前的月的天数 (返回一个数字在1和31之间) 。<br />\n* 有效的分段值是： Calendar.YEAR、Calendar.MONTH、Calendar.DAY_OF_YEAR、<br />\n* Calendar.DATE、Calendar.HOUR_OF_DAY、Calendar.MINUTE、<br />\n* Calendar.SECOND 和 Calendar.MILLISECOND<br />\n* 分段值小于或等于DATE，将返回0 。<br />\n*<br />\n*  January 28, 2008 with Calendar.MONTH as fragment will return 28<br />\n*  February 28, 2008 with Calendar.MONTH as fragment will return 28<br />\n*  January 28, 2008 with Calendar.YEAR as fragment will return 28<br />\n*  February 28, 2008 with Calendar.YEAR as fragment will return 59<br />\n*  January 28, 2008 with Calendar.MILLISECOND as fragment will return 0<br />\n*<br />\n* @param calendar 获取值得日历对象，非null<br />\n* @param fragment 分段值<br />\n<em>/<br />\npublic static long getFragmentInDays(final Calendar calendar, final int fragment)<br />\n/</em>*<br />\n* 截取比较两个日历对象的field处的值是否相同 。<br />\n*<br />\n* @param cal1 第一个日历对象，非null<br />\n* @param cal2 第二个日历对象，非null<br />\n* @param field Calendar中的阈值<br />\n<em>/<br />\npublic static boolean truncatedEquals(final Calendar cal1, final Calendar cal2, final int field)<br />\n/</em>*<br />\n* 截取比较两个日期对象的field处的值是否相同 。<br />\n*<br />\n* @param date1 第一个日期对象，非null<br />\n* @param date2 第二个日期对象，非null<br />\n* @param field Calendar中的阈值<br />\n<em>/<br />\npublic static boolean truncatedEquals(final Date date1, final Date date2, final int field)<br />\n/</em>*<br />\n* 截取比较两个日历对象的field处的值 。<br />\n* 如果第一个日历小于、等于、大于第二个，则对应返回负整数、0、正整数<br />\n*<br />\n* @param cal1 第一个日历对象，非null<br />\n* @param cal2 第二个日历对象，非null<br />\n* @param field Calendar中的阈值<br />\n<em>/<br />\npublic static int truncatedCompareTo(final Calendar cal1, final Calendar cal2, final int field)<br />\n/</em>*<br />\n* 截取比较断两个日期对象的field处的值 。<br />\n* 如果第一个日期小于、等于、大于第二个，则对应返回负整数、0、正整数<br />\n*<br />\n* @param date1 第一个日期对象，非null<br />\n* @param date2 第二个日期对象，非null<br />\n* @param field Calendar中的阈值<br />\n*/<br />\npublic static int truncatedCompareTo(final Date date1, final Date date2, final int field)</p>\n', 0, ' \n    /**\n     * 以秒为标准时间的毫秒数\n     */\n    public static final long MILLIS_PER_SECOND = 1000\n    /**\n     *以分钟为标准时间的毫秒数\n     */\n    public static final long MILLIS_PER_MINUTE = 60 * MILLIS_PER_SECOND\n    /**\n     *以小时为标准时间的毫秒数\n     */\n    public static final long MILLIS_PER_HOUR = 60 * MILLIS_PER_MINUTE\n    /**\n     * 以天为标准时间的毫秒数\n     */\n    public static final long MILLIS_PER_DAY = 24 * MILLIS_PER_HOUR\n    /**\n     * 这个类型是半个月， 所以这可以代表日期是上还是下半个月 。\n     */\n    public static final int SEMI_MONTH = 1001\n    /**\n     * 周范围， 从星期日开始 。\n     */\n    public static final int RANGE_WEEK_SUNDAY = 1\n    /**\n     * 周范围，从星期一开始 。\n     */\n    public static final int RANGE_WEEK_MONDAY = 2\n    /**\n     * 周范围，从关注的那天开始。\n     */\n    public static final int RANGE_WEEK_RELATIVE = 3\n    /**\n     * 周范围，以关注的天为中心。\n     */\n    public static final int RANGE_WEEK_CENTER = 4\n     /**\n     * 月范围，从星期日开始 。\n     */\n    public static final int RANGE_MONTH_SUNDAY = 5\n    /**\n     * 月范围，从星期一开始 。\n     */\n    public static final int RANGE_MONTH_MONDAY = 6\n     /**\n     * 不应在标准编成构造获取实列， 而应该直接使用类中的静态方法，如：DateUtils.parseDate(str) 。\n     * 此构造函数意在允许需要一个javabeen实列的工具中使用 。  \n     */\n    public DateUtils()\n    /**\n     * 判断两个日期时间是否是同一天 。\n     *\n     * @param date1  第一个日期，不可修改，非null\n     * @param date2  第二个日期，不可修改，非null\n     */\n    public static boolean isSameDay(final Date date1, final Date date2)\n    /**\n     * 判断两个日历时间是否是同一天 。   \n     *\n     * @param cal1  第一个日历，不可修改，非null\n     * @param cal2  第二个日历，不可修改，非null\n     */\n    public static boolean isSameDay(final Calendar cal1, final Calendar cal2)\n    /**\n     * 判断两个日期是否相同\n     * 这种方法比较两个对象的毫秒时间 \n     *\n     * @param date1  第一个日期，不可修改，非null\n     * @param date2  第二个日期，不可修改，非null\n     */\n    public static boolean isSameInstant(final Date date1, final Date date2)\n    /**\n     * 判断两个日历是否相同\n     * 这种方法比较两个对象的毫秒时间 \n     *\n     * @param cal1  第一个日历，不可修改，非null\n     * @param cal2  第二个日历，不可修改，非null\n     */\n    public static boolean isSameInstant(final Calendar cal1, final Calendar cal2)\n    /**\n     * 判断两个日历本地时间是否相同\n     * 除了比较数值外两个日历对象的类型还要相同\n     *\n     * @param cal1  第一个日历，不可修改，非null\n     * @param cal2  第二个日历，不可修改，非null\n     */\n    public static boolean isSameLocalTime(final Calendar cal1, final Calendar cal2)\n    /**\n     * 尝试用parsePatterns中各种不同的日期格式解析代表时间的字符串str 。\n     * \n     * 解析时会逐个使用parsePatterns中的格式，如果都没有匹配上， 则抛出异常ParseException 。\n     * \n     * @param str  被解析的时间字符串，非null\n     * @param parsePatterns  用于解析str的时间格式，有一个或几个，非null\n     */\n    public static Date parseDate(final String str, final String... parsePatterns) throws ParseException\n    /**\n     * 尝试用parsePatterns中各种不同的日期格式解析代表时间的字符串str 。\n     * 解析时会使用给定的日期格式符locale 。\n     * \n     * 解析时会逐个使用parsePatterns中的格式，如果都没有匹配上， 则抛出异常ParseException 。\n     * \n     * @param str  被解析的时间字符串，非null\n     * @param locale 使用locale中的日期格式符，如果为null，则使用系统默认的locale\n     * @param parsePatterns  用于解析str的时间格式，有一个或几个，非null\n     */\n    public static Date parseDate(final String str, final Locale locale, final String... parsePatterns) throws ParseException\n    /**\n     * 尝试用parsePatterns中各种不同的日期格式解析代表时间的字符串str 。\n     *\n     * 解析时会逐个使用parsePatterns中的格式，如果都没有匹配上， 则抛出异常ParseException 。\n     * 解析器解析严格不允许的日期， 如：\"February 942, 1996\" 。\n     * \n     * @param str  被解析的时间字符串，非null\n     * @param parsePatterns  用于解析str的时间格式，有一个或几个，非null\n     */\n    public static Date parseDateStrictly(final String str, final String... parsePatterns) throws ParseException\n    /**\n     * 尝试用parsePatterns中各种不同的日期格式解析代表时间的字符串str 。\n     * 解析时会使用给定的日期格式符locale 。\n     *\n     * 解析时会逐个使用parsePatterns中的格式，如果都没有匹配上， 则抛出异常ParseException 。\n     * 解析器解析严格不允许的日期， 如：\"February 942, 1996\" 。\n     * \n     * @param str  被解析的时间字符串，非null\n     * @param locale 使用locale中的日期格式符，如果为null，则使用系统默认的locale\n     * @param parsePatterns  用于解析str的时间格式，有一个或几个，非null\n     */\n    public static Date parseDateStrictly(final String str, final Locale locale, final String... parsePatterns) throws ParseException\n    /**\n     * 在日期date上增加amount年 。\n     *\n     * @param date  处理的日期，非null\n     * @param amount  要加的年数，可能为负数\n     */\n    public static Date addYears(final Date date, final int amount)\n    /**\n     * 在日期date上增加amount月 。\n     *\n     * @param date  处理的日期，非null\n     * @param amount  要加的月数，可能为负数\n     */\n    public static Date addMonths(final Date date, final int amount)\n    /**\n     * 在日期date上增加amount周 。\n     *\n     * @param date  处理的日期，非null\n     * @param amount  要加的周数，可能为负数\n     */\n    public static Date addWeeks(final Date date, final int amount)\n    /**\n     * 在日期date上增加amount天 。\n     *\n     * @param date  处理的日期，非null\n     * @param amount  要加的天数，可能为负数\n     */\n    public static Date addDays(final Date date, final int amount)\n    /**\n     * 在日期date上增加amount小时 。\n     *\n     * @param date  处理的日期，非null\n     * @param amount  要加的小时数，可能为负数\n     */\n    public static Date addHours(final Date date, final int amount)\n    /**\n     * 在日期date上增加amount分钟 。\n     *\n     * @param date  处理的日期，非null\n     * @param amount  要加的分钟数，可能为负数\n     */\n    public static Date addMinutes(final Date date, final int amount)\n    /**\n     * 在日期date上增加amount秒 。\n     *\n     * @param date  处理的日期，非null\n     * @param amount  要加的秒数，可能为负数\n     */\n    public static Date addSeconds(final Date date, final int amount)\n    /**\n     * 在日期date上增加amount 毫秒 。\n     *\n     * @param date  处理的日期，非null\n     * @param amount  要加的毫秒数，可能为负数\n     */\n    public static Date addMilliseconds(final Date date, final int amount)\n     /**\n     * 给日期data设置一个新的年份 。\n     *\n     * @param date 处理的日期，非null\n     * @param amount 要设置的年份\n     */\n    public static Date setYears(final Date date, final int amount)\n     /**\n     * 给日期data设置一个新的月份 。\n     *\n     * @param date 处理的日期，非null\n     * @param amount 要设置的月份\n     */\n    public static Date setMonths(final Date date, final int amount)\n    /**\n     * 给日期data设置一个新的天 。\n     *\n     * @param date 处理的日期，非null\n     * @param amount 要设置的天\n     */\n    public static Date setDays(final Date date, final int amount)\n    /**\n     * 给日期data设置一个新的小时 。\n     *\n     * @param date 处理的日期，非null\n     * @param amount 要设置的小时\n     */\n    public static Date setHours(final Date date, final int amount)\n     /**\n     * 给日期data设置一个新的分钟 。\n     *\n     * @param date 处理的日期，非null\n     * @param amount 要设置的分钟\n     */\n    public static Date setMinutes(final Date date, final int amount)\n    /**\n     * 给日期data设置一个新的秒 。\n     *\n     * @param date 处理的日期，非null\n     * @param amount 要设置的秒\n     */\n    public static Date setSeconds(final Date date, final int amount)\n    /**\n     * 给日期data设置一个新的毫秒 。\n     *\n     * @param date 处理的日期，非null\n     * @param amount 要设置的毫秒\n     */\n    public static Date setMilliseconds(final Date date, final int amount)\n    /**\n     * 将一个日期放到日历中 。\n     */\n    public static Calendar toCalendar(final Date date)\n    /**\n     * 根据阈值field四舍五入日历date 。\n     *\n     * 例如， 如果你的时间是 28 Mar 2002 13:45:01.231，\n     * 如果field为HOUR，它将返回 28 Mar 2002 14:00:00.000；\n     * 如果field为MONTH，它将返回 1 April 2002 0:00:00.000 。\n     * \n     * @param date  处理的日期，非null\n     * @param field  阈值\n     */\n    public static Date round(final Date date, final int field)\n    /**\n     * 根据阈值field四舍五入日历date 。\n     *\n     * 例如， 如果你的时间是 28 Mar 2002 13:45:01.231，\n     * 如果field为HOUR，它将返回 28 Mar 2002 14:00:00.000；\n     * 如果field为MONTH，它将返回 1 April 2002 0:00:00.000 。\n     * \n     * @param date  处理的日期，非null\n     * @param field  阈值  \n     */\n    public static Calendar round(final Calendar date, final int field)\n    /**\n     * 根据阈值field四舍五入日历date 。\n     *\n     * 例如， 如果你的时间是 28 Mar 2002 13:45:01.231，\n     * 如果field为HOUR，它将返回 28 Mar 2002 14:00:00.000；\n     * 如果field为MONTH，它将返回 1 April 2002 0:00:00.000 。\n     * \n     * @param date  处理的日期，非null\n     * @param field  阈值 \n     */\n    public static Date round(final Object date, final int field)\n    /**\n     * 根据阈值field截取日期date 。\n     *\n     * 例如， 如果你的时间是 28 Mar 2002 13:45:01.231，\n     * 如果field为HOUR，它将返回 28 Mar 2002 13:00:00.000；\n     * 如果field为MONTH，它将返回 1 Mar 2002 0:00:00.000 。\n     * \n     * @param date  处理的日期，非null\n     * @param field  阈值 \n     */\n    public static Date truncate(final Date date, final int field)\n     /**\n     * 根据阈值field截取日历date 。\n     *\n     * 例如， 如果你的时间是 28 Mar 2002 13:45:01.231，\n     * 如果field为HOUR，它将返回 28 Mar 2002 13:00:00.000；\n     * 如果field为MONTH，它将返回 1 Mar 2002 0:00:00.000 。\n     * \n     * @param date  处理的日期，非null\n     * @param field  阈值\n     */\n    public static Calendar truncate(final Calendar date, final int field)\n    /**\n     * 根据阈值field截取日期date 。\n     *\n     * 例如， 如果你的时间是 28 Mar 2002 13:45:01.231，\n     * 如果field为HOUR，它将返回 28 Mar 2002 13:00:00.000；\n     * 如果field为MONTH，它将返回 1 Mar 2002 0:00:00.000 。\n     * \n     * @param date  处理的日期，非null\n     * @param field  阈值\n     */\n    public static Date truncate(final Object date, final int field)\n    /**\n     * 根据阈值field向上舍入日期date 。\n     *\n     * 例如， 如果你的时间是 28 Mar 2002 13:45:01.231，\n     * 如果field为HOUR，它将返回 28 Mar 2002 14:00:00.000；\n     * 如果field为MONTH，它将返回 1 Apr 2002 0:00:00.000 。\n     * \n     * @param date  处理的日期，非null\n     * @param field  阈值\n     */\n    public static Date ceiling(final Date date, final int field)\n    /**\n     * 根据阈值field向上舍入日期date 。\n     *\n     * 例如， 如果你的时间是 28 Mar 2002 13:45:01.231，\n     * 如果field为HOUR，它将返回 28 Mar 2002 14:00:00.000；\n     * 如果field为MONTH，它将返回 1 Apr 2002 0:00:00.000 。\n     * \n     * @param date  处理的日期，非null\n     * @param field  阈值\n     */\n    public static Calendar ceiling(final Calendar date, final int field)\n    /**\n     * 根据阈值field向上舍入日期date 。\n     *\n     * 例如， 如果你的时间是 28 Mar 2002 13:45:01.231，\n     * 如果field为HOUR，它将返回 28 Mar 2002 14:00:00.000；\n     * 如果field为MONTH，它将返回 1 Apr 2002 0:00:00.000 。\n     * \n     * @param date  处理的日期，非null\n     * @param field  阈值\n     */\n    public static Date ceiling(final Object date, final int field)\n    /**\n     * 根据指定的时间focus和范围类型rangeStyle构建一个时间范围迭代器 。\n     *\n     * 如传入的时间是Thursday, July 4, 2002，范围类型是RANGE_MONTH_SUNDAY，\n     * 则返回迭代器的范围是从Sunday, June 30, 2002 到 Saturday, August 3, 2002\n     *\n     * @param focus  指定的时间\n     * @param rangeStyle  范围类型，值必须是如下之一：\n     * DateUtils.RANGE_MONTH_SUNDAY， \n     * DateUtils.RANGE_MONTH_MONDAY，\n     * DateUtils.RANGE_WEEK_SUNDAY，\n     * DateUtils.RANGE_WEEK_MONDAY，\n     * DateUtils.RANGE_WEEK_RELATIVE，\n     * DateUtils.RANGE_WEEK_CENTER\n     */\n    public static Iterator<Calendar> iterator(final Date focus, final int rangeStyle)\n    /**\n     * 根据指定的时间focus和范围类型rangeStyle构建一个时间范围迭代器 。\n     *\n     * 如传入的时间是Thursday, July 4, 2002，范围类型是RANGE_MONTH_SUNDAY，\n     * 则返回迭代器的范围是从Sunday, June 30, 2002 到 Saturday, August 3, 2002\n     *\n     * @param focus  指定的时间\n     * @param rangeStyle  范围类型，值必须是如下之一：\n     * DateUtils.RANGE_MONTH_SUNDAY， \n     * DateUtils.RANGE_MONTH_MONDAY，\n     * DateUtils.RANGE_WEEK_SUNDAY，\n     * DateUtils.RANGE_WEEK_MONDAY，\n     * DateUtils.RANGE_WEEK_RELATIVE，\n     * DateUtils.RANGE_WEEK_CENTER\n     */\n    public static Iterator<Calendar> iterator(final Calendar focus, final int rangeStyle)\n    /**\n     * 根据指定的时间focus和范围类型rangeStyle构建一个时间范围迭代器 。\n     *\n     * 如传入的时间是Thursday, July 4, 2002，范围类型是RANGE_MONTH_SUNDAY，\n     * 则返回迭代器的范围是从Sunday, June 30, 2002 到 Saturday, August 3, 2002\n     *\n     * @param focus  指定的时间\n     * @param rangeStyle  范围类型，值必须是iterator(Calendar, int)方法注释中列出的\n     */\n    public static Iterator<?> iterator(final Object focus, final int rangeStyle)\n \n/**\n     * 返回指定分段内的毫秒数 。 所有大于分段的DateFields将被忽略 。\n     *\n     * 请求任何日期毫秒，将返回当前秒的毫秒数 (返回一个数字在0和999之间) 。\n     * 有效的分段值是： Calendar.YEAR、Calendar.MONTH、Calendar.DAY_OF_YEAR、\n     * Calendar.DATE、Calendar.HOUR_OF_DAY、Calendar.MINUTE、\n     * Calendar.SECOND 和 Calendar.MILLISECOND\n     * 分段值小于或等于MILLISECOND，将返回0 。\n     * \n     *  January 1, 2008 7:15:10.538 with Calendar.SECOND as fragment will return 538\n     *  January 6, 2008 7:15:10.538 with Calendar.SECOND as fragment will return 538\n     *  January 6, 2008 7:15:10.538 with Calendar.MINUTE as fragment will return 10538\n     *  January 16, 2008 7:15:10.538 with Calendar.MILLISECOND as fragment will return 0\n     *   (a millisecond cannot be split in milliseconds)\n     * \n     * @param calendar 获取值得日历对象，非null\n     * @param fragment 分段值\n     */\n  public static long getFragmentInMilliseconds(final Calendar calendar, final int fragment)\n    /**\n     * 返回指定分段内的秒数 。 所有大于分段的DateFields将被忽略 。\n     *\n     * 请求任何日期秒，将返回当前的分钟的秒数 (返回一个数字在0和59之间) 。\n     * 有效的分段值是： Calendar.YEAR、Calendar.MONTH、Calendar.DAY_OF_YEAR、\n     * Calendar.DATE、Calendar.HOUR_OF_DAY、Calendar.MINUTE、\n     * Calendar.SECOND 和 Calendar.MILLISECOND\n     * 分段值小于或等于SECOND，将返回0 。\n     * \n     *  January 1, 2008 7:15:10.538 with Calendar.MINUTE as fragment will return 10\n     *  January 6, 2008 7:15:10.538 with Calendar.MINUTE as fragment will return 10\n     *  January 6, 2008 7:15:10.538 with Calendar.DAY_OF_YEAR as fragment will return 26110\n     *   (7*3600 + 15*60 + 10)</li>\n     *  January 16, 2008 7:15:10.538 with Calendar.MILLISECOND as fragment will return 0\n     * \n     * @param calendar 获取值得日历对象，非null\n     * @param fragment 分段值\n     */\n    public static long getFragmentInSeconds(final Calendar calendar, final int fragment)\n    /**\n     * 返回指定分段内的分钟数 。 所有大于分段的DateFields将被忽略 。\n     *\n     * 请求任何日期分钟，将返回当前的小时的分钟数 (返回一个数字在0和59之间)\n     * 有效的分段值是： Calendar.YEAR、Calendar.MONTH、Calendar.DAY_OF_YEAR、\n     * Calendar.DATE、Calendar.HOUR_OF_DAY、Calendar.MINUTE、\n     * Calendar.SECOND 和 Calendar.MILLISECOND\n     * 分段值小于或等于MINUTE，将返回0 。\n     * \n     *  January 1, 2008 7:15:10.538 with Calendar.HOUR_OF_DAY as fragment will return 15\n     *  January 6, 2008 7:15:10.538 with Calendar.HOUR_OF_DAY as fragment will return 15\n     *  January 1, 2008 7:15:10.538 with Calendar.MONTH as fragment will return 15\n     *  January 6, 2008 7:15:10.538 with Calendar.MONTH as fragment will return 435 (7*60 + 15)\n     *  January 16, 2008 7:15:10.538 with Calendar.MILLISECOND as fragment will return 0\n     * \n     * @param calendar 获取值得日历对象，非null\n     * @param fragment 分段值\n     */\n    public static long getFragmentInMinutes(final Calendar calendar, final int fragment)\n    /**\n     * 返回指定分段内的小时数 。 所有大于分段的DateFields将被忽略 。\n     *\n     * 请求任何日期小时，将返回当前的天的小时数 (返回一个数字在0和23之间) 。\n     * 有效的分段值是： Calendar.YEAR、Calendar.MONTH、Calendar.DAY_OF_YEAR、\n     * Calendar.DATE、Calendar.HOUR_OF_DAY、Calendar.MINUTE、\n     * Calendar.SECOND 和 Calendar.MILLISECOND\n     * 分段值小于或等于HOUR_OF_DAY，将返回0 。\n     *  \n     *  January 1, 2008 7:15:10.538 with Calendar.DAY_OF_YEAR as fragment will return 7\n     *  January 6, 2008 7:15:10.538 with Calendar.DAY_OF_YEAR as fragment will return 7\n     *  January 1, 2008 7:15:10.538 with Calendar.MONTH as fragment will return 7\n     *  January 6, 2008 7:15:10.538 with Calendar.MONTH as fragment will return 127 (5*24 + 7)\n     *  January 16, 2008 7:15:10.538 with Calendar.MILLISECOND as fragment will return 0\n     *  \n     * @param calendar 获取值得日历对象，非null\n     * @param fragment 分段值\n     */\n    public static long getFragmentInHours(final Calendar calendar, final int fragment)\n    /**\n     * 返回指定分段内的天数 。 所有大于分段的DateFields将被忽略 。\n     *\n     * 请求任何日期天数，将返回当前的月的天数 (返回一个数字在1和31之间) 。\n     * 有效的分段值是： Calendar.YEAR、Calendar.MONTH、Calendar.DAY_OF_YEAR、\n     * Calendar.DATE、Calendar.HOUR_OF_DAY、Calendar.MINUTE、\n     * Calendar.SECOND 和 Calendar.MILLISECOND\n     * 分段值小于或等于DATE，将返回0 。\n     * \n     *  January 28, 2008 with Calendar.MONTH as fragment will return 28\n     *  February 28, 2008 with Calendar.MONTH as fragment will return 28\n     *  January 28, 2008 with Calendar.YEAR as fragment will return 28\n     *  February 28, 2008 with Calendar.YEAR as fragment will return 59\n     *  January 28, 2008 with Calendar.MILLISECOND as fragment will return 0\n     * \n     * @param calendar 获取值得日历对象，非null\n     * @param fragment 分段值\n     */\n    public static long getFragmentInDays(final Calendar calendar, final int fragment)\n    /**\n     * 截取比较两个日历对象的field处的值是否相同 。\n     * \n     * @param cal1 第一个日历对象，非null\n     * @param cal2 第二个日历对象，非null\n     * @param field Calendar中的阈值\n     */\n    public static boolean truncatedEquals(final Calendar cal1, final Calendar cal2, final int field)\n    /**\n     * 截取比较两个日期对象的field处的值是否相同 。\n     * \n     * @param date1 第一个日期对象，非null\n     * @param date2 第二个日期对象，非null\n     * @param field Calendar中的阈值\n     */\n    public static boolean truncatedEquals(final Date date1, final Date date2, final int field)\n    /**\n     * 截取比较两个日历对象的field处的值 。\n     * 如果第一个日历小于、等于、大于第二个，则对应返回负整数、0、正整数\n     * \n     * @param cal1 第一个日历对象，非null\n     * @param cal2 第二个日历对象，非null\n     * @param field Calendar中的阈值\n     */\n    public static int truncatedCompareTo(final Calendar cal1, final Calendar cal2, final int field)\n    /**\n     * 截取比较断两个日期对象的field处的值 。\n     * 如果第一个日期小于、等于、大于第二个，则对应返回负整数、0、正整数\n     * \n     * @param date1 第一个日期对象，非null\n     * @param date2 第二个日期对象，非null\n     * @param field Calendar中的阈值\n     */\n    public static int truncatedCompareTo(final Date date1, final Date date2, final int field)', '', 0, '', '', 'http://luna.iszychen.club:8089/upload/2020/05/commons-logo-727d29ca44d04ac4bbdbf8efb936988a.png', 'Apache-commons-lang3-DateUtils', 0, NULL, 20, 0, NULL, NULL, 'datautils');
INSERT INTO `posts` VALUES (0, 40, '2020-05-29 14:23:29', 0, '2020-05-29 14:23:29', 0, 0, '2020-05-29 14:23:29', '<h3 id=\"javacv调用摄像-javacv-包含了opencv-ffmpeg-等图像处理包-使用javacpp-转为c-文件后执行\">JavaCV调用摄像, javacv 包含了opencv ,ffmpeg 等图像处理包 使用javacpp 转为C 文件后执行</h3>\n<ol>\n<li>首先需要引入依赖，当然，也可以使用Jar包，推荐使用maven管理</li>\n</ol>\n<pre><code class=\"language-xml\">&lt;dependency&gt;\n            &lt;groupId&gt;org.bytedeco&lt;/groupId&gt;\n            &lt;artifactId&gt;javacpp&lt;/artifactId&gt;\n            &lt;version&gt;1.5.3&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- javacv --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.bytedeco&lt;/groupId&gt;\n            &lt;artifactId&gt;javacv&lt;/artifactId&gt;\n            &lt;version&gt;1.5.3&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.bytedeco&lt;/groupId&gt;\n            &lt;artifactId&gt;javacv-platform&lt;/artifactId&gt;\n            &lt;version&gt;1.5.3&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- opencv --&gt;\n        &lt;!-- https://mvnrepository.com/artifact/org.bytedeco/opencv --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.bytedeco&lt;/groupId&gt;\n            &lt;artifactId&gt;opencv&lt;/artifactId&gt;\n            &lt;version&gt;4.3.0-1.5.3&lt;/version&gt;\n        &lt;/dependency&gt;\n</code></pre>\n<ol start=\"2\">\n<li>开始测试\n<ul>\n<li>首先测试获取摄像</li>\n</ul>\n</li>\n</ol>\n<pre><code class=\"language-java\"> /**\n     * 预览摄像\n     * 本机摄像头默认0，这里使用javacv的抓取器，至于使用的是ffmpeg还是opencv，请自行查看源码\n     *\n     * @param number\n     * @throws Exception\n     */\n    public static void getScreenshots(Integer number) throws Exception {\n        if (number == null) {\n            number = 0;\n        }\n        OpenCVFrameGrabber grabber = new OpenCVFrameGrabber(number);\n        grabber.start(); // 开始获取摄像头数据\n        CanvasFrame canvas = new CanvasFrame(&quot;摄像头&quot;);\n        // 新建一个窗口\n        canvas.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        canvas.setAlwaysOnTop(true);\n        while (true) {\n            if (!canvas.isDisplayable()) {\n                grabber.stop();\n                // 停止抓取\n                System.exit(2);\n                // 退出\n                break;\n            }\n            canvas.showImage(grabber.grab());\n            // 获取摄像头图像并放到窗口上显示， 这里的Frame frame=grabber.grab(); frame是一帧视频图像\n            Thread.sleep(50);\n            // 50毫秒刷新一次图像\n        }\n    }\n\n</code></pre>\n<ol start=\"3\">\n<li>视频录制</li>\n</ol>\n<pre><code class=\"language-java\">/**\n     * 按帧录制本机摄像头视频（边预览边录制，停止预览即停止录制）\n     *\n     * @author eguid\n     * @param outputFile -录制的文件路径，也可以是rtsp或者rtmp等流媒体服务器发布地址\n     * @param frameRate - 视频帧率\n     * @throws Exception\n     * @throws InterruptedException\n     * @throws org.bytedeco.javacv.FrameRecorder.Exception\n     */\n    public static void recordCamera(String outputFile, double frameRate)\n        throws Exception {\n        Loader.load(opencv_objdetect.class);\n        FrameGrabber grabber = FrameGrabber.createDefault(0);\n        // 本机摄像头默认0，这里使用javacv的抓取器，至于使用的是ffmpeg还是opencv，请自行查看源码\n        grabber.start();\n        // 转换器\n        IplImage grabbedImage = JavaCvUtils.converter.convert(grabber.grab());\n        // 抓取一帧视频并将其转换为图像，至于用这个图像用来做什么？加水印，人脸识别等等自行添加\n        int width = grabbedImage.width();\n        int height = grabbedImage.height();\n\n        FrameRecorder recorder = FrameRecorder.createDefault(outputFile, width, height);\n        recorder.setVideoCodec(avcodec.AV_CODEC_ID_H264);\n        // avcodec.AV_CODEC_ID_H264，编码\n        recorder.setFormat(&quot;flv&quot;);\n        // 封装格式，如果是推送到rtmp就必须是flv封装格式\n        recorder.setFrameRate(frameRate);\n\n        recorder.start();\n        // 开启录制器\n        long startTime = 0;\n        long videoTS = 0;\n        CanvasFrame frame = new CanvasFrame(&quot;camera&quot;, CanvasFrame.getDefaultGamma() / grabber.getGamma());\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        frame.setAlwaysOnTop(true);\n        // 不知道为什么这里不做转换就不能推到rtmp\n        while (frame.isVisible() &amp;&amp; (grabbedImage = JavaCvUtils.converter.convert(grabber.grab())) != null) {\n            Frame rotatedFrame = JavaCvUtils.converter.convert(grabbedImage);\n            frame.showImage(rotatedFrame);\n            if (startTime == 0) {\n                startTime = System.currentTimeMillis();\n            }\n            videoTS = 1000 * (System.currentTimeMillis() - startTime);\n            recorder.setTimestamp(videoTS);\n            recorder.record(rotatedFrame);\n            Thread.sleep(40);\n        }\n        frame.dispose();\n        recorder.stop();\n        recorder.release();\n        grabber.stop();\n    }\n</code></pre>\n', 0, '### JavaCV调用摄像, javacv 包含了opencv ,ffmpeg 等图像处理包 使用javacpp 转为C 文件后执行\n\n1. 首先需要引入依赖，当然，也可以使用Jar包，推荐使用maven管理\n\n```xml\n<dependency>\n            <groupId>org.bytedeco</groupId>\n            <artifactId>javacpp</artifactId>\n            <version>1.5.3</version>\n        </dependency>\n\n        <!-- javacv -->\n        <dependency>\n            <groupId>org.bytedeco</groupId>\n            <artifactId>javacv</artifactId>\n            <version>1.5.3</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.bytedeco</groupId>\n            <artifactId>javacv-platform</artifactId>\n            <version>1.5.3</version>\n        </dependency>\n\n        <!-- opencv -->\n        <!-- https://mvnrepository.com/artifact/org.bytedeco/opencv -->\n        <dependency>\n            <groupId>org.bytedeco</groupId>\n            <artifactId>opencv</artifactId>\n            <version>4.3.0-1.5.3</version>\n        </dependency>\n```\n\n2. 开始测试\n   - 首先测试获取摄像\n\n```java\n /**\n     * 预览摄像\n     * 本机摄像头默认0，这里使用javacv的抓取器，至于使用的是ffmpeg还是opencv，请自行查看源码\n     *\n     * @param number\n     * @throws Exception\n     */\n    public static void getScreenshots(Integer number) throws Exception {\n        if (number == null) {\n            number = 0;\n        }\n        OpenCVFrameGrabber grabber = new OpenCVFrameGrabber(number);\n        grabber.start(); // 开始获取摄像头数据\n        CanvasFrame canvas = new CanvasFrame(\"摄像头\");\n        // 新建一个窗口\n        canvas.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        canvas.setAlwaysOnTop(true);\n        while (true) {\n            if (!canvas.isDisplayable()) {\n                grabber.stop();\n                // 停止抓取\n                System.exit(2);\n                // 退出\n                break;\n            }\n            canvas.showImage(grabber.grab());\n            // 获取摄像头图像并放到窗口上显示， 这里的Frame frame=grabber.grab(); frame是一帧视频图像\n            Thread.sleep(50);\n            // 50毫秒刷新一次图像\n        }\n    }\n\n```\n\n3. 视频录制\n\n```java\n/**\n     * 按帧录制本机摄像头视频（边预览边录制，停止预览即停止录制）\n     *\n     * @author eguid\n     * @param outputFile -录制的文件路径，也可以是rtsp或者rtmp等流媒体服务器发布地址\n     * @param frameRate - 视频帧率\n     * @throws Exception\n     * @throws InterruptedException\n     * @throws org.bytedeco.javacv.FrameRecorder.Exception\n     */\n    public static void recordCamera(String outputFile, double frameRate)\n        throws Exception {\n        Loader.load(opencv_objdetect.class);\n        FrameGrabber grabber = FrameGrabber.createDefault(0);\n        // 本机摄像头默认0，这里使用javacv的抓取器，至于使用的是ffmpeg还是opencv，请自行查看源码\n        grabber.start();\n        // 转换器\n        IplImage grabbedImage = JavaCvUtils.converter.convert(grabber.grab());\n        // 抓取一帧视频并将其转换为图像，至于用这个图像用来做什么？加水印，人脸识别等等自行添加\n        int width = grabbedImage.width();\n        int height = grabbedImage.height();\n\n        FrameRecorder recorder = FrameRecorder.createDefault(outputFile, width, height);\n        recorder.setVideoCodec(avcodec.AV_CODEC_ID_H264);\n        // avcodec.AV_CODEC_ID_H264，编码\n        recorder.setFormat(\"flv\");\n        // 封装格式，如果是推送到rtmp就必须是flv封装格式\n        recorder.setFrameRate(frameRate);\n\n        recorder.start();\n        // 开启录制器\n        long startTime = 0;\n        long videoTS = 0;\n        CanvasFrame frame = new CanvasFrame(\"camera\", CanvasFrame.getDefaultGamma() / grabber.getGamma());\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        frame.setAlwaysOnTop(true);\n        // 不知道为什么这里不做转换就不能推到rtmp\n        while (frame.isVisible() && (grabbedImage = JavaCvUtils.converter.convert(grabber.grab())) != null) {\n            Frame rotatedFrame = JavaCvUtils.converter.convert(grabbedImage);\n            frame.showImage(rotatedFrame);\n            if (startTime == 0) {\n                startTime = System.currentTimeMillis();\n            }\n            videoTS = 1000 * (System.currentTimeMillis() - startTime);\n            recorder.setTimestamp(videoTS);\n            recorder.record(rotatedFrame);\n            Thread.sleep(40);\n        }\n        frame.dispose();\n        recorder.stop();\n        recorder.release();\n        grabber.stop();\n    }\n```\n\n', '', 0, '', '', 'http://luna.iszychen.club:8089/upload/2020/05/opencv-45e4016218034a929f3b17aa1471ff2a.jpg', 'JavaCV操作', 0, NULL, 23, 0, NULL, NULL, 'javacv');
INSERT INTO `posts` VALUES (0, 41, '2020-05-31 17:17:49', 0, '2020-05-31 17:17:49', 0, 0, '2020-05-31 17:17:49', '<h3 id=\"springboot--logback-配置\">SpringBoot + LogBack 配置</h3>\n<ol>\n<li>首先可使用Spring 默认依赖,其他maven项目可引入</li>\n</ol>\n<pre><code class=\"language-xml\">&lt;!-- https://mvnrepository.com/artifact/ch.qos.logback/logback-classic --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;\n    &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;\n    &lt;version&gt;1.3.0-alpha5&lt;/version&gt;\n    &lt;scope&gt;test&lt;/scope&gt;\n&lt;/dependency&gt;\n\n</code></pre>\n<ol start=\"2\">\n<li>使用</li>\n</ol>\n<pre><code class=\"language-java\">@SpringBootApplication\npublic class SpringBootDemoLogbackApplication {\n\n    private static final Logger log = LoggerFactory.getLogger(SpringBootDemoLogbackApplication.class);\n\n	public static void main(String[] args) {\n		ConfigurableApplicationContext context = SpringApplication.run(SpringBootDemoLogbackApplication.class, args);\n		int length = context.getBeanDefinitionNames().length;\n		log.trace(&quot;Spring boot启动初始化了 {} 个 Bean&quot;, length);\n		log.debug(&quot;Spring boot启动初始化了 {} 个 Bean&quot;, length);\n		log.info(&quot;Spring boot启动初始化了 {} 个 Bean&quot;, length);\n		log.warn(&quot;Spring boot启动初始化了 {} 个 Bean&quot;, length);\n		log.error(&quot;Spring boot启动初始化了 {} 个 Bean&quot;, length);\n		try {\n			int i = 0;\n			int j = 1 / i;\n		} catch (Exception e) {\n			log.error(&quot;【SpringBootDemoLogbackApplication】启动异常：&quot;, e);\n		}\n	}\n}\n</code></pre>\n<ol start=\"3\">\n<li>也可使用lombok 配合IDEA插件 使用@Sel4j 注解 无需LoggerFactory创建log</li>\n</ol>\n<h3 id=\"配置\">配置</h3>\n<ul>\n<li>\n<p><a href=\"(https://juejin.im/post/5b51f85c5188251af91a7525#heading-6)\">参照这个文件介绍</a></p>\n</li>\n<li>\n<p>这里贴出自定义完整配置</p>\n</li>\n</ul>\n<pre><code class=\"language-xml\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;configuration&gt;\n&lt;!--  &quot;${FILE_LOG_PATTERN:-%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}} ${LOG_LEVEL_PATTERN:-%5p} ${PID:- } - - - [%t]  %-40.40logger{39}  %file:%line: %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}&quot;--&gt;\n  &lt;property name=&quot;FILE_ERROR_PATTERN_LUNA&quot;\n            value=&quot;${FILE_ERROR_PATTERN_LUNA:-%d{${FILE_ERROR_PATTERN_LUNA:-yyyy-MM-dd HH:mm:ss.SSS}} ${LOG_LEVEL_PATTERN:-%5p} ${PID:- } --- [%t] %file:%line: -  %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}&quot;/&gt;\n  &lt;include resource=&quot;org/springframework/boot/logging/logback/defaults.xml&quot;/&gt;\n\n  &lt;conversionRule conversionWord=&quot;clr&quot; converterClass=&quot;org.springframework.boot.logging.logback.ColorConverter&quot; /&gt;\n  &lt;conversionRule conversionWord=&quot;wex&quot; converterClass=&quot;org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter&quot; /&gt;\n  &lt;conversionRule conversionWord=&quot;wEx&quot;\n                  converterClass=&quot;org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter&quot; /&gt;\n  &lt;!-- 彩色日志格式 --&gt;\n  &lt;property name=&quot;CONSOLE_LOG_PATTERN_LUNA&quot;\n            value=&quot;${CONSOLE_LOG_PATTERN_LUNA:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%t]){faint} %clr(%40.40file:%line:){cyan} %clr( -){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}&quot;&gt;\n\n  &lt;/property&gt;\n	&lt;appender name=&quot;CONSOLE&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;\n		&lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt;\n			&lt;level&gt;INFO&lt;/level&gt;\n		&lt;/filter&gt;\n		&lt;encoder&gt;\n			&lt;pattern&gt;${CONSOLE_LOG_PATTERN_LUNA}&lt;/pattern&gt;\n			&lt;charset&gt;UTF-8&lt;/charset&gt;\n		&lt;/encoder&gt;\n	&lt;/appender&gt;\n\n	&lt;appender name=&quot;FILE_INFO&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;\n		&lt;!--如果只是想要 Info 级别的日志，只是过滤 info 还是会输出 Error 日志，因为 Error 的级别高， 所以我们使用下面的策略，可以避免输出 Error 的日志--&gt;\n		&lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt;\n			&lt;!--过滤 Error--&gt;\n			&lt;level&gt;ERROR&lt;/level&gt;\n			&lt;!--匹配到就禁止--&gt;\n			&lt;onMatch&gt;DENY&lt;/onMatch&gt;\n			&lt;!--没有匹配到就允许--&gt;\n			&lt;onMismatch&gt;ACCEPT&lt;/onMismatch&gt;\n		&lt;/filter&gt;\n		&lt;!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则如果同时有&lt;File&gt;和&lt;FileNamePattern&gt;，那么当天日志是&lt;File&gt;，明天会自动把今天的日志改名为今天的日期。即，&lt;File&gt; 的日志都是当天的。--&gt;\n		&lt;!--&lt;File&gt;logs/info.spring-boot-demo-logback.log&lt;/File&gt;--&gt;\n		&lt;!--滚动策略，按照时间滚动 TimeBasedRollingPolicy--&gt;\n		&lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;\n			&lt;!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间--&gt;\n			&lt;FileNamePattern&gt;logs/spring-boot-demo-logback/info.created_on_%d{yyyy-MM-dd}.part_%i.log&lt;/FileNamePattern&gt;\n			&lt;!--只保留最近90天的日志--&gt;\n			&lt;maxHistory&gt;90&lt;/maxHistory&gt;\n			&lt;!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志--&gt;\n			&lt;!--&lt;totalSizeCap&gt;1GB&lt;/totalSizeCap&gt;--&gt;\n			&lt;timeBasedFileNamingAndTriggeringPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;\n				&lt;!-- maxFileSize:这是活动文件的大小，默认值是10MB,本篇设置为1KB，只是为了演示 --&gt;\n				&lt;maxFileSize&gt;2MB&lt;/maxFileSize&gt;\n			&lt;/timeBasedFileNamingAndTriggeringPolicy&gt;\n		&lt;/rollingPolicy&gt;\n		&lt;!--&lt;triggeringPolicy class=&quot;ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy&quot;&gt;--&gt;\n		&lt;!--&lt;maxFileSize&gt;1KB&lt;/maxFileSize&gt;--&gt;\n		&lt;!--&lt;/triggeringPolicy&gt;--&gt;\n		&lt;encoder&gt;\n			&lt;pattern&gt;${FILE_ERROR_PATTERN_LUNA}&lt;/pattern&gt;\n			&lt;charset&gt;UTF-8&lt;/charset&gt; &lt;!-- 此处设置字符集 --&gt;\n		&lt;/encoder&gt;\n	&lt;/appender&gt;\n\n	&lt;appender name=&quot;FILE_ERROR&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;\n		&lt;!--如果只是想要 Error 级别的日志，那么需要过滤一下，默认是 info 级别的，ThresholdFilter--&gt;\n		&lt;filter class=&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&gt;\n			&lt;level&gt;Error&lt;/level&gt;\n		&lt;/filter&gt;\n		&lt;!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则如果同时有&lt;File&gt;和&lt;FileNamePattern&gt;，那么当天日志是&lt;File&gt;，明天会自动把今天的日志改名为今天的日期。即，&lt;File&gt; 的日志都是当天的。--&gt;\n		&lt;!--&lt;File&gt;logs/error.spring-boot-demo-logback.log&lt;/File&gt;--&gt;\n		&lt;!--滚动策略，按照时间滚动 TimeBasedRollingPolicy--&gt;\n		&lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;\n			&lt;!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间--&gt;\n			&lt;FileNamePattern&gt;logs/spring-boot-demo-logback/error.created_on_%d{yyyy-MM-dd}.part_%i.log&lt;/FileNamePattern&gt;\n			&lt;!--只保留最近90天的日志--&gt;\n			&lt;maxHistory&gt;90&lt;/maxHistory&gt;\n			&lt;timeBasedFileNamingAndTriggeringPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;\n				&lt;!-- maxFileSize:这是活动文件的大小，默认值是10MB,本篇设置为1KB，只是为了演示 --&gt;\n				&lt;maxFileSize&gt;2MB&lt;/maxFileSize&gt;\n			&lt;/timeBasedFileNamingAndTriggeringPolicy&gt;\n		&lt;/rollingPolicy&gt;\n		&lt;encoder&gt;\n			&lt;pattern&gt;${FILE_ERROR_PATTERN_LUNA}&lt;/pattern&gt;\n			&lt;charset&gt;UTF-8&lt;/charset&gt; &lt;!-- 此处设置字符集 --&gt;\n		&lt;/encoder&gt;\n	&lt;/appender&gt;\n\n	&lt;root level=&quot;info&quot;&gt;\n		&lt;appender-ref ref=&quot;CONSOLE&quot;/&gt;\n		&lt;appender-ref ref=&quot;FILE_INFO&quot;/&gt;\n		&lt;appender-ref ref=&quot;FILE_ERROR&quot;/&gt;\n	&lt;/root&gt;\n&lt;/configuration&gt;\n\n</code></pre>\n<h3 id=\"注意\">注意</h3>\n<p>logback和logback-spring.xml都可以用来配置logback，但是2者的加载顺序是不一样的。</p>\n<p>logback.xml---&gt;application.properties---&gt;logback-spring.xml.</p>\n<p>logback.xml加载早于application.properties，所以如果你在logback.xml使用了变量时，而恰好这个变量是写在application.properties时，那么就会获取不到，只要改成logback-spring.xml就可以解决。</p>\n<hr />\n', 0, '###   SpringBoot + LogBack 配置\n\n1. 首先可使用Spring 默认依赖,其他maven项目可引入\n\n```xml\n<!-- https://mvnrepository.com/artifact/ch.qos.logback/logback-classic -->\n<dependency>\n    <groupId>ch.qos.logback</groupId>\n    <artifactId>logback-classic</artifactId>\n    <version>1.3.0-alpha5</version>\n    <scope>test</scope>\n</dependency>\n\n```\n\n2. 使用\n\n```java\n@SpringBootApplication\npublic class SpringBootDemoLogbackApplication {\n\n    private static final Logger log = LoggerFactory.getLogger(SpringBootDemoLogbackApplication.class);\n\n	public static void main(String[] args) {\n		ConfigurableApplicationContext context = SpringApplication.run(SpringBootDemoLogbackApplication.class, args);\n		int length = context.getBeanDefinitionNames().length;\n		log.trace(\"Spring boot启动初始化了 {} 个 Bean\", length);\n		log.debug(\"Spring boot启动初始化了 {} 个 Bean\", length);\n		log.info(\"Spring boot启动初始化了 {} 个 Bean\", length);\n		log.warn(\"Spring boot启动初始化了 {} 个 Bean\", length);\n		log.error(\"Spring boot启动初始化了 {} 个 Bean\", length);\n		try {\n			int i = 0;\n			int j = 1 / i;\n		} catch (Exception e) {\n			log.error(\"【SpringBootDemoLogbackApplication】启动异常：\", e);\n		}\n	}\n}\n```\n\n3. 也可使用lombok 配合IDEA插件 使用@Sel4j 注解 无需LoggerFactory创建log\n\n### 配置\n\n- [参照这个文件介绍]((https://juejin.im/post/5b51f85c5188251af91a7525#heading-6))\n\n- 这里贴出自定义完整配置\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n<!--  \"${FILE_LOG_PATTERN:-%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}} ${LOG_LEVEL_PATTERN:-%5p} ${PID:- } - - - [%t]  %-40.40logger{39}  %file:%line: %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}\"-->\n  <property name=\"FILE_ERROR_PATTERN_LUNA\"\n            value=\"${FILE_ERROR_PATTERN_LUNA:-%d{${FILE_ERROR_PATTERN_LUNA:-yyyy-MM-dd HH:mm:ss.SSS}} ${LOG_LEVEL_PATTERN:-%5p} ${PID:- } --- [%t] %file:%line: -  %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}\"/>\n  <include resource=\"org/springframework/boot/logging/logback/defaults.xml\"/>\n\n  <conversionRule conversionWord=\"clr\" converterClass=\"org.springframework.boot.logging.logback.ColorConverter\" />\n  <conversionRule conversionWord=\"wex\" converterClass=\"org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter\" />\n  <conversionRule conversionWord=\"wEx\"\n                  converterClass=\"org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter\" />\n  <!-- 彩色日志格式 -->\n  <property name=\"CONSOLE_LOG_PATTERN_LUNA\"\n            value=\"${CONSOLE_LOG_PATTERN_LUNA:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%t]){faint} %clr(%40.40file:%line:){cyan} %clr( -){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}\">\n\n  </property>\n	<appender name=\"CONSOLE\" class=\"ch.qos.logback.core.ConsoleAppender\">\n		<filter class=\"ch.qos.logback.classic.filter.LevelFilter\">\n			<level>INFO</level>\n		</filter>\n		<encoder>\n			<pattern>${CONSOLE_LOG_PATTERN_LUNA}</pattern>\n			<charset>UTF-8</charset>\n		</encoder>\n	</appender>\n\n	<appender name=\"FILE_INFO\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n		<!--如果只是想要 Info 级别的日志，只是过滤 info 还是会输出 Error 日志，因为 Error 的级别高， 所以我们使用下面的策略，可以避免输出 Error 的日志-->\n		<filter class=\"ch.qos.logback.classic.filter.LevelFilter\">\n			<!--过滤 Error-->\n			<level>ERROR</level>\n			<!--匹配到就禁止-->\n			<onMatch>DENY</onMatch>\n			<!--没有匹配到就允许-->\n			<onMismatch>ACCEPT</onMismatch>\n		</filter>\n		<!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天的日志改名为今天的日期。即，<File> 的日志都是当天的。-->\n		<!--<File>logs/info.spring-boot-demo-logback.log</File>-->\n		<!--滚动策略，按照时间滚动 TimeBasedRollingPolicy-->\n		<rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n			<!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间-->\n			<FileNamePattern>logs/spring-boot-demo-logback/info.created_on_%d{yyyy-MM-dd}.part_%i.log</FileNamePattern>\n			<!--只保留最近90天的日志-->\n			<maxHistory>90</maxHistory>\n			<!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志-->\n			<!--<totalSizeCap>1GB</totalSizeCap>-->\n			<timeBasedFileNamingAndTriggeringPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\">\n				<!-- maxFileSize:这是活动文件的大小，默认值是10MB,本篇设置为1KB，只是为了演示 -->\n				<maxFileSize>2MB</maxFileSize>\n			</timeBasedFileNamingAndTriggeringPolicy>\n		</rollingPolicy>\n		<!--<triggeringPolicy class=\"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy\">-->\n		<!--<maxFileSize>1KB</maxFileSize>-->\n		<!--</triggeringPolicy>-->\n		<encoder>\n			<pattern>${FILE_ERROR_PATTERN_LUNA}</pattern>\n			<charset>UTF-8</charset> <!-- 此处设置字符集 -->\n		</encoder>\n	</appender>\n\n	<appender name=\"FILE_ERROR\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n		<!--如果只是想要 Error 级别的日志，那么需要过滤一下，默认是 info 级别的，ThresholdFilter-->\n		<filter class=\"ch.qos.logback.classic.filter.ThresholdFilter\">\n			<level>Error</level>\n		</filter>\n		<!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天的日志改名为今天的日期。即，<File> 的日志都是当天的。-->\n		<!--<File>logs/error.spring-boot-demo-logback.log</File>-->\n		<!--滚动策略，按照时间滚动 TimeBasedRollingPolicy-->\n		<rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n			<!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间-->\n			<FileNamePattern>logs/spring-boot-demo-logback/error.created_on_%d{yyyy-MM-dd}.part_%i.log</FileNamePattern>\n			<!--只保留最近90天的日志-->\n			<maxHistory>90</maxHistory>\n			<timeBasedFileNamingAndTriggeringPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\">\n				<!-- maxFileSize:这是活动文件的大小，默认值是10MB,本篇设置为1KB，只是为了演示 -->\n				<maxFileSize>2MB</maxFileSize>\n			</timeBasedFileNamingAndTriggeringPolicy>\n		</rollingPolicy>\n		<encoder>\n			<pattern>${FILE_ERROR_PATTERN_LUNA}</pattern>\n			<charset>UTF-8</charset> <!-- 此处设置字符集 -->\n		</encoder>\n	</appender>\n\n	<root level=\"info\">\n		<appender-ref ref=\"CONSOLE\"/>\n		<appender-ref ref=\"FILE_INFO\"/>\n		<appender-ref ref=\"FILE_ERROR\"/>\n	</root>\n</configuration>\n\n```\n\n### 注意\n\nlogback和logback-spring.xml都可以用来配置logback，但是2者的加载顺序是不一样的。\n\nlogback.xml--->application.properties--->logback-spring.xml.\n\nlogback.xml加载早于application.properties，所以如果你在logback.xml使用了变量时，而恰好这个变量是写在application.properties时，那么就会获取不到，只要改成logback-spring.xml就可以解决。\n\n------------------------------------------------\n\n', '', 0, '', '', 'http://luna.iszychen.club/blog/upload/2020/05/logback-c0e50aebb24f4f88ba632e7e76c9465a.jpg', ' SpringBoot + LogBack 配置', 0, NULL, 17, 0, NULL, NULL, 'logback');
INSERT INTO `posts` VALUES (0, 42, '2020-06-03 21:47:28', 0, '2020-06-03 21:47:28', 0, 0, '2020-06-03 21:47:28', '<h2 id=\"springboot的异步方法调用与线程池配置\">Springboot的异步方法调用与线程池配置</h2>\n<h3 id=\"简单使用\">简单使用</h3>\n<ol>\n<li>springboot 自带了scheduling 包里已经设置了异步方法,我们只需要在方法或者类上加入@Async 注解即可</li>\n</ol>\n<pre><code class=\"language-java\">package com.xkcoding.async.task;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.scheduling.annotation.Async;\nimport org.springframework.stereotype.Service;\n\n\n/**\n * 将一个类声明为异步类，那么这个类对外暴露的方法全部成为异步方法。\n * 与异步方法的区别是这里的注解是加到类上，异步方法的注解是加到方法上。仅此而已\n * @DESC \n * @author guchuang\n *\n */\n@Async\n@Service\n@Slf4j\npublic class AsyncClass {\n    public AsyncClass() {\n        log.info(&quot;-------------------------init AsyncClass--------------------&quot;);\n    }\n    volatile int index = 0;\n    public void foo() {\n        log.info(&quot;asyncclass foo, index:&quot; + index);\n    }\n    public void foo(int i) {\n        this.index = i;\n        log.info(&quot;asyncclass foo, index:&quot; + i);\n    }\n    public void bar(int i) {\n        this.index = i;\n        log.info(&quot;asyncclass bar, index:&quot; + i);\n    }\n}\n\n</code></pre>\n<ol start=\"2\">\n<li>然后直接调用即可产生异步效果</li>\n</ol>\n<pre><code class=\"language-java\"> @Test\n    public void test() throws InterruptedException {\n        asyncClass.foo();\n        asyncClass.foo(10);\n        Thread.sleep(100);\n        asyncClass.foo();\n    }\n</code></pre>\n<h3 id=\"threadfactory自定义配置\">ThreadFactory自定义配置</h3>\n<ol>\n<li>首先需创建一个类继承ThreadFactory,书写构造器</li>\n<li>覆写他newThread 方法</li>\n</ol>\n<pre><code class=\"language-java\">public class MyThreadFactory implements ThreadFactory {\n\n    private static final AtomicInteger poolNumber   = new AtomicInteger(1);\n    private final ThreadGroup          group;\n    private final AtomicInteger        threadNumber = new AtomicInteger(1);\n    private final String               namePrefix;\n\n    public MyThreadFactory(String name) {\n        SecurityManager s = System.getSecurityManager();\n        group = (s != null) ? s.getThreadGroup() : Thread.currentThread().getThreadGroup();\n        namePrefix = name + &quot;-pool-&quot; +\n            poolNumber.getAndIncrement() +\n            &quot;-thread-&quot;;\n    }\n\n    /**\n     * 覆写了newThread方法\n     * @param r\n     * @return\n     */\n    @Override\n    public Thread newThread(Runnable r) {\n        Thread t = new Thread(group, r,\n            namePrefix + threadNumber.getAndIncrement(),\n            0);\n        if (t.isDaemon()) {\n            t.setDaemon(false);\n        }\n        if (t.getPriority() != Thread.NORM_PRIORITY) {\n            t.setPriority(Thread.NORM_PRIORITY);\n        }\n        return t;\n    }\n}\n</code></pre>\n<h3 id=\"线程池异步配置\">线程池异步配置</h3>\n<ol>\n<li>添加注解@EnableAsync和@Configuration</li>\n<li>实现AsyncConfigurer接口,如果不覆写AsyncConfigurer的话，这个方法暴露bean会被当做@Async的默认线程池。</li>\n<li>ExecutorService配置</li>\n</ol>\n<pre><code class=\"language-java\">private static ExecutorService threadPool               = new ThreadPoolExecutor(5, 5,\n        60L, TimeUnit.MILLISECONDS,\n        new LinkedBlockingQueue&lt;&gt;(3), new MyThreadFactory(&quot;common1&quot;));\n</code></pre>\n<ul>\n<li>定义默认调用线程执行器和异常处理机制</li>\n</ul>\n<pre><code class=\"language-java\">/**\n     * 这个实例声明的TaskExecutor会成为@Async方法运行的默认线程执行器\n     * \n     * @Bean 使这个实例完全被spring接管\n     */\n    @Bean\n    @Override\n    public TaskExecutor getAsyncExecutor() {\n        return new ConcurrentTaskExecutor(Executors.newFixedThreadPool(5, new MyThreadFactory(&quot;async&quot;)));\n    }\n\n    /**\n     * 定义@Async方法默认的异常处理机制（只对void型异步返回方法有效，Future返回值类型的异常会抛给调用者）\n     */\n    @Override\n    public AsyncUncaughtExceptionHandler getAsyncUncaughtExceptionHandler() {\n        return (e, method, objects) -&gt; log.error(&quot;Method:&quot; + method + &quot;, exception:&quot; + e.getMessage());\n    }\n</code></pre>\n<ul>\n<li>自定义线程执行器配置</li>\n</ul>\n<pre><code class=\"language-java\">/**\n     * 如果不覆写AsyncConfigurer的话，这个方法暴露bean会被当做@Async的默认线程池。\n     * 注意必须是这个方法名（也就是bean name， 或者显示指定bean name @Qualifier(&quot;taskExecutor&quot;)），返回类型可以是Executor或者TaskExecutor\n     * 如果没有配置的Executor，则默认使用SimpleAsyncTaskExecutor\n     * 备注： 这种方式声明的bean，方法名就是bean name\n     * \n     * @return\n     */\n    @Bean\n    public Executor taskExecutor() {\n        return new ConcurrentTaskExecutor(Executors.newFixedThreadPool(5, new MyThreadFactory(&quot;async0&quot;)));\n    }\n\n    /**\n     * 定义其它的TaskExecutor，声明@Async方法的时候可以指定TaskExecutor，达到切换底层的目的\n     * \n     * @return\n     */\n    @Bean\n    public TaskExecutor async1() {\n        // 线程数,线程名\n        return new ConcurrentTaskExecutor(Executors.newFixedThreadPool(2, new MyThreadFactory(&quot;async1&quot;)));\n    }\n\n    /**\n     * 没有设置拒绝策略\n     * \n     * @return\n     */\n    @Bean\n    @Qualifier(&quot;async2&quot;)\n    public TaskExecutor myAsyncExecutor2() {\n        return new ConcurrentTaskExecutor(threadPool);\n    }\n</code></pre>\n<h3 id=\"异常配置\">异常配置</h3>\n<ul>\n<li>线程满载后处理类</li>\n</ul>\n<pre><code class=\"language-java\">package com.xkcoding.async.task;\n\nimport com.xkcoding.async.MyLog;\nimport lombok.extern.log4j.Log4j;\nimport lombok.extern.slf4j.Slf4j;\n\nimport java.util.concurrent.RejectedExecutionHandler;\nimport java.util.concurrent.ThreadPoolExecutor;\n\n/**\n * 线程池满之后的处理策略类\n * @DESC \n * @author guchuang\n *\n */\n@Slf4j\npublic class RejectedPolicy implements RejectedExecutionHandler {\n    public RejectedPolicy() { }\n\n    /**\n     * 向线程池中添加线程被拒绝时会调用这个方法。一般拒绝是因为线程池满了\n     *\n     * @param r 被拒绝的任务\n     * @param e 拒绝这个任务的线程池\n     */\n    @Override\n    public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {\n        log.info(&quot;one thread is rejected, i will deal it&quot;);\n        if (!e.isShutdown()) {\n            r.run();\n        }\n    }\n}\n\n</code></pre>\n<h3 id=\"测试\">测试</h3>\n<ol>\n<li>获取返回值</li>\n</ol>\n<pre><code class=\"language-java\">@Test\n    public void testFuture() throws InterruptedException, ExecutionException {\n        log.info(&quot;\\n-----------------start-----------------------&quot;);\n        Future&lt;String&gt; result1 = asyncMethod.futureTask1();\n        CompletableFuture&lt;String&gt; result2 = asyncMethod.futureTask2();\n        // 获取返回值\n        log.info(&quot;result1:&quot; + result1.get());\n        log.info(&quot;result2:&quot; + result2.get());\n    }\n</code></pre>\n<ol start=\"2\">\n<li>无返回值方法可直接抛出异常,有返回值方法方法需要通过get方法获取异常</li>\n</ol>\n<pre><code class=\"language-java\">  @Test\n    public void testE() {\n        try {\n            Future&lt;String&gt; result = asyncMethod.futureE();\n            //这里调用get才会获得异常\n            log.info(result.get());\n        } catch(Exception e) {\n            //e.printStackTrace();\n            log.info(&quot;this is excepted Exception:&quot; + e.getMessage());\n        }\n        // 直接抛出异常\n        asyncMethod.fooE();\n        log.info(&quot;end call e&quot;);\n        //log.sleep(1000);\n    }\n</code></pre>\n<ol start=\"3\">\n<li>当超过线程词最大容量的时候，会抛出TaskRejectedException</li>\n</ol>\n<pre><code class=\"language-java\"> @Test\n    public void testRejectWithDeal() throws InterruptedException {\n        log.info(&quot;\\n-----------------start testRejectWithDeal-----------------------&quot;);\n        log.info(&quot;start add task&quot;);\n        try {\n            for (int i = 0; i &lt; 10; i++) {\n                asyncMethod.asyncSleep3(i, 1);\n            }\n        } catch(RejectedExecutionException e) {\n            log.info(&quot;excepted exception:&quot; + e.getMessage());\n        }\n        log.info(&quot;finished add task&quot;);\n        Thread.sleep(100 * 1000);\n    }\n</code></pre>\n', 0, '\n## Springboot的异步方法调用与线程池配置\n\n### 简单使用\n\n1. springboot 自带了scheduling 包里已经设置了异步方法,我们只需要在方法或者类上加入@Async 注解即可\n\n```java\npackage com.xkcoding.async.task;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.scheduling.annotation.Async;\nimport org.springframework.stereotype.Service;\n\n\n/**\n * 将一个类声明为异步类，那么这个类对外暴露的方法全部成为异步方法。\n * 与异步方法的区别是这里的注解是加到类上，异步方法的注解是加到方法上。仅此而已\n * @DESC \n * @author guchuang\n *\n */\n@Async\n@Service\n@Slf4j\npublic class AsyncClass {\n    public AsyncClass() {\n        log.info(\"-------------------------init AsyncClass--------------------\");\n    }\n    volatile int index = 0;\n    public void foo() {\n        log.info(\"asyncclass foo, index:\" + index);\n    }\n    public void foo(int i) {\n        this.index = i;\n        log.info(\"asyncclass foo, index:\" + i);\n    }\n    public void bar(int i) {\n        this.index = i;\n        log.info(\"asyncclass bar, index:\" + i);\n    }\n}\n\n```\n\n2. 然后直接调用即可产生异步效果\n\n```java\n @Test\n    public void test() throws InterruptedException {\n        asyncClass.foo();\n        asyncClass.foo(10);\n        Thread.sleep(100);\n        asyncClass.foo();\n    }\n```\n\n### ThreadFactory自定义配置\n\n1. 首先需创建一个类继承ThreadFactory,书写构造器\n2. 覆写他newThread 方法\n\n```java\npublic class MyThreadFactory implements ThreadFactory {\n\n    private static final AtomicInteger poolNumber   = new AtomicInteger(1);\n    private final ThreadGroup          group;\n    private final AtomicInteger        threadNumber = new AtomicInteger(1);\n    private final String               namePrefix;\n\n    public MyThreadFactory(String name) {\n        SecurityManager s = System.getSecurityManager();\n        group = (s != null) ? s.getThreadGroup() : Thread.currentThread().getThreadGroup();\n        namePrefix = name + \"-pool-\" +\n            poolNumber.getAndIncrement() +\n            \"-thread-\";\n    }\n\n    /**\n     * 覆写了newThread方法\n     * @param r\n     * @return\n     */\n    @Override\n    public Thread newThread(Runnable r) {\n        Thread t = new Thread(group, r,\n            namePrefix + threadNumber.getAndIncrement(),\n            0);\n        if (t.isDaemon()) {\n            t.setDaemon(false);\n        }\n        if (t.getPriority() != Thread.NORM_PRIORITY) {\n            t.setPriority(Thread.NORM_PRIORITY);\n        }\n        return t;\n    }\n}\n```\n\n### 线程池异步配置\n\n1. 添加注解@EnableAsync和@Configuration\n2. 实现AsyncConfigurer接口,如果不覆写AsyncConfigurer的话，这个方法暴露bean会被当做@Async的默认线程池。\n3. ExecutorService配置\n\n```java\nprivate static ExecutorService threadPool               = new ThreadPoolExecutor(5, 5,\n        60L, TimeUnit.MILLISECONDS,\n        new LinkedBlockingQueue<>(3), new MyThreadFactory(\"common1\"));\n```\n\n- 定义默认调用线程执行器和异常处理机制\n\n```java\n/**\n     * 这个实例声明的TaskExecutor会成为@Async方法运行的默认线程执行器\n     * \n     * @Bean 使这个实例完全被spring接管\n     */\n    @Bean\n    @Override\n    public TaskExecutor getAsyncExecutor() {\n        return new ConcurrentTaskExecutor(Executors.newFixedThreadPool(5, new MyThreadFactory(\"async\")));\n    }\n\n    /**\n     * 定义@Async方法默认的异常处理机制（只对void型异步返回方法有效，Future返回值类型的异常会抛给调用者）\n     */\n    @Override\n    public AsyncUncaughtExceptionHandler getAsyncUncaughtExceptionHandler() {\n        return (e, method, objects) -> log.error(\"Method:\" + method + \", exception:\" + e.getMessage());\n    }\n```\n\n- 自定义线程执行器配置\n\n```java\n/**\n     * 如果不覆写AsyncConfigurer的话，这个方法暴露bean会被当做@Async的默认线程池。\n     * 注意必须是这个方法名（也就是bean name， 或者显示指定bean name @Qualifier(\"taskExecutor\")），返回类型可以是Executor或者TaskExecutor\n     * 如果没有配置的Executor，则默认使用SimpleAsyncTaskExecutor\n     * 备注： 这种方式声明的bean，方法名就是bean name\n     * \n     * @return\n     */\n    @Bean\n    public Executor taskExecutor() {\n        return new ConcurrentTaskExecutor(Executors.newFixedThreadPool(5, new MyThreadFactory(\"async0\")));\n    }\n\n    /**\n     * 定义其它的TaskExecutor，声明@Async方法的时候可以指定TaskExecutor，达到切换底层的目的\n     * \n     * @return\n     */\n    @Bean\n    public TaskExecutor async1() {\n        // 线程数,线程名\n        return new ConcurrentTaskExecutor(Executors.newFixedThreadPool(2, new MyThreadFactory(\"async1\")));\n    }\n\n    /**\n     * 没有设置拒绝策略\n     * \n     * @return\n     */\n    @Bean\n    @Qualifier(\"async2\")\n    public TaskExecutor myAsyncExecutor2() {\n        return new ConcurrentTaskExecutor(threadPool);\n    }\n```\n\n### 异常配置\n\n- 线程满载后处理类\n\n```java\npackage com.xkcoding.async.task;\n\nimport com.xkcoding.async.MyLog;\nimport lombok.extern.log4j.Log4j;\nimport lombok.extern.slf4j.Slf4j;\n\nimport java.util.concurrent.RejectedExecutionHandler;\nimport java.util.concurrent.ThreadPoolExecutor;\n\n/**\n * 线程池满之后的处理策略类\n * @DESC \n * @author guchuang\n *\n */\n@Slf4j\npublic class RejectedPolicy implements RejectedExecutionHandler {\n    public RejectedPolicy() { }\n\n    /**\n     * 向线程池中添加线程被拒绝时会调用这个方法。一般拒绝是因为线程池满了\n     *\n     * @param r 被拒绝的任务\n     * @param e 拒绝这个任务的线程池\n     */\n    @Override\n    public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {\n        log.info(\"one thread is rejected, i will deal it\");\n        if (!e.isShutdown()) {\n            r.run();\n        }\n    }\n}\n\n```\n\n### 测试\n\n1. 获取返回值\n\n```java\n@Test\n    public void testFuture() throws InterruptedException, ExecutionException {\n        log.info(\"\\n-----------------start-----------------------\");\n        Future<String> result1 = asyncMethod.futureTask1();\n        CompletableFuture<String> result2 = asyncMethod.futureTask2();\n        // 获取返回值\n        log.info(\"result1:\" + result1.get());\n        log.info(\"result2:\" + result2.get());\n    }\n```\n\n2. 无返回值方法可直接抛出异常,有返回值方法方法需要通过get方法获取异常\n\n```java\n  @Test\n    public void testE() {\n        try {\n            Future<String> result = asyncMethod.futureE();\n            //这里调用get才会获得异常\n            log.info(result.get());\n        } catch(Exception e) {\n            //e.printStackTrace();\n            log.info(\"this is excepted Exception:\" + e.getMessage());\n        }\n        // 直接抛出异常\n        asyncMethod.fooE();\n        log.info(\"end call e\");\n        //log.sleep(1000);\n    }\n```\n\n3. 当超过线程词最大容量的时候，会抛出TaskRejectedException\n\n```java\n @Test\n    public void testRejectWithDeal() throws InterruptedException {\n        log.info(\"\\n-----------------start testRejectWithDeal-----------------------\");\n        log.info(\"start add task\");\n        try {\n            for (int i = 0; i < 10; i++) {\n                asyncMethod.asyncSleep3(i, 1);\n            }\n        } catch(RejectedExecutionException e) {\n            log.info(\"excepted exception:\" + e.getMessage());\n        }\n        log.info(\"finished add task\");\n        Thread.sleep(100 * 1000);\n    }\n```', '', 0, '', '', 'http://luna.iszychen.club/blog/upload/2020/06/async-23e3c1b368a14361869443fbb109867e.jpg', 'Springboot的异步方法调用与线程池配置', 0, NULL, 15, 0, NULL, NULL, 'async');
INSERT INTO `posts` VALUES (0, 43, '2020-06-03 21:49:19', 0, '2020-06-03 21:49:19', 0, 0, '2020-06-03 21:49:19', '<h2 id=\"redis与springboot整合\">redis与springboot整合</h2>\n<h3 id=\"依赖\">依赖</h3>\n<pre><code class=\"language-xml\">        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- 对象池，使用redis时必须引入 --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;\n            &lt;artifactId&gt;commons-pool2&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n</code></pre>\n<h3 id=\"yml-配置\">yml 配置</h3>\n<pre><code class=\"language-yml\">spring:\n  redis:\n    host: xxx\n    # 连接超时时间（记得添加单位，Duration）\n    timeout: 10000ms\n    # Redis默认情况下有16个分片，这里配置具体使用的分片\n    # database: 0\n    lettuce:\n      pool:\n        # 连接池最大连接数（使用负值表示没有限制） 默认 8\n        max-active: 8\n        # 连接池最大阻塞等待时间（使用负值表示没有限制） 默认 -1\n        max-wait: -1ms\n        # 连接池中的最大空闲连接 默认 8\n        max-idle: 8\n        # 连接池中的最小空闲连接 默认 0\n        min-idle: 0\n  cache:\n    # 一般来说是不用配置的，Spring Cache 会根据依赖的包自行装配\n    type: redis\nlogging:\n  level:\n    com.xkcoding: debug\n\n</code></pre>\n<h3 id=\"配置\">配置</h3>\n<pre><code class=\"language-java\">@Configuration\n@AutoConfigureAfter(RedisAutoConfiguration.class)\n@EnableCaching\npublic class RedisConfig {\n\n    /**\n     * 默认情况下的模板只能支持RedisTemplate&lt;String, String&gt;，也就是只能存入字符串，因此支持序列化\n     */\n    @Bean\n    public RedisTemplate&lt;String, Serializable&gt; redisCacheTemplate(LettuceConnectionFactory redisConnectionFactory) {\n        RedisTemplate&lt;String, Serializable&gt; template = new RedisTemplate&lt;&gt;();\n        template.setKeySerializer(new StringRedisSerializer());\n        template.setValueSerializer(new GenericJackson2JsonRedisSerializer());\n        template.setConnectionFactory(redisConnectionFactory);\n        return template;\n    }\n\n    /**\n     * Strig ,Object\n     * @param redisConnectionFactory\n     * @return\n     */\n    @Bean\n    public RedisTemplate&lt;String, Object&gt; redisCacheTemplate2(LettuceConnectionFactory redisConnectionFactory) {\n        RedisTemplate&lt;String, Object&gt; template = new RedisTemplate&lt;&gt;();\n        template.setKeySerializer(new StringRedisSerializer());\n        template.setValueSerializer(new GenericJackson2JsonRedisSerializer());\n        template.setConnectionFactory(redisConnectionFactory);\n        return template;\n    }\n\n    /**\n     * 配置使用注解的时候缓存配置，默认是序列化反序列化的形式，加上此配置则为 json 形式\n     */\n    @Bean\n    public CacheManager cacheManager(RedisConnectionFactory factory) {\n        // 配置序列化\n        RedisCacheConfiguration config = RedisCacheConfiguration.defaultCacheConfig();\n        RedisCacheConfiguration redisCacheConfiguration = config.serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(new StringRedisSerializer())).serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(new GenericJackson2JsonRedisSerializer()));\n\n        return RedisCacheManager.builder(factory).cacheDefaults(redisCacheConfiguration).build();\n    }\n}\n\n</code></pre>\n<h3 id=\"使用\">使用</h3>\n<ul>\n<li>使用Spring 自动注入</li>\n</ul>\n<pre><code class=\"language-java\">    // 默认模板\n    @Autowired\n    private StringRedisTemplate stringRedisTemplate;\n\n    // 自定义模板\n    @Autowired\n    private RedisTemplate&lt;String, Serializable&gt; redisCacheTemplate;\n\n    @Autowired\n    private RedisTemplate&lt;String, Object&gt; redisTemplate;\n\n</code></pre>\n<h2 id=\"api使用\">Api使用</h2>\n<h3 id=\"通用操作工具\">通用操作工具</h3>\n<ol>\n<li>常用的分布式锁加强版</li>\n</ol>\n<pre><code class=\"language-Java\">    /**\n     * 最终加强分布式锁\n     * @param key key值\n     * @return 是否获取到\n     */\npublic boolean lock(String key) {\n        String lock = LOCK_PREFIX + key;\n        // 利用lambda表达式\n        return (Boolean) redisTemplate.execute(new RedisCallback&lt;Object&gt;() {\n            @Override\n            public Object doInRedis(RedisConnection redisConnection) throws DataAccessException {\n                long expireAt = System.currentTimeMillis() + LOCK_EXPIRE + 1;\n                Boolean acquire = redisConnection.setNX(lock.getBytes(), String.valueOf(expireAt).getBytes());\n                if (acquire) {\n                    return true;\n                } else {\n                    byte[] value = redisConnection.get(lock.getBytes());\n                    if (Objects.nonNull(value) &amp;&amp; value.length &gt; 0) {\n                        long expireTime = Long.parseLong(new String(value));\n                        if (expireTime &lt; System.currentTimeMillis()) {\n                            // 如果锁已经过期\n                            byte[] oldValue = redisConnection.getSet(lock.getBytes(), String.valueOf(System.currentTimeMillis() + LOCK_EXPIRE + 1).getBytes());\n                            // 防止死锁\n                            return Long.parseLong(new String(oldValue)) &lt; System.currentTimeMillis();\n                        }\n                    }\n                }\n                return false;\n            }\n        });\n    }\n</code></pre>\n<ol start=\"2\">\n<li>删除锁</li>\n</ol>\n<pre><code class=\"language-java\">    /**\n     * 删除锁\n     *\n     * @param key\n     */\n    public void delete(String key) {\n        redisTemplate.delete(key);\n    }\n</code></pre>\n<ol start=\"3\">\n<li>指定缓存失效时间</li>\n</ol>\n<pre><code class=\"language-java\">    /**\n     * 指定缓存失效时间\n     * @param key 键\n     * @param time 时间(秒)\n     * @return\n     */\n    public boolean expire(String key,long time){\n        try {\n            if(time&gt;0){\n                redisTemplate.expire(key, time, TimeUnit.SECONDS);\n            }\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n</code></pre>\n<ol start=\"4\">\n<li>根据key 获取过期时间</li>\n</ol>\n<pre><code class=\"language-java\">    /**\n     * 根据key 获取过期时间\n     * @param key 键 不能为null\n     * @return 时间(秒) 返回0代表为永久有效\n     */\n    public long getExpire(String key){\n        return redisTemplate.getExpire(key,TimeUnit.SECONDS);\n    }\n</code></pre>\n<ol start=\"5\">\n<li>判断key是否存在</li>\n</ol>\n<pre><code class=\"language-java\">    /**\n     * 判断key是否存在\n     * @param key 键\n     * @return true 存在 false不存在\n     */\n    public boolean hasKey(String key){\n        try {\n            return redisTemplate.hasKey(key);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n</code></pre>\n<ol start=\"6\">\n<li>删除缓存</li>\n</ol>\n<pre><code class=\"language-java\">    /**\n     * 删除缓存\n     * @param key 可以传一个值 或多个\n     */\n    @SuppressWarnings(&quot;unchecked&quot;)\n    public void del(String ... key){\n        if(key!=null&amp;&amp;key.length&gt;0){\n            if(key.length==1){\n                redisTemplate.delete(key[0]);\n            }else{\n                redisTemplate.delete(CollectionUtils.arrayToList(key));\n            }\n        }\n    }\n</code></pre>\n<h3 id=\"string类型相关操作\">String类型相关操作</h3>\n<ol>\n<li>获取缓存</li>\n</ol>\n<pre><code class=\"language-java\">    /**\n     * 获取缓存\n     * @param key 键\n     * @return 值\n     */\n    public Object get(String key){\n        return key==null?null:redisTemplate.opsForValue().get(key);\n    }\n</code></pre>\n<ol start=\"2\">\n<li>获取缓存</li>\n</ol>\n<pre><code class=\"language-dart\">    /**\n     * 获取缓存\n     * @param key 键\n     * @return 值\n     */\n    public Object get(String key){\n        return key==null?null:redisTemplate.opsForValue().get(key);\n    }\n</code></pre>\n<ol start=\"3\">\n<li>添加缓存</li>\n</ol>\n<pre><code class=\"language-dart\">    /**\n     * 添加缓存\n     * @param key 键\n     * @param value 值\n     * @return true成功 false失败\n     */\n    public boolean set(String key,Object value) {\n        try {\n            redisTemplate.opsForValue().set(key, value);\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n\n    }\n</code></pre>\n<ol start=\"4\">\n<li>添加缓存并设置过期时间</li>\n</ol>\n<pre><code class=\"language-dart\">    /**\n     * 添加缓存并设置过期时间\n     * @param key 键\n     * @param value 值\n     * @param time 时间(秒) time要大于0 如果time小于等于0 将设置无限期\n     * @return true成功 false 失败\n     */\n    public boolean set(String key,Object value,long time){\n        try {\n            if(time&gt;0){\n                redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);\n            }else{\n                set(key, value);\n            }\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n</code></pre>\n<ol start=\"5\">\n<li>递增操作</li>\n</ol>\n<pre><code class=\"language-java\">    /**\n     * 递增\n     * @param key 键\n     * @return\n     */\n    public long incr(String key, long delta){\n        if(delta&lt;0){\n            throw new RuntimeException(&quot;递增因子必须大于0&quot;);\n        }\n        return redisTemplate.opsForValue().increment(key, delta);\n    }\n</code></pre>\n<ol start=\"6\">\n<li>递减操作</li>\n</ol>\n<pre><code class=\"language-java\">    /**\n     * 递减\n     * @param key 键\n     * @return\n     */\n    public long decr(String key, long delta){\n        if(delta&lt;0){\n            throw new RuntimeException(&quot;递减因子必须大于0&quot;);\n        }\n        return redisTemplate.opsForValue().increment(key, -delta);\n    }\n</code></pre>\n<h3 id=\"哈希类型相关操作\">哈希类型相关操作</h3>\n<ol>\n<li>设置一组Map的键值对</li>\n</ol>\n<pre><code class=\"language-dart\">    /**\n     * HashGet\n     * @param key 键 不能为null\n     * @param item 项 不能为null\n     * @return 值\n     */\n    public Object hget(String key,String item){\n        return redisTemplate.opsForHash().get(key, item);\n    }\n\n</code></pre>\n<ol start=\"2\">\n<li>获取指定Map的所有键值对</li>\n</ol>\n<pre><code class=\"language-dart\">    /**\n     * 获取hashKey对应的所有键值\n     * @param key 键\n     * @return 对应的多个键值\n     */\n    public Map&lt;Object,Object&gt; hmget(String key){\n        return redisTemplate.opsForHash().entries(key);\n    }\n\n</code></pre>\n<ol start=\"3\">\n<li>添加一个Map类型值</li>\n</ol>\n<pre><code class=\"language-dart\">    /**\n     * HashSet\n     * @param key 键\n     * @param map 对应多个键值\n     * @return true 成功 false 失败\n     */\n    public boolean hmset(String key, Map&lt;String,Object&gt; map){\n        try {\n            redisTemplate.opsForHash().putAll(key, map);\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n</code></pre>\n<ol start=\"4\">\n<li>添加一个Map类型值并设置过期时间</li>\n</ol>\n<pre><code class=\"language-dart\">    /**\n     * HashSet 并设置时间\n     * @param key 键\n     * @param map 对应多个键值\n     * @param time 时间(秒)\n     * @return true成功 false失败\n     */\n    public boolean hmset(String key, Map&lt;String,Object&gt; map, long time){\n        try {\n            redisTemplate.opsForHash().putAll(key, map);\n            if(time&gt;0){\n                expire(key, time);\n            }\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n</code></pre>\n<ol start=\"5\">\n<li>向一张hash表中放入数据,如果不存在将创建</li>\n</ol>\n<pre><code class=\"language-dart\">    /**\n     * 向一张hash表中放入数据,如果不存在将创建\n     * @param key 键\n     * @param item 项\n     * @param value 值\n     * @return true 成功 false失败\n     */\n    public boolean hset(String key,String item,Object value) {\n        try {\n            redisTemplate.opsForHash().put(key, item, value);\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n</code></pre>\n<ol start=\"6\">\n<li>向一张hash表中放入数据,如果不存在将创建并设置过期时间</li>\n</ol>\n<pre><code class=\"language-dart\">    /**\n     * 向一张hash表中放入数据,如果不存在将创建\n     * @param key 键\n     * @param item 项\n     * @param value 值\n     * @param time 时间(秒)  注意:如果已存在的hash表有时间,这里将会替换原有的时间\n     * @return true 成功 false失败\n     */\n    public boolean hset(String key,String item,Object value,long time) {\n        try {\n            redisTemplate.opsForHash().put(key, item, value);\n            if(time&gt;0){\n                expire(key, time);\n            }\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n</code></pre>\n<ol start=\"7\">\n<li>删除hash表中的值</li>\n</ol>\n<pre><code class=\"language-dart\">    /**\n     * 删除hash表中的值\n     * @param key 键 不能为null\n     * @param item 项 可以使多个 不能为null\n     */\n    public void hdel(String key, Object... item){\n        redisTemplate.opsForHash().delete(key,item);\n    }\n\n</code></pre>\n<ol start=\"8\">\n<li>判断hash表中是否有该项的值</li>\n</ol>\n<pre><code class=\"language-dart\">    /**\n     * 判断hash表中是否有该项的值\n     * @param key 键 不能为null\n     * @param item 项 不能为null\n     * @return true 存在 false不存在\n     */\n    public boolean hHasKey(String key, String item){\n        return redisTemplate.opsForHash().hasKey(key, item);\n    }\n\n</code></pre>\n<ol start=\"9\">\n<li>递增，如果不存在,就会创建一个 并把新增后的值返回</li>\n</ol>\n<pre><code class=\"language-dart\">    /**\n     * hash递增 如果不存在,就会创建一个 并把新增后的值返回\n     * @param key 键\n     * @param item 项\n     * @param by 要增加几(大于0)\n     * @return\n     */\n    public double hincr(String key, String item,double by){\n        return redisTemplate.opsForHash().increment(key, item, by);\n    }\n\n</code></pre>\n<ol start=\"10\">\n<li>递减</li>\n</ol>\n<pre><code class=\"language-dart\">    /**\n     * hash递减\n     * @param key 键\n     * @param item 项\n     * @param by 要减少记(小于0)\n     * @return\n     */\n    public double hdecr(String key, String item,double by){\n        return redisTemplate.opsForHash().increment(key, item,-by);\n    }\n\n</code></pre>\n<h3 id=\"set类型相关操作\">SET类型相关操作</h3>\n<ol>\n<li>根据key获取Set中的所有值</li>\n</ol>\n<pre><code class=\"language-dart\">    /**\n     * 根据key获取Set中的所有值\n     * @param key 键\n     * @return\n     */\n    public Set&lt;Object&gt; sGet(String key){\n        try {\n            return redisTemplate.opsForSet().members(key);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n</code></pre>\n<ol start=\"2\">\n<li>根据value从一个set中查询,是否存在</li>\n</ol>\n<pre><code class=\"language-dart\">    /**\n     * 根据value从一个set中查询,是否存在\n     * @param key 键\n     * @param value 值\n     * @return true 存在 false不存在\n     */\n    public boolean sHasKey(String key,Object value){\n        try {\n            return redisTemplate.opsForSet().isMember(key, value);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n</code></pre>\n<ol start=\"3\">\n<li>添加一个SET缓存</li>\n</ol>\n<pre><code class=\"language-dart\">    /**\n     * 将数据放入set缓存\n     * @param key 键\n     * @param values 值 可以是多个\n     * @return 成功个数\n     */\n    public long sSet(String key, Object...values) {\n        try {\n            return redisTemplate.opsForSet().add(key, values);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return 0;\n        }\n    }\n\n</code></pre>\n<ol start=\"4\">\n<li>添加一个SET缓存并设置过期时间</li>\n</ol>\n<pre><code class=\"language-java\">    /**\n     * 将set数据放入缓存\n     * @param key 键\n     * @param time 时间(秒)\n     * @param values 值 可以是多个\n     * @return 成功个数\n     */\n    public long sSetAndTime(String key,long time,Object...values) {\n        try {\n            Long count = redisTemplate.opsForSet().add(key, values);\n            if(time&gt;0) expire(key, time);\n            return count;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return 0;\n        }\n    }\n\n</code></pre>\n<ol start=\"5\">\n<li>获取SET缓存的长度</li>\n</ol>\n<pre><code class=\"language-java\">    /**\n     * 获取set缓存的长度\n     * @param key 键\n     * @return\n     */\n    public long sGetSetSize(String key){\n        try {\n            return redisTemplate.opsForSet().size(key);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return 0;\n        }\n    }\n\n</code></pre>\n<ol start=\"6\">\n<li>移除指定key的缓存</li>\n</ol>\n<pre><code class=\"language-kotlin\">    /**\n     * 移除值为value的\n     * @param key 键\n     * @param values 值 可以是多个\n     * @return 移除的个数\n     */\n    public long setRemove(String key, Object ...values) {\n        try {\n            Long count = redisTemplate.opsForSet().remove(key, values);\n            return count;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return 0;\n        }\n    }\n\n</code></pre>\n<h3 id=\"list类型相关操作\">LIST类型相关操作</h3>\n<ol>\n<li>获取list缓存的内容</li>\n</ol>\n<pre><code class=\"language-dart\">    /**\n     * 获取list缓存的内容\n     * @param key 键\n     * @param start 开始\n     * @param end 结束  0 到 -1代表所有值\n     * @return\n     */\n    public List&lt;Object&gt; lGet(String key,long start, long end){\n        try {\n            return redisTemplate.opsForList().range(key, start, end);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n</code></pre>\n<ol start=\"2\">\n<li>获取list缓存的长度</li>\n</ol>\n<pre><code class=\"language-java\">    /**\n     * 获取list缓存的长度\n     * @param key 键\n     * @return\n     */\n    public long lGetListSize(String key){\n        try {\n            return redisTemplate.opsForList().size(key);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return 0;\n        }\n    }\n\n</code></pre>\n<ol start=\"3\">\n<li>通过索引 获取list中的值</li>\n</ol>\n<pre><code class=\"language-java\">    /**\n     * 通过索引 获取list中的值\n     * @param key 键\n     * @param index 索引  index&gt;=0时， 0 表头，1 第二个元素，依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推\n     * @return\n     */\n    public Object lGetIndex(String key,long index){\n        try {\n            return redisTemplate.opsForList().index(key, index);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n</code></pre>\n<ol start=\"4\">\n<li>将list放入缓存</li>\n</ol>\n<pre><code class=\"language-dart\">    /**\n     * 将list放入缓存\n     * @param key 键\n     * @param value 值\n     * @return\n     */\n    public boolean lSet(String key, Object value) {\n        try {\n            redisTemplate.opsForList().rightPush(key, value);\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n</code></pre>\n<ol start=\"5\">\n<li>将list放入缓存并设置过期时间</li>\n</ol>\n<pre><code class=\"language-java\">    /**\n     * 将list放入缓存\n     * @param key 键\n     * @param value 值\n     * @param time 时间(秒)\n     * @return\n     */\n    public boolean lSet(String key, Object value, long time) {\n        try {\n            redisTemplate.opsForList().rightPush(key, value);\n            if (time &gt; 0) expire(key, time);\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n</code></pre>\n<ol start=\"6\">\n<li>将list放入缓存</li>\n</ol>\n<pre><code class=\"language-dart\">    /**\n     * 将list放入缓存\n     * @param key 键\n     * @param value 值\n     * @return\n     */\n    public boolean lSet(String key, List&lt;Object&gt; value) {\n        try {\n            redisTemplate.opsForList().rightPushAll(key, value);\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n</code></pre>\n<ol start=\"7\">\n<li>将list放入缓存并设置过期时间</li>\n</ol>\n<pre><code class=\"language-dart\">    /**\n     * 将list放入缓存\n     * @param key 键\n     * @param value 值\n     * @param time 时间(秒)\n     * @return\n     */\n    public boolean lSet(String key, List&lt;Object&gt; value, long time) {\n        try {\n            redisTemplate.opsForList().rightPushAll(key, value);\n            if (time &gt; 0) expire(key, time);\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n</code></pre>\n<ol start=\"8\">\n<li>根据索引修改list中的某条数据</li>\n</ol>\n<pre><code class=\"language-dart\">    /**\n     * 根据索引修改list中的某条数据\n     * @param key 键\n     * @param index 索引\n     * @param value 值\n     * @return\n     */\n    public boolean lUpdateIndex(String key, long index,Object value) {\n        try {\n            redisTemplate.opsForList().set(key, index, value);\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n</code></pre>\n<ol start=\"9\">\n<li>移除N个值为value</li>\n</ol>\n<pre><code class=\"language-csharp\">    /**\n     * 移除N个值为value\n     * @param key 键\n     * @param count 移除多少个\n     * @param value 值\n     * @return 移除的个数\n     */\n    public long lRemove(String key,long count,Object value) {\n        try {\n            Long remove = redisTemplate.opsForList().remove(key, count, value);\n            return remove;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return 0;\n        }\n    }\n\n</code></pre>\n', 0, '\n## redis与springboot整合\n\n### 依赖\n\n```xml\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-redis</artifactId>\n        </dependency>\n\n        <!-- 对象池，使用redis时必须引入 -->\n        <dependency>\n            <groupId>org.apache.commons</groupId>\n            <artifactId>commons-pool2</artifactId>\n        </dependency>\n```\n\n### yml 配置\n\n```yml\nspring:\n  redis:\n    host: xxx\n    # 连接超时时间（记得添加单位，Duration）\n    timeout: 10000ms\n    # Redis默认情况下有16个分片，这里配置具体使用的分片\n    # database: 0\n    lettuce:\n      pool:\n        # 连接池最大连接数（使用负值表示没有限制） 默认 8\n        max-active: 8\n        # 连接池最大阻塞等待时间（使用负值表示没有限制） 默认 -1\n        max-wait: -1ms\n        # 连接池中的最大空闲连接 默认 8\n        max-idle: 8\n        # 连接池中的最小空闲连接 默认 0\n        min-idle: 0\n  cache:\n    # 一般来说是不用配置的，Spring Cache 会根据依赖的包自行装配\n    type: redis\nlogging:\n  level:\n    com.xkcoding: debug\n\n```\n\n### 配置\n\n```java\n@Configuration\n@AutoConfigureAfter(RedisAutoConfiguration.class)\n@EnableCaching\npublic class RedisConfig {\n\n    /**\n     * 默认情况下的模板只能支持RedisTemplate<String, String>，也就是只能存入字符串，因此支持序列化\n     */\n    @Bean\n    public RedisTemplate<String, Serializable> redisCacheTemplate(LettuceConnectionFactory redisConnectionFactory) {\n        RedisTemplate<String, Serializable> template = new RedisTemplate<>();\n        template.setKeySerializer(new StringRedisSerializer());\n        template.setValueSerializer(new GenericJackson2JsonRedisSerializer());\n        template.setConnectionFactory(redisConnectionFactory);\n        return template;\n    }\n\n    /**\n     * Strig ,Object\n     * @param redisConnectionFactory\n     * @return\n     */\n    @Bean\n    public RedisTemplate<String, Object> redisCacheTemplate2(LettuceConnectionFactory redisConnectionFactory) {\n        RedisTemplate<String, Object> template = new RedisTemplate<>();\n        template.setKeySerializer(new StringRedisSerializer());\n        template.setValueSerializer(new GenericJackson2JsonRedisSerializer());\n        template.setConnectionFactory(redisConnectionFactory);\n        return template;\n    }\n\n    /**\n     * 配置使用注解的时候缓存配置，默认是序列化反序列化的形式，加上此配置则为 json 形式\n     */\n    @Bean\n    public CacheManager cacheManager(RedisConnectionFactory factory) {\n        // 配置序列化\n        RedisCacheConfiguration config = RedisCacheConfiguration.defaultCacheConfig();\n        RedisCacheConfiguration redisCacheConfiguration = config.serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(new StringRedisSerializer())).serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(new GenericJackson2JsonRedisSerializer()));\n\n        return RedisCacheManager.builder(factory).cacheDefaults(redisCacheConfiguration).build();\n    }\n}\n\n```\n\n### 使用\n\n- 使用Spring 自动注入\n\n```java\n    // 默认模板\n    @Autowired\n    private StringRedisTemplate stringRedisTemplate;\n\n    // 自定义模板\n    @Autowired\n    private RedisTemplate<String, Serializable> redisCacheTemplate;\n\n    @Autowired\n    private RedisTemplate<String, Object> redisTemplate;\n\n```\n\n## Api使用\n\n### 通用操作工具 \n\n1. 常用的分布式锁加强版\n\n```Java\n    /**\n     * 最终加强分布式锁\n     * @param key key值\n     * @return 是否获取到\n     */\npublic boolean lock(String key) {\n        String lock = LOCK_PREFIX + key;\n        // 利用lambda表达式\n        return (Boolean) redisTemplate.execute(new RedisCallback<Object>() {\n            @Override\n            public Object doInRedis(RedisConnection redisConnection) throws DataAccessException {\n                long expireAt = System.currentTimeMillis() + LOCK_EXPIRE + 1;\n                Boolean acquire = redisConnection.setNX(lock.getBytes(), String.valueOf(expireAt).getBytes());\n                if (acquire) {\n                    return true;\n                } else {\n                    byte[] value = redisConnection.get(lock.getBytes());\n                    if (Objects.nonNull(value) && value.length > 0) {\n                        long expireTime = Long.parseLong(new String(value));\n                        if (expireTime < System.currentTimeMillis()) {\n                            // 如果锁已经过期\n                            byte[] oldValue = redisConnection.getSet(lock.getBytes(), String.valueOf(System.currentTimeMillis() + LOCK_EXPIRE + 1).getBytes());\n                            // 防止死锁\n                            return Long.parseLong(new String(oldValue)) < System.currentTimeMillis();\n                        }\n                    }\n                }\n                return false;\n            }\n        });\n    }\n```\n\n2.  删除锁\n\n```java\n    /**\n     * 删除锁\n     *\n     * @param key\n     */\n    public void delete(String key) {\n        redisTemplate.delete(key);\n    }\n```\n\n3. 指定缓存失效时间\n\n```java\n    /**\n     * 指定缓存失效时间\n     * @param key 键\n     * @param time 时间(秒)\n     * @return\n     */\n    public boolean expire(String key,long time){\n        try {\n            if(time>0){\n                redisTemplate.expire(key, time, TimeUnit.SECONDS);\n            }\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n```\n\n4. 根据key 获取过期时间\n\n```java\n    /**\n     * 根据key 获取过期时间\n     * @param key 键 不能为null\n     * @return 时间(秒) 返回0代表为永久有效\n     */\n    public long getExpire(String key){\n        return redisTemplate.getExpire(key,TimeUnit.SECONDS);\n    }\n```\n\n5. 判断key是否存在\n\n```java\n    /**\n     * 判断key是否存在\n     * @param key 键\n     * @return true 存在 false不存在\n     */\n    public boolean hasKey(String key){\n        try {\n            return redisTemplate.hasKey(key);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n```\n\n6. 删除缓存\n\n```java\n    /**\n     * 删除缓存\n     * @param key 可以传一个值 或多个\n     */\n    @SuppressWarnings(\"unchecked\")\n    public void del(String ... key){\n        if(key!=null&&key.length>0){\n            if(key.length==1){\n                redisTemplate.delete(key[0]);\n            }else{\n                redisTemplate.delete(CollectionUtils.arrayToList(key));\n            }\n        }\n    }\n```\n\n### String类型相关操作\n\n1. 获取缓存\n\n```java\n    /**\n     * 获取缓存\n     * @param key 键\n     * @return 值\n     */\n    public Object get(String key){\n        return key==null?null:redisTemplate.opsForValue().get(key);\n    }\n```\n\n2. 获取缓存\n\n```dart\n    /**\n     * 获取缓存\n     * @param key 键\n     * @return 值\n     */\n    public Object get(String key){\n        return key==null?null:redisTemplate.opsForValue().get(key);\n    }\n```\n\n3. 添加缓存\n\n```dart\n    /**\n     * 添加缓存\n     * @param key 键\n     * @param value 值\n     * @return true成功 false失败\n     */\n    public boolean set(String key,Object value) {\n        try {\n            redisTemplate.opsForValue().set(key, value);\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n\n    }\n```\n\n4. 添加缓存并设置过期时间\n\n```dart\n    /**\n     * 添加缓存并设置过期时间\n     * @param key 键\n     * @param value 值\n     * @param time 时间(秒) time要大于0 如果time小于等于0 将设置无限期\n     * @return true成功 false 失败\n     */\n    public boolean set(String key,Object value,long time){\n        try {\n            if(time>0){\n                redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);\n            }else{\n                set(key, value);\n            }\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n```\n\n5. 递增操作\n\n```java\n    /**\n     * 递增\n     * @param key 键\n     * @return\n     */\n    public long incr(String key, long delta){\n        if(delta<0){\n            throw new RuntimeException(\"递增因子必须大于0\");\n        }\n        return redisTemplate.opsForValue().increment(key, delta);\n    }\n```\n\n6. 递减操作\n\n```java\n    /**\n     * 递减\n     * @param key 键\n     * @return\n     */\n    public long decr(String key, long delta){\n        if(delta<0){\n            throw new RuntimeException(\"递减因子必须大于0\");\n        }\n        return redisTemplate.opsForValue().increment(key, -delta);\n    }\n```\n\n### 哈希类型相关操作\n\n1. 设置一组Map的键值对\n\n```dart\n    /**\n     * HashGet\n     * @param key 键 不能为null\n     * @param item 项 不能为null\n     * @return 值\n     */\n    public Object hget(String key,String item){\n        return redisTemplate.opsForHash().get(key, item);\n    }\n\n```\n\n2. 获取指定Map的所有键值对\n\n```dart\n    /**\n     * 获取hashKey对应的所有键值\n     * @param key 键\n     * @return 对应的多个键值\n     */\n    public Map<Object,Object> hmget(String key){\n        return redisTemplate.opsForHash().entries(key);\n    }\n\n```\n\n3. 添加一个Map类型值\n\n```dart\n    /**\n     * HashSet\n     * @param key 键\n     * @param map 对应多个键值\n     * @return true 成功 false 失败\n     */\n    public boolean hmset(String key, Map<String,Object> map){\n        try {\n            redisTemplate.opsForHash().putAll(key, map);\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n```\n\n4. 添加一个Map类型值并设置过期时间\n\n```dart\n    /**\n     * HashSet 并设置时间\n     * @param key 键\n     * @param map 对应多个键值\n     * @param time 时间(秒)\n     * @return true成功 false失败\n     */\n    public boolean hmset(String key, Map<String,Object> map, long time){\n        try {\n            redisTemplate.opsForHash().putAll(key, map);\n            if(time>0){\n                expire(key, time);\n            }\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n```\n\n5. 向一张hash表中放入数据,如果不存在将创建\n\n```dart\n    /**\n     * 向一张hash表中放入数据,如果不存在将创建\n     * @param key 键\n     * @param item 项\n     * @param value 值\n     * @return true 成功 false失败\n     */\n    public boolean hset(String key,String item,Object value) {\n        try {\n            redisTemplate.opsForHash().put(key, item, value);\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n```\n\n6. 向一张hash表中放入数据,如果不存在将创建并设置过期时间\n\n```dart\n    /**\n     * 向一张hash表中放入数据,如果不存在将创建\n     * @param key 键\n     * @param item 项\n     * @param value 值\n     * @param time 时间(秒)  注意:如果已存在的hash表有时间,这里将会替换原有的时间\n     * @return true 成功 false失败\n     */\n    public boolean hset(String key,String item,Object value,long time) {\n        try {\n            redisTemplate.opsForHash().put(key, item, value);\n            if(time>0){\n                expire(key, time);\n            }\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n```\n\n7. 删除hash表中的值\n\n```dart\n    /**\n     * 删除hash表中的值\n     * @param key 键 不能为null\n     * @param item 项 可以使多个 不能为null\n     */\n    public void hdel(String key, Object... item){\n        redisTemplate.opsForHash().delete(key,item);\n    }\n\n```\n\n8. 判断hash表中是否有该项的值\n\n```dart\n    /**\n     * 判断hash表中是否有该项的值\n     * @param key 键 不能为null\n     * @param item 项 不能为null\n     * @return true 存在 false不存在\n     */\n    public boolean hHasKey(String key, String item){\n        return redisTemplate.opsForHash().hasKey(key, item);\n    }\n\n```\n\n9. 递增，如果不存在,就会创建一个 并把新增后的值返回\n\n```dart\n    /**\n     * hash递增 如果不存在,就会创建一个 并把新增后的值返回\n     * @param key 键\n     * @param item 项\n     * @param by 要增加几(大于0)\n     * @return\n     */\n    public double hincr(String key, String item,double by){\n        return redisTemplate.opsForHash().increment(key, item, by);\n    }\n\n```\n\n10. 递减\n\n```dart\n    /**\n     * hash递减\n     * @param key 键\n     * @param item 项\n     * @param by 要减少记(小于0)\n     * @return\n     */\n    public double hdecr(String key, String item,double by){\n        return redisTemplate.opsForHash().increment(key, item,-by);\n    }\n\n```\n\n### SET类型相关操作\n\n1. 根据key获取Set中的所有值\n\n```dart\n    /**\n     * 根据key获取Set中的所有值\n     * @param key 键\n     * @return\n     */\n    public Set<Object> sGet(String key){\n        try {\n            return redisTemplate.opsForSet().members(key);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n```\n\n2. 根据value从一个set中查询,是否存在\n\n```dart\n    /**\n     * 根据value从一个set中查询,是否存在\n     * @param key 键\n     * @param value 值\n     * @return true 存在 false不存在\n     */\n    public boolean sHasKey(String key,Object value){\n        try {\n            return redisTemplate.opsForSet().isMember(key, value);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n```\n\n3. 添加一个SET缓存\n\n```dart\n    /**\n     * 将数据放入set缓存\n     * @param key 键\n     * @param values 值 可以是多个\n     * @return 成功个数\n     */\n    public long sSet(String key, Object...values) {\n        try {\n            return redisTemplate.opsForSet().add(key, values);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return 0;\n        }\n    }\n\n```\n\n4.  添加一个SET缓存并设置过期时间\n\n```java\n    /**\n     * 将set数据放入缓存\n     * @param key 键\n     * @param time 时间(秒)\n     * @param values 值 可以是多个\n     * @return 成功个数\n     */\n    public long sSetAndTime(String key,long time,Object...values) {\n        try {\n            Long count = redisTemplate.opsForSet().add(key, values);\n            if(time>0) expire(key, time);\n            return count;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return 0;\n        }\n    }\n\n```\n\n5.  获取SET缓存的长度\n\n```java\n    /**\n     * 获取set缓存的长度\n     * @param key 键\n     * @return\n     */\n    public long sGetSetSize(String key){\n        try {\n            return redisTemplate.opsForSet().size(key);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return 0;\n        }\n    }\n\n```\n\n6.  移除指定key的缓存\n\n```kotlin\n    /**\n     * 移除值为value的\n     * @param key 键\n     * @param values 值 可以是多个\n     * @return 移除的个数\n     */\n    public long setRemove(String key, Object ...values) {\n        try {\n            Long count = redisTemplate.opsForSet().remove(key, values);\n            return count;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return 0;\n        }\n    }\n\n```\n\n### LIST类型相关操作\n\n1.  获取list缓存的内容\n\n```dart\n    /**\n     * 获取list缓存的内容\n     * @param key 键\n     * @param start 开始\n     * @param end 结束  0 到 -1代表所有值\n     * @return\n     */\n    public List<Object> lGet(String key,long start, long end){\n        try {\n            return redisTemplate.opsForList().range(key, start, end);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n```\n\n2.   获取list缓存的长度\n\n```java\n    /**\n     * 获取list缓存的长度\n     * @param key 键\n     * @return\n     */\n    public long lGetListSize(String key){\n        try {\n            return redisTemplate.opsForList().size(key);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return 0;\n        }\n    }\n\n```\n\n3. 通过索引 获取list中的值\n\n```java\n    /**\n     * 通过索引 获取list中的值\n     * @param key 键\n     * @param index 索引  index>=0时， 0 表头，1 第二个元素，依次类推；index<0时，-1，表尾，-2倒数第二个元素，依次类推\n     * @return\n     */\n    public Object lGetIndex(String key,long index){\n        try {\n            return redisTemplate.opsForList().index(key, index);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n```\n\n4.   将list放入缓存\n\n```dart\n    /**\n     * 将list放入缓存\n     * @param key 键\n     * @param value 值\n     * @return\n     */\n    public boolean lSet(String key, Object value) {\n        try {\n            redisTemplate.opsForList().rightPush(key, value);\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n```\n\n5. 将list放入缓存并设置过期时间\n\n\n\n```java\n    /**\n     * 将list放入缓存\n     * @param key 键\n     * @param value 值\n     * @param time 时间(秒)\n     * @return\n     */\n    public boolean lSet(String key, Object value, long time) {\n        try {\n            redisTemplate.opsForList().rightPush(key, value);\n            if (time > 0) expire(key, time);\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n```\n\n6.  将list放入缓存\n\n```dart\n    /**\n     * 将list放入缓存\n     * @param key 键\n     * @param value 值\n     * @return\n     */\n    public boolean lSet(String key, List<Object> value) {\n        try {\n            redisTemplate.opsForList().rightPushAll(key, value);\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n```\n\n7.  将list放入缓存并设置过期时间\n\n```dart\n    /**\n     * 将list放入缓存\n     * @param key 键\n     * @param value 值\n     * @param time 时间(秒)\n     * @return\n     */\n    public boolean lSet(String key, List<Object> value, long time) {\n        try {\n            redisTemplate.opsForList().rightPushAll(key, value);\n            if (time > 0) expire(key, time);\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n```\n\n8.  根据索引修改list中的某条数据\n\n```dart\n    /**\n     * 根据索引修改list中的某条数据\n     * @param key 键\n     * @param index 索引\n     * @param value 值\n     * @return\n     */\n    public boolean lUpdateIndex(String key, long index,Object value) {\n        try {\n            redisTemplate.opsForList().set(key, index, value);\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n```\n\n9.  移除N个值为value\n\n```csharp\n    /**\n     * 移除N个值为value\n     * @param key 键\n     * @param count 移除多少个\n     * @param value 值\n     * @return 移除的个数\n     */\n    public long lRemove(String key,long count,Object value) {\n        try {\n            Long remove = redisTemplate.opsForList().remove(key, count, value);\n            return remove;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return 0;\n        }\n    }\n\n```', '', 0, '', '', 'http://luna.iszychen.club/blog/upload/2020/06/redis-a0256cf1354045fd9224e35e5500f97d.jpg', 'redis与springboot整合', 0, NULL, 21, 0, NULL, 'redis', 'redis');
INSERT INTO `posts` VALUES (0, 44, '2020-06-03 21:53:46', 0, '2020-06-03 21:53:46', 0, 0, '2020-06-03 21:53:46', '<h3 id=\"springhttps-的转发自动将http浏览器默认80端口转发至https-443或自定义端口\">springHttps 的转发,自动将http浏览器默认80端口转发至https 443或自定义端口</h3>\n<h4 id=\"1-获取证书\">1. 获取证书</h4>\n<ul>\n<li>\n<p>首先在需要生成证书页面进入控制台命令,输入</p>\n</li>\n<li>\n<h4 id=\"keytool命令keytool--genkey--alias-ccc--keyalg-rsa--validity-36500--keystore-serverkeystore\">keytool命令，keytool -genkey -alias ccc -keyalg RSA -validity 36500 -keystore server.keystore</h4>\n<p><img src=\"https://hexo.iszychen.club/img/keystore1.jpg\" alt=\"\" /></p>\n</li>\n<li>\n<p>然后输入密钥 ps: 一定要记住</p>\n<p><img src=\"https://hexo.iszychen.club/img/keystore2.jpg\" alt=\"\" /></p>\n</li>\n<li>\n<p>随意输入相应信息,最后会在相应目录生成 server.keystore 文件</p>\n<p><img src=\"https://hexo.iszychen.club/img/keystore3.jpg\" alt=\"\" /></p>\n</li>\n</ul>\n<h4 id=\"2-spring配置\">2. spring配置</h4>\n<ul>\n<li>新建spring配置文件注解@Configuration</li>\n</ul>\n<pre><code class=\"language-java\">/**\n     * 配置 http(80) -&gt; 强制跳转到 https(443)\n     */\n    @Bean\n    public Connector connector() {\n        Connector connector = new Connector(&quot;org.apache.coyote.http11.Http11NioProtocol&quot;);\n        connector.setScheme(&quot;http&quot;);\n        connector.setPort(80);\n        connector.setSecure(false);\n        connector.setRedirectPort(443);\n        return connector;\n    }\n\n    @Bean\n    public TomcatServletWebServerFactory tomcatServletWebServerFactory(Connector connector) {\n        TomcatServletWebServerFactory tomcat = new TomcatServletWebServerFactory() {\n            @Override\n            protected void postProcessContext(Context context) {\n                SecurityConstraint securityConstraint = new SecurityConstraint();\n                securityConstraint.setUserConstraint(&quot;CONFIDENTIAL&quot;);\n                SecurityCollection collection = new SecurityCollection();\n                collection.addPattern(&quot;/*&quot;);\n                securityConstraint.addCollection(collection);\n                context.addConstraint(securityConstraint);\n            }\n        };\n        tomcat.addAdditionalTomcatConnectors(connector);\n        return tomcat;\n    }\n</code></pre>\n<ul>\n<li>将server.keystore放至resource目录下</li>\n<li>编写配置文件</li>\n</ul>\n<pre><code class=\"language-yml\">server:\n  ssl:\n    # 证书路径\n    key-store: classpath:server.keystore\n    key-alias: tomcat\n    enabled: true\n    key-store-type: JKS\n    #与申请时输入一致\n    key-store-password: 123456\n    # 浏览器默认端口 和 80 类似\n  port: 443\n\n</code></pre>\n<h3 id=\"启动项目访问80就会自动跳转433端口了-若提示443端口被占用可修改相应端口号\">启动项目,访问80就会自动跳转433端口了 ,若提示443端口被占用可修改相应端口号</h3>\n', 0, '\n\n###  springHttps 的转发,自动将http浏览器默认80端口转发至https 443或自定义端口\n\n#### 1. 获取证书\n\n- 首先在需要生成证书页面进入控制台命令,输入\n\n- #### keytool命令，keytool -genkey -alias ccc -keyalg RSA -validity 36500 -keystore server.keystore\n\n  ![](https://hexo.iszychen.club/img/keystore1.jpg)\n\n- 然后输入密钥 ps: 一定要记住\n\n  ![](https://hexo.iszychen.club/img/keystore2.jpg)\n\n- 随意输入相应信息,最后会在相应目录生成 server.keystore 文件\n\n  ![](https://hexo.iszychen.club/img/keystore3.jpg)\n\n#### 2. spring配置\n\n- 新建spring配置文件注解@Configuration\n\n```java\n/**\n     * 配置 http(80) -> 强制跳转到 https(443)\n     */\n    @Bean\n    public Connector connector() {\n        Connector connector = new Connector(\"org.apache.coyote.http11.Http11NioProtocol\");\n        connector.setScheme(\"http\");\n        connector.setPort(80);\n        connector.setSecure(false);\n        connector.setRedirectPort(443);\n        return connector;\n    }\n\n    @Bean\n    public TomcatServletWebServerFactory tomcatServletWebServerFactory(Connector connector) {\n        TomcatServletWebServerFactory tomcat = new TomcatServletWebServerFactory() {\n            @Override\n            protected void postProcessContext(Context context) {\n                SecurityConstraint securityConstraint = new SecurityConstraint();\n                securityConstraint.setUserConstraint(\"CONFIDENTIAL\");\n                SecurityCollection collection = new SecurityCollection();\n                collection.addPattern(\"/*\");\n                securityConstraint.addCollection(collection);\n                context.addConstraint(securityConstraint);\n            }\n        };\n        tomcat.addAdditionalTomcatConnectors(connector);\n        return tomcat;\n    }\n```\n\n- 将server.keystore放至resource目录下\n- 编写配置文件\n\n```yml\nserver:\n  ssl:\n    # 证书路径\n    key-store: classpath:server.keystore\n    key-alias: tomcat\n    enabled: true\n    key-store-type: JKS\n    #与申请时输入一致\n    key-store-password: 123456\n    # 浏览器默认端口 和 80 类似\n  port: 443\n\n```\n\n### 启动项目,访问80就会自动跳转433端口了 ,若提示443端口被占用可修改相应端口号 ', '', 0, '', '', 'https://hexo.iszychen.club/img/spring.jpg', 'SpringBoot Https配置', 0, NULL, 16, 0, NULL, NULL, 'springboothttps');
INSERT INTO `posts` VALUES (0, 45, '2020-06-20 18:59:31', 0, '2020-06-20 19:01:48', 0, 0, '2020-06-20 18:59:31', '<h2 id=\"springboot的异步方法调用与线程池配置\">Springboot的异步方法调用与线程池配置</h2>\n<h3 id=\"简单使用\">简单使用</h3>\n<ol>\n<li>springboot 自带了scheduling 包里已经设置了异步方法,我们只需要在方法或者类上加入@Async 注解即可</li>\n</ol>\n<pre><code class=\"language-java\">package com.xkcoding.async.task;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.scheduling.annotation.Async;\nimport org.springframework.stereotype.Service;\n\n\n/**\n * 将一个类声明为异步类，那么这个类对外暴露的方法全部成为异步方法。\n * 与异步方法的区别是这里的注解是加到类上，异步方法的注解是加到方法上。仅此而已\n * @DESC \n * @author guchuang\n *\n */\n@Async\n@Service\n@Slf4j\npublic class AsyncClass {\n    public AsyncClass() {\n        log.info(&quot;-------------------------init AsyncClass--------------------&quot;);\n    }\n    volatile int index = 0;\n    public void foo() {\n        log.info(&quot;asyncclass foo, index:&quot; + index);\n    }\n    public void foo(int i) {\n        this.index = i;\n        log.info(&quot;asyncclass foo, index:&quot; + i);\n    }\n    public void bar(int i) {\n        this.index = i;\n        log.info(&quot;asyncclass bar, index:&quot; + i);\n    }\n}\n\n</code></pre>\n<ol start=\"2\">\n<li>yml配置</li>\n</ol>\n<pre><code class=\"language-yml\">spring:\n  task:\n    execution:\n      pool:\n        # 最大线程数\n        max-size: 16\n        # 核心线程数\n        core-size: 16\n        # 存活时间\n        keep-alive: 10s\n        # 队列大小\n        queue-capacity: 100\n        # 是否允许核心线程超时\n        allow-core-thread-timeout: true\n      # 线程名称前缀\n      thread-name-prefix: async-task-\n</code></pre>\n<ol start=\"3\">\n<li>然后直接调用即可产生异步效果</li>\n</ol>\n<pre><code class=\"language-java\"> @Test\n    public void test() throws InterruptedException {\n        asyncClass.foo();\n        asyncClass.foo(10);\n        Thread.sleep(100);\n        asyncClass.foo();\n    }\n</code></pre>\n<h3 id=\"threadfactory自定义配置\">ThreadFactory自定义配置</h3>\n<ol>\n<li>首先需创建一个类继承ThreadFactory,书写构造器</li>\n<li>覆写他newThread 方法</li>\n</ol>\n<pre><code class=\"language-java\">public class MyThreadFactory implements ThreadFactory {\n\n    private static final AtomicInteger poolNumber   = new AtomicInteger(1);\n    private final ThreadGroup          group;\n    private final AtomicInteger        threadNumber = new AtomicInteger(1);\n    private final String               namePrefix;\n\n    public MyThreadFactory(String name) {\n        SecurityManager s = System.getSecurityManager();\n        group = (s != null) ? s.getThreadGroup() : Thread.currentThread().getThreadGroup();\n        namePrefix = name + &quot;-pool-&quot; +\n            poolNumber.getAndIncrement() +\n            &quot;-thread-&quot;;\n    }\n\n    /**\n     * 覆写了newThread方法\n     * @param r\n     * @return\n     */\n    @Override\n    public Thread newThread(Runnable r) {\n        Thread t = new Thread(group, r,\n            namePrefix + threadNumber.getAndIncrement(),\n            0);\n        if (t.isDaemon()) {\n            t.setDaemon(false);\n        }\n        if (t.getPriority() != Thread.NORM_PRIORITY) {\n            t.setPriority(Thread.NORM_PRIORITY);\n        }\n        return t;\n    }\n}\n</code></pre>\n<h3 id=\"线程池异步配置\">线程池异步配置</h3>\n<ol>\n<li>添加注解@EnableAsync和@Configuration</li>\n<li>实现AsyncConfigurer接口,如果不覆写AsyncConfigurer的话，这个方法暴露bean会被当做@Async的默认线程池。</li>\n<li>ExecutorService配置</li>\n</ol>\n<pre><code class=\"language-java\">private static ExecutorService threadPool               = new ThreadPoolExecutor(5, 5,\n        60L, TimeUnit.MILLISECONDS,\n        new LinkedBlockingQueue&lt;&gt;(3), new MyThreadFactory(&quot;common1&quot;));\n</code></pre>\n<ul>\n<li>定义默认调用线程执行器和异常处理机制</li>\n</ul>\n<pre><code class=\"language-java\">/**\n     * 这个实例声明的TaskExecutor会成为@Async方法运行的默认线程执行器\n     * \n     * @Bean 使这个实例完全被spring接管\n     */\n    @Bean\n    @Override\n    public TaskExecutor getAsyncExecutor() {\n        return new ConcurrentTaskExecutor(Executors.newFixedThreadPool(5, new MyThreadFactory(&quot;async&quot;)));\n    }\n\n    /**\n     * 定义@Async方法默认的异常处理机制（只对void型异步返回方法有效，Future返回值类型的异常会抛给调用者）\n     */\n    @Override\n    public AsyncUncaughtExceptionHandler getAsyncUncaughtExceptionHandler() {\n        return (e, method, objects) -&gt; log.error(&quot;Method:&quot; + method + &quot;, exception:&quot; + e.getMessage());\n    }\n</code></pre>\n<ul>\n<li>自定义线程执行器配置</li>\n</ul>\n<pre><code class=\"language-java\">/**\n     * 如果不覆写AsyncConfigurer的话，这个方法暴露bean会被当做@Async的默认线程池。\n     * 注意必须是这个方法名（也就是bean name， 或者显示指定bean name @Qualifier(&quot;taskExecutor&quot;)），返回类型可以是Executor或者TaskExecutor\n     * 如果没有配置的Executor，则默认使用SimpleAsyncTaskExecutor\n     * 备注： 这种方式声明的bean，方法名就是bean name\n     * \n     * @return\n     */\n    @Bean\n    public Executor taskExecutor() {\n        return new ConcurrentTaskExecutor(Executors.newFixedThreadPool(5, new MyThreadFactory(&quot;async0&quot;)));\n    }\n\n    /**\n     * 定义其它的TaskExecutor，声明@Async方法的时候可以指定TaskExecutor，达到切换底层的目的\n     * \n     * @return\n     */\n    @Bean\n    public TaskExecutor async1() {\n        // 线程数,线程名\n        return new ConcurrentTaskExecutor(Executors.newFixedThreadPool(2, new MyThreadFactory(&quot;async1&quot;)));\n    }\n\n    /**\n     * 没有设置拒绝策略\n     * \n     * @return\n     */\n    @Bean\n    @Qualifier(&quot;async2&quot;)\n    public TaskExecutor myAsyncExecutor2() {\n        return new ConcurrentTaskExecutor(threadPool);\n    }\n</code></pre>\n<h3 id=\"异常配置\">异常配置</h3>\n<ul>\n<li>线程满载后处理类</li>\n</ul>\n<pre><code class=\"language-java\">package com.xkcoding.async.task;\n\nimport com.xkcoding.async.MyLog;\nimport lombok.extern.log4j.Log4j;\nimport lombok.extern.slf4j.Slf4j;\n\nimport java.util.concurrent.RejectedExecutionHandler;\nimport java.util.concurrent.ThreadPoolExecutor;\n\n/**\n * 线程池满之后的处理策略类\n * @DESC \n * @author guchuang\n *\n */\n@Slf4j\npublic class RejectedPolicy implements RejectedExecutionHandler {\n    public RejectedPolicy() { }\n\n    /**\n     * 向线程池中添加线程被拒绝时会调用这个方法。一般拒绝是因为线程池满了\n     *\n     * @param r 被拒绝的任务\n     * @param e 拒绝这个任务的线程池\n     */\n    @Override\n    public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {\n        log.info(&quot;one thread is rejected, i will deal it&quot;);\n        if (!e.isShutdown()) {\n            r.run();\n        }\n    }\n}\n\n</code></pre>\n<h3 id=\"测试\">测试</h3>\n<ol>\n<li>获取返回值</li>\n</ol>\n<pre><code class=\"language-java\">@Test\n    public void testFuture() throws InterruptedException, ExecutionException {\n        log.info(&quot;\\n-----------------start-----------------------&quot;);\n        Future&lt;String&gt; result1 = asyncMethod.futureTask1();\n        CompletableFuture&lt;String&gt; result2 = asyncMethod.futureTask2();\n        // 获取返回值\n        log.info(&quot;result1:&quot; + result1.get());\n        log.info(&quot;result2:&quot; + result2.get());\n    }\n\n</code></pre>\n<ol start=\"2\">\n<li>无返回值方法可直接抛出异常,有返回值方法方法需要通过get方法获取异常</li>\n</ol>\n<pre><code class=\"language-java\">  @Test\n    public void testE() {\n        try {\n            Future&lt;String&gt; result = asyncMethod.futureE();\n            //这里调用get才会获得异常\n            log.info(result.get());\n        } catch(Exception e) {\n            //e.printStackTrace();\n            log.info(&quot;this is excepted Exception:&quot; + e.getMessage());\n        }\n        // 直接抛出异常\n        asyncMethod.fooE();\n        log.info(&quot;end call e&quot;);\n        //log.sleep(1000);\n    }\n\n</code></pre>\n<ol start=\"3\">\n<li>当超过线程词最大容量的时候，会抛出TaskRejectedException</li>\n</ol>\n<pre><code class=\"language-java\"> @Test\n    public void testRejectWithDeal() throws InterruptedException {\n        log.info(&quot;\\n-----------------start testRejectWithDeal-----------------------&quot;);\n        log.info(&quot;start add task&quot;);\n        try {\n            for (int i = 0; i &lt; 10; i++) {\n                asyncMethod.asyncSleep3(i, 1);\n            }\n        } catch(RejectedExecutionException e) {\n            log.info(&quot;excepted exception:&quot; + e.getMessage());\n        }\n        log.info(&quot;finished add task&quot;);\n        Thread.sleep(100 * 1000);\n    }\n</code></pre>\n', 0, '\n\n## Springboot的异步方法调用与线程池配置\n\n### 简单使用\n\n1. springboot 自带了scheduling 包里已经设置了异步方法,我们只需要在方法或者类上加入@Async 注解即可\n\n```java\npackage com.xkcoding.async.task;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.scheduling.annotation.Async;\nimport org.springframework.stereotype.Service;\n\n\n/**\n * 将一个类声明为异步类，那么这个类对外暴露的方法全部成为异步方法。\n * 与异步方法的区别是这里的注解是加到类上，异步方法的注解是加到方法上。仅此而已\n * @DESC \n * @author guchuang\n *\n */\n@Async\n@Service\n@Slf4j\npublic class AsyncClass {\n    public AsyncClass() {\n        log.info(\"-------------------------init AsyncClass--------------------\");\n    }\n    volatile int index = 0;\n    public void foo() {\n        log.info(\"asyncclass foo, index:\" + index);\n    }\n    public void foo(int i) {\n        this.index = i;\n        log.info(\"asyncclass foo, index:\" + i);\n    }\n    public void bar(int i) {\n        this.index = i;\n        log.info(\"asyncclass bar, index:\" + i);\n    }\n}\n\n```\n\n2. yml配置\n\n```yml\nspring:\n  task:\n    execution:\n      pool:\n        # 最大线程数\n        max-size: 16\n        # 核心线程数\n        core-size: 16\n        # 存活时间\n        keep-alive: 10s\n        # 队列大小\n        queue-capacity: 100\n        # 是否允许核心线程超时\n        allow-core-thread-timeout: true\n      # 线程名称前缀\n      thread-name-prefix: async-task-\n```\n\n3. 然后直接调用即可产生异步效果\n\n```java\n @Test\n    public void test() throws InterruptedException {\n        asyncClass.foo();\n        asyncClass.foo(10);\n        Thread.sleep(100);\n        asyncClass.foo();\n    }\n```\n\n### ThreadFactory自定义配置\n\n1. 首先需创建一个类继承ThreadFactory,书写构造器\n2. 覆写他newThread 方法\n\n```java\npublic class MyThreadFactory implements ThreadFactory {\n\n    private static final AtomicInteger poolNumber   = new AtomicInteger(1);\n    private final ThreadGroup          group;\n    private final AtomicInteger        threadNumber = new AtomicInteger(1);\n    private final String               namePrefix;\n\n    public MyThreadFactory(String name) {\n        SecurityManager s = System.getSecurityManager();\n        group = (s != null) ? s.getThreadGroup() : Thread.currentThread().getThreadGroup();\n        namePrefix = name + \"-pool-\" +\n            poolNumber.getAndIncrement() +\n            \"-thread-\";\n    }\n\n    /**\n     * 覆写了newThread方法\n     * @param r\n     * @return\n     */\n    @Override\n    public Thread newThread(Runnable r) {\n        Thread t = new Thread(group, r,\n            namePrefix + threadNumber.getAndIncrement(),\n            0);\n        if (t.isDaemon()) {\n            t.setDaemon(false);\n        }\n        if (t.getPriority() != Thread.NORM_PRIORITY) {\n            t.setPriority(Thread.NORM_PRIORITY);\n        }\n        return t;\n    }\n}\n```\n\n### 线程池异步配置\n\n1. 添加注解@EnableAsync和@Configuration\n2. 实现AsyncConfigurer接口,如果不覆写AsyncConfigurer的话，这个方法暴露bean会被当做@Async的默认线程池。\n3. ExecutorService配置\n\n```java\nprivate static ExecutorService threadPool               = new ThreadPoolExecutor(5, 5,\n        60L, TimeUnit.MILLISECONDS,\n        new LinkedBlockingQueue<>(3), new MyThreadFactory(\"common1\"));\n```\n\n- 定义默认调用线程执行器和异常处理机制\n\n```java\n/**\n     * 这个实例声明的TaskExecutor会成为@Async方法运行的默认线程执行器\n     * \n     * @Bean 使这个实例完全被spring接管\n     */\n    @Bean\n    @Override\n    public TaskExecutor getAsyncExecutor() {\n        return new ConcurrentTaskExecutor(Executors.newFixedThreadPool(5, new MyThreadFactory(\"async\")));\n    }\n\n    /**\n     * 定义@Async方法默认的异常处理机制（只对void型异步返回方法有效，Future返回值类型的异常会抛给调用者）\n     */\n    @Override\n    public AsyncUncaughtExceptionHandler getAsyncUncaughtExceptionHandler() {\n        return (e, method, objects) -> log.error(\"Method:\" + method + \", exception:\" + e.getMessage());\n    }\n```\n\n- 自定义线程执行器配置\n\n```java\n/**\n     * 如果不覆写AsyncConfigurer的话，这个方法暴露bean会被当做@Async的默认线程池。\n     * 注意必须是这个方法名（也就是bean name， 或者显示指定bean name @Qualifier(\"taskExecutor\")），返回类型可以是Executor或者TaskExecutor\n     * 如果没有配置的Executor，则默认使用SimpleAsyncTaskExecutor\n     * 备注： 这种方式声明的bean，方法名就是bean name\n     * \n     * @return\n     */\n    @Bean\n    public Executor taskExecutor() {\n        return new ConcurrentTaskExecutor(Executors.newFixedThreadPool(5, new MyThreadFactory(\"async0\")));\n    }\n\n    /**\n     * 定义其它的TaskExecutor，声明@Async方法的时候可以指定TaskExecutor，达到切换底层的目的\n     * \n     * @return\n     */\n    @Bean\n    public TaskExecutor async1() {\n        // 线程数,线程名\n        return new ConcurrentTaskExecutor(Executors.newFixedThreadPool(2, new MyThreadFactory(\"async1\")));\n    }\n\n    /**\n     * 没有设置拒绝策略\n     * \n     * @return\n     */\n    @Bean\n    @Qualifier(\"async2\")\n    public TaskExecutor myAsyncExecutor2() {\n        return new ConcurrentTaskExecutor(threadPool);\n    }\n```\n\n### 异常配置\n\n- 线程满载后处理类\n\n```java\npackage com.xkcoding.async.task;\n\nimport com.xkcoding.async.MyLog;\nimport lombok.extern.log4j.Log4j;\nimport lombok.extern.slf4j.Slf4j;\n\nimport java.util.concurrent.RejectedExecutionHandler;\nimport java.util.concurrent.ThreadPoolExecutor;\n\n/**\n * 线程池满之后的处理策略类\n * @DESC \n * @author guchuang\n *\n */\n@Slf4j\npublic class RejectedPolicy implements RejectedExecutionHandler {\n    public RejectedPolicy() { }\n\n    /**\n     * 向线程池中添加线程被拒绝时会调用这个方法。一般拒绝是因为线程池满了\n     *\n     * @param r 被拒绝的任务\n     * @param e 拒绝这个任务的线程池\n     */\n    @Override\n    public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {\n        log.info(\"one thread is rejected, i will deal it\");\n        if (!e.isShutdown()) {\n            r.run();\n        }\n    }\n}\n\n```\n\n### 测试\n\n1. 获取返回值\n\n```java\n@Test\n    public void testFuture() throws InterruptedException, ExecutionException {\n        log.info(\"\\n-----------------start-----------------------\");\n        Future<String> result1 = asyncMethod.futureTask1();\n        CompletableFuture<String> result2 = asyncMethod.futureTask2();\n        // 获取返回值\n        log.info(\"result1:\" + result1.get());\n        log.info(\"result2:\" + result2.get());\n    }\n\n```\n\n2. 无返回值方法可直接抛出异常,有返回值方法方法需要通过get方法获取异常\n\n```java\n  @Test\n    public void testE() {\n        try {\n            Future<String> result = asyncMethod.futureE();\n            //这里调用get才会获得异常\n            log.info(result.get());\n        } catch(Exception e) {\n            //e.printStackTrace();\n            log.info(\"this is excepted Exception:\" + e.getMessage());\n        }\n        // 直接抛出异常\n        asyncMethod.fooE();\n        log.info(\"end call e\");\n        //log.sleep(1000);\n    }\n\n```\n\n3. 当超过线程词最大容量的时候，会抛出TaskRejectedException\n\n```java\n @Test\n    public void testRejectWithDeal() throws InterruptedException {\n        log.info(\"\\n-----------------start testRejectWithDeal-----------------------\");\n        log.info(\"start add task\");\n        try {\n            for (int i = 0; i < 10; i++) {\n                asyncMethod.asyncSleep3(i, 1);\n            }\n        } catch(RejectedExecutionException e) {\n            log.info(\"excepted exception:\" + e.getMessage());\n        }\n        log.info(\"finished add task\");\n        Thread.sleep(100 * 1000);\n    }\n```', '', 2, '', '', 'http://luna.iszychen.club/blog/upload/2020/2/%E4%B8%8B%E8%BD%BD-ad125cfbd94d4801b695203c3f28f5ff.jpg', 'Springboot的异步方法调用与线程池配置', 0, NULL, 0, 0, NULL, NULL, 'asyncspringboot');
INSERT INTO `posts` VALUES (0, 46, '2020-06-20 19:01:34', 0, '2020-06-20 19:01:34', 0, 0, '2020-06-20 19:01:34', '<h3 id=\"spring的aop与springboot整合---动态代理\">spring的aop与springboot整合   <a href=\"https://juejin.im/post/5ad3e6b36fb9a028ba1fee6a\">动态代理</a></h3>\n<h3 id=\"引入依赖\">引入依赖</h3>\n<pre><code class=\"language-xml\">		&lt;dependency&gt;\n			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n			&lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;\n		&lt;/dependency&gt;\n</code></pre>\n<h3 id=\"设置切点\">设置切点</h3>\n<ul>\n<li>在类上注解@Aspect</li>\n</ul>\n<pre><code class=\"language-java\">/**\n	 * 切入点\n	 */\n	@Pointcut(&quot;execution(public * com.xkcoding.log.aop.controller.*Controller.*(..))&quot;)\n	public void log() {\n\n	}\n</code></pre>\n<h3 id=\"通知方法\">通知方法</h3>\n<ol>\n<li>前置通知</li>\n</ol>\n<pre><code class=\"language-java\">/**\n	 * 前置操作\n	 *\n	 * @param point 切入点\n	 */\n	@Before(&quot;log()&quot;)\n	public void beforeLog(JoinPoint point) {\n        /**\n         *  String toString();         //连接点所在位置的相关信息\n         *    String toShortString();     //连接点所在位置的简短相关信息\n         *    String toLongString();     //连接点所在位置的全部相关信息\n         *    Object getThis();         //返回AOP代理对象，也就是com.sun.proxy.$Proxy18\n         *    Object getTarget();       //返回目标对象，一般我们都需要它或者（也就是定义方法的接口或类，为什么会是接口呢？这主要是在目标对象本身是动态代理的情况下，例如Mapper。所以返回的是定义方法的对象如aoptest.daoimpl.GoodDaoImpl或com.b.base.BaseMapper&lt;T, E, PK&gt;）\n         *    Object[] getArgs();       //返回被通知方法参数列表\n         *    Signature getSignature();  //返回当前连接点签名  其getName()方法返回方法的FQN，如void aoptest.dao.GoodDao.delete()或com.b.base.BaseMapper.insert(T)(需要注意的是，很多时候我们定义了子类继承父类的时候，我们希望拿到基于子类的FQN，这直接可拿不到，要依赖于AopUtils.getTargetClass(point.getTarget())获取原始代理对象，下面会详细讲解)\n         *    SourceLocation getSourceLocation();//返回连接点方法所在类文件中的位置\n         *    String getKind();        //连接点类型\n         *    StaticPart getStaticPart(); //返回连接点静态部分\n         */\n        JoinPoint.StaticPart staticPart = point.getStaticPart();\n        /**\n         *  Signature getSignature();    //返回当前连接点签名\n         *    String getKind();          //连接点类型\n         *    int getId();               //唯一标识\n         *    String toString();         //连接点所在位置的相关信息\n         *    String toShortString();     //连接点所在位置的简短相关信息\n         *    String toLongString();     //连接点所在位置的全部相关信息\n         */\n\n        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();\n\n		HttpServletRequest request = Objects.requireNonNull(attributes).getRequest();\n\n		log.info(&quot;【请求 URL】：{}&quot;, request.getRequestURL());\n		log.info(&quot;【请求 IP】：{}&quot;, request.getRemoteAddr());\n		log.info(&quot;【请求类名】：{}，【请求方法名】：{}&quot;, point.getSignature().getDeclaringTypeName(), point.getSignature().getName());\n\n		Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();\n		log.info(&quot;【请求参数】：{}，&quot;, JSONUtil.toJsonStr(parameterMap));\n		Long start = System.currentTimeMillis();\n		request.setAttribute(START_TIME, start);\n	}\n</code></pre>\n<ol start=\"2\">\n<li>环绕通知</li>\n</ol>\n<pre><code class=\"language-java\">/**\n	 * 环绕操作\n	 *\n	 * @param point 切入点\n	 * @return 原方法返回值\n	 * @throws Throwable 异常信息\n	 */\n	@Around(&quot;log()&quot;)\n	public Object aroundLog(ProceedingJoinPoint point) throws Throwable {\n        String s = point.toLongString();\n        log.info(&quot;【参数值】：{}&quot;, JSONUtil.toJsonStr(s));\n		Object result = point.proceed();\n		log.info(&quot;【返回值】：{}&quot;, JSONUtil.toJsonStr(result));\n		return result;\n	}\n</code></pre>\n<pre><code class=\"language-tex\">    /**\n     * 环绕通知 ProceedingJoinPoint 执行proceed方法的作用是让目标方法执行，这也是环绕通知和前置、后置通知方法的一个最大区别。\n     *  Proceedingjoinpoint 继承了 JoinPoint 。是在JoinPoint的基础上暴露出 proceed 这个方法。proceed很重要，这个是aop代理链执行的方法。\n     */\n</code></pre>\n<ol start=\"3\">\n<li>后置通知</li>\n</ol>\n<pre><code class=\"language-java\">/**\n	 * 后置操作\n	 */\n	@AfterReturning(&quot;log()&quot;)\n	public void afterReturning() {\n		ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();\n		HttpServletRequest request = Objects.requireNonNull(attributes).getRequest();\n        HttpServletResponse response = Objects.requireNonNull(attributes).getResponse();\n        Long start = (Long) request.getAttribute(START_TIME);\n		Long end = System.currentTimeMillis();\n		log.info(&quot;【请求耗时】：{}毫秒&quot;, end - start);\n\n		String header = request.getHeader(&quot;User-Agent&quot;);\n		UserAgent userAgent = UserAgent.parseUserAgentString(header);\n		log.info(&quot;【浏览器类型】：{}，【操作系统】：{}，【原始User-Agent】：{}&quot;, userAgent.getBrowser().toString(), userAgent.getOperatingSystem().toString(), header);\n	}\n</code></pre>\n<h3 id=\"httpservletrequest\">HttpServletRequest</h3>\n<pre><code class=\"language-java\">//返回客户端在此次请求中发送的所有Cookie对象。\n    public abstract Cookie[] getCookies();\n\n    //返回名字为name的请求报头的值。如果请求中没有包含指定名字的报头，这个方法返回null。\n    public abstract String getHeader(String paramString);\n\n    //返回名字为name的请求报头所有的值的枚举集合。\n    public abstract Enumeration&lt;String&gt; getHeaders(String paramString);\n\n    //返回此次请求中包含的所有报头名字的枚举集合。\n    public abstract Enumeration&lt;String&gt; getHeaderNames();\n\n    //返回此次请求所使用的HTTP方法的名字，例如，GET、POST或PUT。\n    public abstract String getMethod();\n    \n    //返回与客户端发送的请求URL相联系的额外的路径信息。额外的路径信息是跟在Servlet的路径之后、查询字符串之前的路径，并以斜杠（/）字符开始。\n    //例如，假定在web.xml文件中MyServlet类映射的URL是：/myservlet/*，用户请求的URL是：http://localhost:8080/ ch02/myservlet/test，\n    //当我们在HttpServletRequest对象上调用getPathInfo()时，该方法将返回/test。如果没有额外的路径信息，getPathInfo()方法将返回null。\n    public abstract String getPathInfo();\n\n    //将额外的路径信息转换为真实的路径。例如，在上面的例子中假定ch02 Web应用程序位于D:\\OpenSource\\apache-tomcat-6.0.16\\webapps\\ch02目录，\n    //当用户请求http://localhost: 8080/ch02/myservlet/test时，在请求对象上调用getPathTranslated()方法将返回\n    //D:\\OpenSource\\apache-tomcat-6.0.16\\webapps\\ch02\\test。\n    public abstract String getPathTranslated();\n\n    //返回请求URI中表示请求上下文的部分，上下文路径是请求URI的开始部分。上下文路径总是以斜杠（/）开头，但结束没有斜杠（/）。在默认（根）上下文中，这个方法返回空字符串&quot;&quot;。\n    //例如，请求URI为“/sample/test”，调用该方法返回路径为“/sample”。\n    //示例： http://192.168.10.145:8888/ServletDemo/hello——&gt;ServletDemo\n    public abstract String getContextPath();\n\n    //返回请求URL中在路径后的查询字符串。如果在URL中没有查询字符串，该方法返回null。例如，有如下的请求URL：\n    //http://localhost:8080/ch02/logon.jsp?action=logon调用getQueryString()方法将返回action=logon。\n    public abstract String getQueryString();\n\n    //返回请求URL中从主机名到查询字符串之间的部分。例如：\n    //POST:     /some/path.html HTTP/1.1   /some/path.html\n    //GET:     http://foo.bar/a.html HTTP/1.0  /a.html\n    //HEAD:     /xyz?a=b HTTP/1.1    /xyz\n    //示例： http://192.168.10.145:8888/ServletDemo/hello——&gt;ServletDemo/hello\n    public abstract String getRequestURI();\n\n    //重新构造客户端用于发起请求的URL。返回的URL包括了协议、服务器的名字、端口号和服务器的路径，但是不包括查询字符串参数。\n    //要注意的是，如果请求使用RequestDispatcher.forward(ServletRequest, ServletResponse)方法被转发到另一个Servlet中，\n    //那么你在这个Servlet中调用getRequestURL()，得到的将是获取RequestDispatcher对象时使用的URL，而不是原始的请求URL。\n    //示例： http://192.168.10.145:8888/ServletDemo/hello——&gt;http://192.168.10.145:8888/ServletDemo/hello\n    public abstract StringBuffer getRequestURL();\n\n    //返回请求URI中调用Servlet的部分。这部分的路径以斜杠（/）开始，包括了Servlet的名字或者路径，但是不包括额外的路径信息和查询字符串。\n    //例如，假定在web.xml文件中MyServlet类映射的URL是：/myservlet/*，用户请求的URL是：http://localhost:8080/ ch02/myservlet/test，\n    //当我们在HttpServletRequest对象上调用getServletPath ()时，该方法将返回/myservlet。如果用于处理请求的Servlet与URL样式“/*”相匹配，那么这个方法将返回空字符串（&quot;&quot;）。\n    //示例： http://192.168.10.145:8888/ServletDemo/hello——&gt;hello\n    public abstract String getServletPath();\n\n    //返回和此次请求相关联的Session，如果没有给客户端分配Session，而create参数为true，\n    //则创建一个新的Session。如果create参数为false，而此次请求没有一个有效的HttpSession，则返回null。\n    public abstract HttpSession getSession(boolean create);\n\n    //返回和此次请求相关联的Session，如果没有给客户端分配Session，则创建一个新的Session。\n    public abstract HttpSession getSession();\n</code></pre>\n<h3 id=\"httpservletresponse\">HttpServletResponse</h3>\n<pre><code class=\"language-java\">//增加一个Cookie到响应中。这个方法可以被多次调用，用于设置多个Cookie。\npublic abstract void addCookie(Cookie paramCookie);\n//判断以name为名字的响应报头是否已经设置。\npublic abstract boolean containsHeader(String name);\n\n//使用Session ID对指定的url进行编码。如果该url不需要编码，则返回未改变的url。\npublic abstract String encodeURL(String paramString);\n\n//使用Session ID对用于重定向的url进行编码，以便用于sendRedirect()方法中。如果该url不需要编码，则返回未改变的url。\npublic abstract String encodeRedirectURL(String paramString);\n\n//使用指定的状态代码发送一个错误响应到客户端。服务器默认会创建一个包含了指定消息的服务器端错误页面作为响应，\n//设置内容类型为“text/html”。如果Web应用程序已经声明了对应于指定状态代码的错误页面，则服务器会将这个页面发送给客户端，而不理会参数msg指定的错误消息。\n//如果响应已经被提交，这个方法将抛出IllegalStateException异常。\npublic abstract void sendError(int paramInt, String msg) throws IOException;\n\n//使用参数sc表示的状态代码发送一个错误响应到客户端，同时清除缓存。如果响应已经被提交，这个方法将抛出IllegalStateException异常。\npublic abstract void sendError(int sc) throws IOException;\n\n//发送一个临时的重定向响应到客户端，让客户端访问新的URL。如果指定的位置是相对URL，Servlet容器在发送响应到客户端之前，必须将相对URL转换为绝对URL。\n//如果响应已经被提交，这个方法将抛出IllegalStateException异常。\npublic abstract void sendRedirect(String paramString) throws IOException;\n\n//用给出的name和value，设置一个响应报头。如果这个报头已经被设置，新的值将覆盖先前的值。\npublic abstract void setHeader(String paramString1, String paramString2);\n\n//用给出的name和value，增加一个响应报头到响应中。\npublic abstract void addHeader(String name, String value);\n\n//为响应设置状态代码。\npublic abstract void setStatus(int paramInt);\n</code></pre>\n', 0, '\n### spring的aop与springboot整合   [动态代理](https://juejin.im/post/5ad3e6b36fb9a028ba1fee6a)\n\n### 引入依赖\n\n```xml\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-aop</artifactId>\n		</dependency>\n```\n\n### 设置切点\n\n- 在类上注解@Aspect\n\n```java\n/**\n	 * 切入点\n	 */\n	@Pointcut(\"execution(public * com.xkcoding.log.aop.controller.*Controller.*(..))\")\n	public void log() {\n\n	}\n```\n\n### 通知方法\n\n1. 前置通知\n\n```java\n/**\n	 * 前置操作\n	 *\n	 * @param point 切入点\n	 */\n	@Before(\"log()\")\n	public void beforeLog(JoinPoint point) {\n        /**\n         *  String toString();         //连接点所在位置的相关信息\n         *    String toShortString();     //连接点所在位置的简短相关信息\n         *    String toLongString();     //连接点所在位置的全部相关信息\n         *    Object getThis();         //返回AOP代理对象，也就是com.sun.proxy.$Proxy18\n         *    Object getTarget();       //返回目标对象，一般我们都需要它或者（也就是定义方法的接口或类，为什么会是接口呢？这主要是在目标对象本身是动态代理的情况下，例如Mapper。所以返回的是定义方法的对象如aoptest.daoimpl.GoodDaoImpl或com.b.base.BaseMapper<T, E, PK>）\n         *    Object[] getArgs();       //返回被通知方法参数列表\n         *    Signature getSignature();  //返回当前连接点签名  其getName()方法返回方法的FQN，如void aoptest.dao.GoodDao.delete()或com.b.base.BaseMapper.insert(T)(需要注意的是，很多时候我们定义了子类继承父类的时候，我们希望拿到基于子类的FQN，这直接可拿不到，要依赖于AopUtils.getTargetClass(point.getTarget())获取原始代理对象，下面会详细讲解)\n         *    SourceLocation getSourceLocation();//返回连接点方法所在类文件中的位置\n         *    String getKind();        //连接点类型\n         *    StaticPart getStaticPart(); //返回连接点静态部分\n         */\n        JoinPoint.StaticPart staticPart = point.getStaticPart();\n        /**\n         *  Signature getSignature();    //返回当前连接点签名\n         *    String getKind();          //连接点类型\n         *    int getId();               //唯一标识\n         *    String toString();         //连接点所在位置的相关信息\n         *    String toShortString();     //连接点所在位置的简短相关信息\n         *    String toLongString();     //连接点所在位置的全部相关信息\n         */\n\n        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();\n\n		HttpServletRequest request = Objects.requireNonNull(attributes).getRequest();\n\n		log.info(\"【请求 URL】：{}\", request.getRequestURL());\n		log.info(\"【请求 IP】：{}\", request.getRemoteAddr());\n		log.info(\"【请求类名】：{}，【请求方法名】：{}\", point.getSignature().getDeclaringTypeName(), point.getSignature().getName());\n\n		Map<String, String[]> parameterMap = request.getParameterMap();\n		log.info(\"【请求参数】：{}，\", JSONUtil.toJsonStr(parameterMap));\n		Long start = System.currentTimeMillis();\n		request.setAttribute(START_TIME, start);\n	}\n```\n\n2. 环绕通知\n\n```java\n/**\n	 * 环绕操作\n	 *\n	 * @param point 切入点\n	 * @return 原方法返回值\n	 * @throws Throwable 异常信息\n	 */\n	@Around(\"log()\")\n	public Object aroundLog(ProceedingJoinPoint point) throws Throwable {\n        String s = point.toLongString();\n        log.info(\"【参数值】：{}\", JSONUtil.toJsonStr(s));\n		Object result = point.proceed();\n		log.info(\"【返回值】：{}\", JSONUtil.toJsonStr(result));\n		return result;\n	}\n```\n\n```tex\n    /**\n     * 环绕通知 ProceedingJoinPoint 执行proceed方法的作用是让目标方法执行，这也是环绕通知和前置、后置通知方法的一个最大区别。\n     *  Proceedingjoinpoint 继承了 JoinPoint 。是在JoinPoint的基础上暴露出 proceed 这个方法。proceed很重要，这个是aop代理链执行的方法。\n     */\n```\n\n3. 后置通知\n\n```java\n/**\n	 * 后置操作\n	 */\n	@AfterReturning(\"log()\")\n	public void afterReturning() {\n		ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();\n		HttpServletRequest request = Objects.requireNonNull(attributes).getRequest();\n        HttpServletResponse response = Objects.requireNonNull(attributes).getResponse();\n        Long start = (Long) request.getAttribute(START_TIME);\n		Long end = System.currentTimeMillis();\n		log.info(\"【请求耗时】：{}毫秒\", end - start);\n\n		String header = request.getHeader(\"User-Agent\");\n		UserAgent userAgent = UserAgent.parseUserAgentString(header);\n		log.info(\"【浏览器类型】：{}，【操作系统】：{}，【原始User-Agent】：{}\", userAgent.getBrowser().toString(), userAgent.getOperatingSystem().toString(), header);\n	}\n```\n\n### HttpServletRequest\n\n```java\n//返回客户端在此次请求中发送的所有Cookie对象。\n    public abstract Cookie[] getCookies();\n\n    //返回名字为name的请求报头的值。如果请求中没有包含指定名字的报头，这个方法返回null。\n    public abstract String getHeader(String paramString);\n\n    //返回名字为name的请求报头所有的值的枚举集合。\n    public abstract Enumeration<String> getHeaders(String paramString);\n\n    //返回此次请求中包含的所有报头名字的枚举集合。\n    public abstract Enumeration<String> getHeaderNames();\n\n    //返回此次请求所使用的HTTP方法的名字，例如，GET、POST或PUT。\n    public abstract String getMethod();\n    \n    //返回与客户端发送的请求URL相联系的额外的路径信息。额外的路径信息是跟在Servlet的路径之后、查询字符串之前的路径，并以斜杠（/）字符开始。\n    //例如，假定在web.xml文件中MyServlet类映射的URL是：/myservlet/*，用户请求的URL是：http://localhost:8080/ ch02/myservlet/test，\n    //当我们在HttpServletRequest对象上调用getPathInfo()时，该方法将返回/test。如果没有额外的路径信息，getPathInfo()方法将返回null。\n    public abstract String getPathInfo();\n\n    //将额外的路径信息转换为真实的路径。例如，在上面的例子中假定ch02 Web应用程序位于D:\\OpenSource\\apache-tomcat-6.0.16\\webapps\\ch02目录，\n    //当用户请求http://localhost: 8080/ch02/myservlet/test时，在请求对象上调用getPathTranslated()方法将返回\n    //D:\\OpenSource\\apache-tomcat-6.0.16\\webapps\\ch02\\test。\n    public abstract String getPathTranslated();\n\n    //返回请求URI中表示请求上下文的部分，上下文路径是请求URI的开始部分。上下文路径总是以斜杠（/）开头，但结束没有斜杠（/）。在默认（根）上下文中，这个方法返回空字符串\"\"。\n    //例如，请求URI为“/sample/test”，调用该方法返回路径为“/sample”。\n    //示例： http://192.168.10.145:8888/ServletDemo/hello——>ServletDemo\n    public abstract String getContextPath();\n\n    //返回请求URL中在路径后的查询字符串。如果在URL中没有查询字符串，该方法返回null。例如，有如下的请求URL：\n    //http://localhost:8080/ch02/logon.jsp?action=logon调用getQueryString()方法将返回action=logon。\n    public abstract String getQueryString();\n\n    //返回请求URL中从主机名到查询字符串之间的部分。例如：\n    //POST:     /some/path.html HTTP/1.1   /some/path.html\n    //GET:     http://foo.bar/a.html HTTP/1.0  /a.html\n    //HEAD:     /xyz?a=b HTTP/1.1    /xyz\n    //示例： http://192.168.10.145:8888/ServletDemo/hello——>ServletDemo/hello\n    public abstract String getRequestURI();\n\n    //重新构造客户端用于发起请求的URL。返回的URL包括了协议、服务器的名字、端口号和服务器的路径，但是不包括查询字符串参数。\n    //要注意的是，如果请求使用RequestDispatcher.forward(ServletRequest, ServletResponse)方法被转发到另一个Servlet中，\n    //那么你在这个Servlet中调用getRequestURL()，得到的将是获取RequestDispatcher对象时使用的URL，而不是原始的请求URL。\n    //示例： http://192.168.10.145:8888/ServletDemo/hello——>http://192.168.10.145:8888/ServletDemo/hello\n    public abstract StringBuffer getRequestURL();\n\n    //返回请求URI中调用Servlet的部分。这部分的路径以斜杠（/）开始，包括了Servlet的名字或者路径，但是不包括额外的路径信息和查询字符串。\n    //例如，假定在web.xml文件中MyServlet类映射的URL是：/myservlet/*，用户请求的URL是：http://localhost:8080/ ch02/myservlet/test，\n    //当我们在HttpServletRequest对象上调用getServletPath ()时，该方法将返回/myservlet。如果用于处理请求的Servlet与URL样式“/*”相匹配，那么这个方法将返回空字符串（\"\"）。\n    //示例： http://192.168.10.145:8888/ServletDemo/hello——>hello\n    public abstract String getServletPath();\n\n    //返回和此次请求相关联的Session，如果没有给客户端分配Session，而create参数为true，\n    //则创建一个新的Session。如果create参数为false，而此次请求没有一个有效的HttpSession，则返回null。\n    public abstract HttpSession getSession(boolean create);\n\n    //返回和此次请求相关联的Session，如果没有给客户端分配Session，则创建一个新的Session。\n    public abstract HttpSession getSession();\n```\n\n### HttpServletResponse\n\n```java\n//增加一个Cookie到响应中。这个方法可以被多次调用，用于设置多个Cookie。\npublic abstract void addCookie(Cookie paramCookie);\n//判断以name为名字的响应报头是否已经设置。\npublic abstract boolean containsHeader(String name);\n\n//使用Session ID对指定的url进行编码。如果该url不需要编码，则返回未改变的url。\npublic abstract String encodeURL(String paramString);\n\n//使用Session ID对用于重定向的url进行编码，以便用于sendRedirect()方法中。如果该url不需要编码，则返回未改变的url。\npublic abstract String encodeRedirectURL(String paramString);\n\n//使用指定的状态代码发送一个错误响应到客户端。服务器默认会创建一个包含了指定消息的服务器端错误页面作为响应，\n//设置内容类型为“text/html”。如果Web应用程序已经声明了对应于指定状态代码的错误页面，则服务器会将这个页面发送给客户端，而不理会参数msg指定的错误消息。\n//如果响应已经被提交，这个方法将抛出IllegalStateException异常。\npublic abstract void sendError(int paramInt, String msg) throws IOException;\n\n//使用参数sc表示的状态代码发送一个错误响应到客户端，同时清除缓存。如果响应已经被提交，这个方法将抛出IllegalStateException异常。\npublic abstract void sendError(int sc) throws IOException;\n\n//发送一个临时的重定向响应到客户端，让客户端访问新的URL。如果指定的位置是相对URL，Servlet容器在发送响应到客户端之前，必须将相对URL转换为绝对URL。\n//如果响应已经被提交，这个方法将抛出IllegalStateException异常。\npublic abstract void sendRedirect(String paramString) throws IOException;\n\n//用给出的name和value，设置一个响应报头。如果这个报头已经被设置，新的值将覆盖先前的值。\npublic abstract void setHeader(String paramString1, String paramString2);\n\n//用给出的name和value，增加一个响应报头到响应中。\npublic abstract void addHeader(String name, String value);\n\n//为响应设置状态代码。\npublic abstract void setStatus(int paramInt);\n```', '', 0, '', '', 'http://luna.iszychen.club/blog/upload/2020/06/images-c392cd43e3ad4c34863588c66be19fab.jpg', 'spring aop', 0, NULL, 14, 0, NULL, NULL, 'aop');
INSERT INTO `posts` VALUES (0, 47, '2020-06-20 19:03:37', 0, '2020-06-20 19:03:37', 0, 0, '2020-06-20 19:03:37', '<h2 id=\"springboot-统一异常处理\">springBoot 统一异常处理</h2>\n<h3 id=\"异常处理反例\">异常处理反例</h3>\n<ul>\n<li>\n<h4 id=\"捕获异常后只输出到控制台\">捕获异常后只输出到控制台</h4>\n</li>\n</ul>\n<pre><code class=\"language-javascript\">前端\n$.ajax({\n    type: &quot;GET&quot;,\n    url: &quot;/user/add&quot;,\n    dataType: &quot;json&quot;,\n    success: function(data){\n        alert(&quot;添加成功&quot;);\n    }\n});\n后端\ntry {\n    // do something\n} catch (Exception e) {\n    e.printStackTrace();\n}\n</code></pre>\n<p>这是见过最多的异常处理方式了, 如果这是一个添加商品的方法, 前台通过 ajax 发送请求到后端, 期望返回 json 信息表示添加结果. 但如果这段代码出现了异常:</p>\n<ul>\n<li>那么用户看到的场景就是点击了添加按钮, 但没有任何反应(其实是返回了 500 错误页面, 但这里前端没有监听 error 事件, 只监听了 success 事件. 但即使加上了<code>error: function(data) {alert(&quot;添加失败&quot;);}</code>) 又如何呢? 到底因为啥失败了呢, 用户也不得而知.</li>\n<li>后台 <code>e.printStackTrace()</code> 打印在控制台的日志也会在漫漫的日志中被埋没, 很可能会看不到输出的异常. 但这并不是最糟的情况, 更糟糕的事情是连 <code>e.printStackTrace()</code> 都没有, <code>catch</code> 块中是空的, 这样后端的控制台中更是什么都看不到了, 这段代码会像一个隐形的炸弹一样一直埋伏在系统中.</li>\n</ul>\n<h4 id=\"混乱的返回方式\">混乱的返回方式</h4>\n<pre><code class=\"language-javascript\">$.ajax({\n    type: &quot;GET&quot;,\n    url: &quot;/goods/add&quot;,\n    dataType: &quot;json&quot;,\n    success: function(data) {\n        if (data.flag) {\n            alert(&quot;添加成功&quot;);\n        } else {\n            alert(data.message);\n        }\n    },\n    error: function(data){\n        alert(&quot;添加失败&quot;);\n    }\n});\n\n后端\n@RequestMapping(&quot;/goods/add&quot;)\n@ResponseBody\npublic Map add(Goods goods) {\n    Map map = new HashMap();\n    try {\n        // do something\n        map.put(flag, true);\n    } catch (Exception e) {\n        e.printStackTrace();\n        map.put(&quot;flag&quot;, false);\n        map.put(&quot;message&quot;, e.getMessage());\n    }\n    reutrn map;\n}\n</code></pre>\n<ul>\n<li>\n<p>这种方式捕获异常后, 返回了错误信息, 且前台做了一定的处理, 看起来很完善? 但用 <code>HashMap</code> 中的 <code>flag</code> 和 <code>message</code> 这种字符串来当键很容易处理, 例如你这里叫 <code>message</code>, 别人起名叫 <code>msg</code>, 甚至有时手抖打错了, 怎么办? 前台再改成 <code>msg</code> 或其他的字符?, 前端后端这样一直来回改?</p>\n<p>更有甚者在情况 A 的情况下, 返回 json, 在情况 B 的情况下, 重定向到某个页面, 这就更乱了. 对于这种不统一的结构处理起来非常麻烦.</p>\n</li>\n</ul>\n<h3 id=\"异常处理规范\">异常处理规范</h3>\n<ul>\n<li>\n<h4 id=\"不要捕获任何异常\">不要捕获任何异常</h4>\n<p>对的, 不要在<strong>业务代码中</strong>进行捕获异常, 即 dao、service、controller 层的所以异常都全部抛出到上层. 这样不会导致业务代码中的一堆 <code>try-catch</code> 会混乱业务代码.</p>\n</li>\n<li>\n<h4 id=\"统一返回结果集\">统一返回结果集</h4>\n<p>不要使用 Map 来返回结果, Map 不易控制且容易犯错, 应该定义一个 Java 实体类. 来表示统一结果来返回, 如定义实体类:</p>\n</li>\n</ul>\n<pre><code class=\"language-java\">package com.xkcoding.exception.handler.model;\n\nimport com.xkcoding.exception.handler.constant.Status;\nimport com.xkcoding.exception.handler.exception.BaseException;\nimport lombok.Data;\n\n\n@Data\npublic class ApiResponse {\n	/**\n	 * 状态码\n	 */\n	private Integer code;\n\n	/**\n	 * 返回内容\n	 */\n	private String message;\n\n	/**\n	 * 返回数据\n	 */\n	private Object data;\n\n	/**\n	 * 无参构造函数\n	 */\n	private ApiResponse() {\n\n	}\n\n	/**\n	 * 全参构造函数\n	 *\n	 * @param code    状态码\n	 * @param message 返回内容\n	 * @param data    返回数据\n	 */\n	private ApiResponse(Integer code, String message, Object data) {\n		this.code = code;\n		this.message = message;\n		this.data = data;\n	}\n\n	/**\n	 * 构造一个自定义的API返回\n	 *\n	 * @param code    状态码\n	 * @param message 返回内容\n	 * @param data    返回数据\n	 * @return ApiResponse\n	 */\n	public static ApiResponse of(Integer code, String message, Object data) {\n		return new ApiResponse(code, message, data);\n	}\n\n	/**\n	 * 构造一个成功且带数据的API返回\n	 *\n	 * @param data 返回数据\n	 * @return ApiResponse\n	 */\n	public static ApiResponse ofSuccess(Object data) {\n		return ofStatus(Status.OK, data);\n	}\n\n	/**\n	 * 构造一个成功且自定义消息的API返回\n	 *\n	 * @param message 返回内容\n	 * @return ApiResponse\n	 */\n	public static ApiResponse ofMessage(String message) {\n		return of(Status.OK.getCode(), message, null);\n	}\n\n	/**\n	 * 构造一个有状态的API返回\n	 *\n	 * @param status 状态 {@link Status}\n	 * @return ApiResponse\n	 */\n	public static ApiResponse ofStatus(Status status) {\n		return ofStatus(status, null);\n	}\n\n	/**\n	 * 构造一个有状态且带数据的API返回\n	 *\n	 * @param status 状态 {@link Status}\n	 * @param data   返回数据\n	 * @return ApiResponse\n	 */\n	public static ApiResponse ofStatus(Status status, Object data) {\n		return of(status.getCode(), status.getMessage(), data);\n	}\n\n	/**\n	 * 构造一个异常且带数据的API返回\n	 *\n	 * @param t    异常\n	 * @param data 返回数据\n	 * @param &lt;T&gt;  {@link BaseException} 的子类\n	 * @return ApiResponse\n	 */\n	public static &lt;T extends BaseException&gt; ApiResponse ofException(T t, Object data) {\n		return of(t.getCode(), t.getMessage(), data);\n	}\n\n	/**\n	 * 构造一个异常且带数据的API返回\n	 *\n	 * @param t   异常\n	 * @param &lt;T&gt; {@link BaseException} 的子类\n	 * @return ApiResponse\n	 */\n	public static &lt;T extends BaseException&gt; ApiResponse ofException(T t) {\n		return ofException(t, null);\n	}\n}\n\n</code></pre>\n<h3 id=\"异常处理类\">异常处理类</h3>\n<pre><code class=\"language-java\">@ControllerAdvice\n@Slf4j\npublic class DemoExceptionHandler {\n	private static final String DEFAULT_ERROR_VIEW = &quot;error&quot;;\n\n	/**\n	 * 统一 json 异常处理\n	 *\n	 * @param exception JsonException\n	 * @return 统一返回 json 格式\n	 */\n	@ExceptionHandler(value = JsonException.class)\n	@ResponseBody\n	public ApiResponse jsonErrorHandler(JsonException exception) {\n		log.error(&quot;【JsonException】:{}&quot;, exception.getMessage());\n		return ApiResponse.ofException(exception);\n	}\n\n	/**\n	 * 统一 页面 异常处理\n	 *\n	 * @param exception PageException\n	 * @return 统一跳转到异常页面\n	 */\n	@ExceptionHandler(value = PageException.class)\n	public ModelAndView pageErrorHandler(PageException exception) {\n		log.error(&quot;【DemoPageException】:{}&quot;, exception.getMessage());\n		ModelAndView view = new ModelAndView();\n		view.addObject(&quot;message&quot;, exception.getMessage());\n		view.setViewName(DEFAULT_ERROR_VIEW);\n		return view;\n	}\n}\n\n</code></pre>\n<p>意思由代码进入Controller层之后由@ControllerAdvice进行AOP包围处理,可自定义接受异常后跳转页面或者返回API调用信息。</p>\n', 0, '\n\n## springBoot 统一异常处理\n\n### 异常处理反例\n\n- #### 捕获异常后只输出到控制台\n\n```javascript\n前端\n$.ajax({\n    type: \"GET\",\n    url: \"/user/add\",\n    dataType: \"json\",\n    success: function(data){\n        alert(\"添加成功\");\n    }\n});\n后端\ntry {\n    // do something\n} catch (Exception e) {\n    e.printStackTrace();\n}\n```\n\n 这是见过最多的异常处理方式了, 如果这是一个添加商品的方法, 前台通过 ajax 发送请求到后端, 期望返回 json 信息表示添加结果. 但如果这段代码出现了异常:\n\n  - 那么用户看到的场景就是点击了添加按钮, 但没有任何反应(其实是返回了 500 错误页面, 但这里前端没有监听 error 事件, 只监听了 success 事件. 但即使加上了`error: function(data) {alert(\"添加失败\");}`) 又如何呢? 到底因为啥失败了呢, 用户也不得而知.\n  - 后台 `e.printStackTrace()` 打印在控制台的日志也会在漫漫的日志中被埋没, 很可能会看不到输出的异常. 但这并不是最糟的情况, 更糟糕的事情是连 `e.printStackTrace()` 都没有, `catch` 块中是空的, 这样后端的控制台中更是什么都看不到了, 这段代码会像一个隐形的炸弹一样一直埋伏在系统中.\n\n#### 混乱的返回方式\n\n```javascript\n$.ajax({\n    type: \"GET\",\n    url: \"/goods/add\",\n    dataType: \"json\",\n    success: function(data) {\n        if (data.flag) {\n            alert(\"添加成功\");\n        } else {\n            alert(data.message);\n        }\n    },\n    error: function(data){\n        alert(\"添加失败\");\n    }\n});\n\n后端\n@RequestMapping(\"/goods/add\")\n@ResponseBody\npublic Map add(Goods goods) {\n    Map map = new HashMap();\n    try {\n        // do something\n        map.put(flag, true);\n    } catch (Exception e) {\n        e.printStackTrace();\n        map.put(\"flag\", false);\n        map.put(\"message\", e.getMessage());\n    }\n    reutrn map;\n}\n```\n\n- 这种方式捕获异常后, 返回了错误信息, 且前台做了一定的处理, 看起来很完善? 但用 `HashMap` 中的 `flag` 和 `message` 这种字符串来当键很容易处理, 例如你这里叫 `message`, 别人起名叫 `msg`, 甚至有时手抖打错了, 怎么办? 前台再改成 `msg` 或其他的字符?, 前端后端这样一直来回改?\n\n  更有甚者在情况 A 的情况下, 返回 json, 在情况 B 的情况下, 重定向到某个页面, 这就更乱了. 对于这种不统一的结构处理起来非常麻烦.\n\n### 异常处理规范\n\n- #### 不要捕获任何异常\n\n  对的, 不要在**业务代码中**进行捕获异常, 即 dao、service、controller 层的所以异常都全部抛出到上层. 这样不会导致业务代码中的一堆 `try-catch` 会混乱业务代码.\n\n- #### 统一返回结果集\n\n  不要使用 Map 来返回结果, Map 不易控制且容易犯错, 应该定义一个 Java 实体类. 来表示统一结果来返回, 如定义实体类:\n\n```java\npackage com.xkcoding.exception.handler.model;\n\nimport com.xkcoding.exception.handler.constant.Status;\nimport com.xkcoding.exception.handler.exception.BaseException;\nimport lombok.Data;\n\n\n@Data\npublic class ApiResponse {\n	/**\n	 * 状态码\n	 */\n	private Integer code;\n\n	/**\n	 * 返回内容\n	 */\n	private String message;\n\n	/**\n	 * 返回数据\n	 */\n	private Object data;\n\n	/**\n	 * 无参构造函数\n	 */\n	private ApiResponse() {\n\n	}\n\n	/**\n	 * 全参构造函数\n	 *\n	 * @param code    状态码\n	 * @param message 返回内容\n	 * @param data    返回数据\n	 */\n	private ApiResponse(Integer code, String message, Object data) {\n		this.code = code;\n		this.message = message;\n		this.data = data;\n	}\n\n	/**\n	 * 构造一个自定义的API返回\n	 *\n	 * @param code    状态码\n	 * @param message 返回内容\n	 * @param data    返回数据\n	 * @return ApiResponse\n	 */\n	public static ApiResponse of(Integer code, String message, Object data) {\n		return new ApiResponse(code, message, data);\n	}\n\n	/**\n	 * 构造一个成功且带数据的API返回\n	 *\n	 * @param data 返回数据\n	 * @return ApiResponse\n	 */\n	public static ApiResponse ofSuccess(Object data) {\n		return ofStatus(Status.OK, data);\n	}\n\n	/**\n	 * 构造一个成功且自定义消息的API返回\n	 *\n	 * @param message 返回内容\n	 * @return ApiResponse\n	 */\n	public static ApiResponse ofMessage(String message) {\n		return of(Status.OK.getCode(), message, null);\n	}\n\n	/**\n	 * 构造一个有状态的API返回\n	 *\n	 * @param status 状态 {@link Status}\n	 * @return ApiResponse\n	 */\n	public static ApiResponse ofStatus(Status status) {\n		return ofStatus(status, null);\n	}\n\n	/**\n	 * 构造一个有状态且带数据的API返回\n	 *\n	 * @param status 状态 {@link Status}\n	 * @param data   返回数据\n	 * @return ApiResponse\n	 */\n	public static ApiResponse ofStatus(Status status, Object data) {\n		return of(status.getCode(), status.getMessage(), data);\n	}\n\n	/**\n	 * 构造一个异常且带数据的API返回\n	 *\n	 * @param t    异常\n	 * @param data 返回数据\n	 * @param <T>  {@link BaseException} 的子类\n	 * @return ApiResponse\n	 */\n	public static <T extends BaseException> ApiResponse ofException(T t, Object data) {\n		return of(t.getCode(), t.getMessage(), data);\n	}\n\n	/**\n	 * 构造一个异常且带数据的API返回\n	 *\n	 * @param t   异常\n	 * @param <T> {@link BaseException} 的子类\n	 * @return ApiResponse\n	 */\n	public static <T extends BaseException> ApiResponse ofException(T t) {\n		return ofException(t, null);\n	}\n}\n\n```\n\n### 异常处理类\n\n```java\n@ControllerAdvice\n@Slf4j\npublic class DemoExceptionHandler {\n	private static final String DEFAULT_ERROR_VIEW = \"error\";\n\n	/**\n	 * 统一 json 异常处理\n	 *\n	 * @param exception JsonException\n	 * @return 统一返回 json 格式\n	 */\n	@ExceptionHandler(value = JsonException.class)\n	@ResponseBody\n	public ApiResponse jsonErrorHandler(JsonException exception) {\n		log.error(\"【JsonException】:{}\", exception.getMessage());\n		return ApiResponse.ofException(exception);\n	}\n\n	/**\n	 * 统一 页面 异常处理\n	 *\n	 * @param exception PageException\n	 * @return 统一跳转到异常页面\n	 */\n	@ExceptionHandler(value = PageException.class)\n	public ModelAndView pageErrorHandler(PageException exception) {\n		log.error(\"【DemoPageException】:{}\", exception.getMessage());\n		ModelAndView view = new ModelAndView();\n		view.addObject(\"message\", exception.getMessage());\n		view.setViewName(DEFAULT_ERROR_VIEW);\n		return view;\n	}\n}\n\n```\n\n意思由代码进入Controller层之后由@ControllerAdvice进行AOP包围处理,可自定义接受异常后跳转页面或者返回API调用信息。', '', 0, '', '', 'http://luna.iszychen.club/blog/upload/2020/2/%E4%B8%8B%E8%BD%BD-ad125cfbd94d4801b695203c3f28f5ff.jpg', 'springBoot 统一异常处理', 0, NULL, 29, 0, NULL, NULL, 'exception');
INSERT INTO `posts` VALUES (0, 48, '2020-06-20 19:06:11', 0, '2020-06-20 19:06:11', 0, 0, '2020-06-20 19:06:11', '<h1 id=\"1-vuejs是什么\">1. Vue.js是什么?</h1>\n<pre><code class=\"language-tex\">1). 一位华裔前Google工程师(尤雨溪)开发的前端js库\n2). 作用: 动态构建用户界面\n3). 特点:\n	* 遵循MVVM模式\n	* 编码简洁, 体积小, 运行效率高, 移动/PC端开发\n	* 它本身只关注UI, 可以轻松引入vue插件和其它第三库开发项目\n4). 与其它框架的关联:\n	* 借鉴angular的模板和数据绑定技术\n	* 借鉴react的组件化和虚拟DOM技术\n5). vue包含一系列的扩展插件(库):\n	* vue-cli: vue脚手架\n	* vue-resource(axios): ajax请求\n	* vue-router: 路由\n	* vuex: 状态管理\n	* vue-lazyload: 图片懒加载\n	* vue-scroller: 页面滑动相关\n	* mint-ui: 基于vue的组件库(移动端)\n	* element-ui: 基于vue的组件库(PC端)\n</code></pre>\n<h1 id=\"2-基本使用\">2. 基本使用</h1>\n<pre><code>1). 引入vue.js\n2). 创建Vue实例对象(vm), 指定选项(配置)对象\n	el : 指定dom标签容器的选择器\n	data : 指定初始化状态数据的对象/函数(返回一个对象)\n3). 在页面模板中使用{{}}或vue指令\n</code></pre>\n<h1 id=\"3-vue对象的选项\">3. Vue对象的选项</h1>\n<h2 id=\"1-el\">1). el</h2>\n<pre><code>指定dom标签容器的选择器\nVue就会管理对应的标签及其子标签\n</code></pre>\n<h2 id=\"2-data\">2). data</h2>\n<pre><code>对象或函数类型\n指定初始化状态属性数据的对象\nvm也会自动拥有data中所有属性\n页面中可以直接访问使用\n数据代理: 由vm对象来代理对data中所有属性的操作(读/写)\n</code></pre>\n<h2 id=\"3-methods\">3). methods</h2>\n<pre><code>包含多个方法的对象\n供页面中的事件指令来绑定回调\n回调函数默认有event参数, 但也可以指定自己的参数\n所有的方法由vue对象来调用, 访问data中的属性直接使用this.xxx\n</code></pre>\n<h2 id=\"4-computed\">4). computed</h2>\n<pre><code>包含多个方法的对象\n对状态属性进行计算返回一个新的数据, 供页面获取显示\n一般情况下是相当于是一个只读的属性\n利用set/get方法来实现属性数据的计算读取, 同时监视属性数据的变化\n如何给对象定义get/set属性\n	在创建对象时指定: get name () {return xxx} / set name (value) {}\n  	对象创建之后指定: Object.defineProperty(obj, age, {get(){}, set(value){}})\n</code></pre>\n<h2 id=\"5-watch\">5). watch</h2>\n<pre><code>包含多个属性监视的对象\n分为一般监视和深度监视\n    xxx: function(value){}\n	xxx : {\n		deep : true,\n		handler : fun(value)\n	}\n另一种添加监视方式: vm.$watch(\'xxx\', function(value){})\n</code></pre>\n<h1 id=\"4-过渡动画\">4. 过渡动画</h1>\n<pre><code class=\"language-html\">利用vue去操控css的transition/animation动画\n模板: 使用&lt;transition name=\'xxx\'&gt;包含带动画的标签\ncss样式\n	.fade-enter-active: 进入过程, 指定进入的transition\n	.fade-leave-active: 离开过程, 指定离开的transition\n	.xxx-enter, .xxx-leave-to: 指定隐藏的样式\n编码例子\n    .xxx-enter-active, .xxx-leave-active {\n      transition: opacity .5s\n    }\n    .xxx-enter, .xxx-leave-to {\n      opacity: 0\n    }\n    \n    &lt;transition name=&quot;xxx&quot;&gt;\n      &lt;p v-if=&quot;show&quot;&gt;hello&lt;/p&gt;\n    &lt;/transition&gt;\n</code></pre>\n<h1 id=\"5-生命周期\">5. 生命周期</h1>\n<pre><code>vm/组件对象\n生命周期图\n主要的生命周期函数(钩子)\n	created() / mounted(): 启动异步任务(启动定时器,发送ajax请求, 绑定监听)\n	beforeDestroy(): 做一些收尾的工作\n</code></pre>\n<h1 id=\"6-自定义过滤器\">6. 自定义过滤器</h1>\n<h2 id=\"1-理解\">1). 理解</h2>\n<pre><code>对需要显示的数据进行格式化后再显示\n</code></pre>\n<h2 id=\"2-编码\">2). 编码</h2>\n<pre><code>1). 定义过滤器\n	Vue.filter(filterName, function(value[,arg1,arg2,...]){\n	  // 进行一定的数据处理\n	  return newValue\n	})\n2). 使用过滤器\n	&lt;div&gt;{{myData | filterName}}&lt;/div&gt;\n	&lt;div&gt;{{myData | filterName(arg)}}&lt;/div&gt;\n</code></pre>\n<h1 id=\"7-vue内置指令\">7. vue内置指令</h1>\n<pre><code class=\"language-yml\">v-text/v-html: 指定标签体\n	* v-text : 当作纯文本\n	* v-html : 将value作为html标签来解析\nv-if v-else v-show: 显示/隐藏元素\n	* v-if : 如果vlaue为true, 当前标签会输出在页面中\n	* v-else : 与v-if一起使用, 如果value为false, 将当前标签输出到页面中\n	* v-show: 就会在标签中添加display样式, 如果vlaue为true, display=block, 否则是none\nv-for : 遍历\n	* 遍历数组 : v-for=&quot;(person, index) in persons&quot;   \n	* 遍历对象 : v-for=&quot;value in person&quot;   $key\nv-on : 绑定事件监听\n	* v-on:事件名, 可以缩写为: @事件名\n	* 监视具体的按键: @keyup.keyCode   @keyup.enter\n	* 停止事件的冒泡和阻止事件默认行为: @click.stop   @click.prevent\n	* 隐含对象: $event\nv-bind : 强制绑定解析表达式  \n	* html标签属性是不支持表达式的, 就可以使用v-bind\n	* 可以缩写为:  :id=\'name\'\n	* :class\n	  * :class=&quot;a&quot;\n		* :class=&quot;{classA : isA, classB : isB}&quot;\n		* :class=&quot;[classA, classB]&quot;\n	* :style\n		:style=&quot;{color : color}&quot;\nv-model\n	* 双向数据绑定\n	* 自动收集用户输入数据\nref : 标识某个标签\n	* ref=\'xxx\'\n	* 读取得到标签对象: this.$refs.xxx\n</code></pre>\n<h1 id=\"8-自定义指令\">8. 自定义指令</h1>\n<h2 id=\"1-注册全局指令\">1). 注册全局指令</h2>\n<pre><code class=\"language-javascript\">Vue.directive(\'my-directive\', function(el, binding){\n  el.innerHTML = binding.value.toUpperCase()\n})\n</code></pre>\n<h2 id=\"2-注册局部指令\">2). 注册局部指令</h2>\n<pre><code class=\"language-javascript\">directives : {\n  \'my-directive\' : function(el, binding) {\n      el.innerHTML = binding.value.toUpperCase()\n  }\n}\n</code></pre>\n<h2 id=\"3-使用指令\">3). 使用指令</h2>\n<pre><code class=\"language-html\">&lt;div v-my-directive=\'xxx\'&gt;\n</code></pre>\n', 0, '# 1. Vue.js是什么?\n\n```tex\n1). 一位华裔前Google工程师(尤雨溪)开发的前端js库\n2). 作用: 动态构建用户界面\n3). 特点:\n	* 遵循MVVM模式\n	* 编码简洁, 体积小, 运行效率高, 移动/PC端开发\n	* 它本身只关注UI, 可以轻松引入vue插件和其它第三库开发项目\n4). 与其它框架的关联:\n	* 借鉴angular的模板和数据绑定技术\n	* 借鉴react的组件化和虚拟DOM技术\n5). vue包含一系列的扩展插件(库):\n	* vue-cli: vue脚手架\n	* vue-resource(axios): ajax请求\n	* vue-router: 路由\n	* vuex: 状态管理\n	* vue-lazyload: 图片懒加载\n	* vue-scroller: 页面滑动相关\n	* mint-ui: 基于vue的组件库(移动端)\n	* element-ui: 基于vue的组件库(PC端)\n```\n\n# 2. 基本使用\n\n	1). 引入vue.js\n	2). 创建Vue实例对象(vm), 指定选项(配置)对象\n		el : 指定dom标签容器的选择器\n		data : 指定初始化状态数据的对象/函数(返回一个对象)\n	3). 在页面模板中使用{{}}或vue指令\n\n# 3. Vue对象的选项\n\n## 1). el\n\n	指定dom标签容器的选择器\n	Vue就会管理对应的标签及其子标签\n\n## 2). data\n\n	对象或函数类型\n	指定初始化状态属性数据的对象\n	vm也会自动拥有data中所有属性\n	页面中可以直接访问使用\n	数据代理: 由vm对象来代理对data中所有属性的操作(读/写)\n\n## 3). methods\n\n	包含多个方法的对象\n	供页面中的事件指令来绑定回调\n	回调函数默认有event参数, 但也可以指定自己的参数\n	所有的方法由vue对象来调用, 访问data中的属性直接使用this.xxx\n\n## 4). computed\n\n	包含多个方法的对象\n	对状态属性进行计算返回一个新的数据, 供页面获取显示\n	一般情况下是相当于是一个只读的属性\n	利用set/get方法来实现属性数据的计算读取, 同时监视属性数据的变化\n	如何给对象定义get/set属性\n		在创建对象时指定: get name () {return xxx} / set name (value) {}\n	  	对象创建之后指定: Object.defineProperty(obj, age, {get(){}, set(value){}})\n\n## 5). watch\n\n	包含多个属性监视的对象\n	分为一般监视和深度监视\n	    xxx: function(value){}\n		xxx : {\n			deep : true,\n			handler : fun(value)\n		}\n	另一种添加监视方式: vm.$watch(\'xxx\', function(value){})\n\n# 4. 过渡动画\n\n```html\n利用vue去操控css的transition/animation动画\n模板: 使用<transition name=\'xxx\'>包含带动画的标签\ncss样式\n	.fade-enter-active: 进入过程, 指定进入的transition\n	.fade-leave-active: 离开过程, 指定离开的transition\n	.xxx-enter, .xxx-leave-to: 指定隐藏的样式\n编码例子\n    .xxx-enter-active, .xxx-leave-active {\n      transition: opacity .5s\n    }\n    .xxx-enter, .xxx-leave-to {\n      opacity: 0\n    }\n    \n    <transition name=\"xxx\">\n      <p v-if=\"show\">hello</p>\n    </transition>\n```\n\n# 5. 生命周期\n\n	vm/组件对象\n	生命周期图\n	主要的生命周期函数(钩子)\n		created() / mounted(): 启动异步任务(启动定时器,发送ajax请求, 绑定监听)\n		beforeDestroy(): 做一些收尾的工作\n\n# 6. 自定义过滤器\n\n## 1). 理解\n\n	对需要显示的数据进行格式化后再显示\n\n## 2). 编码\n\n	1). 定义过滤器\n		Vue.filter(filterName, function(value[,arg1,arg2,...]){\n		  // 进行一定的数据处理\n		  return newValue\n		})\n	2). 使用过滤器\n		<div>{{myData | filterName}}</div>\n		<div>{{myData | filterName(arg)}}</div>\n\n# 7. vue内置指令\n\n```yml\nv-text/v-html: 指定标签体\n	* v-text : 当作纯文本\n	* v-html : 将value作为html标签来解析\nv-if v-else v-show: 显示/隐藏元素\n	* v-if : 如果vlaue为true, 当前标签会输出在页面中\n	* v-else : 与v-if一起使用, 如果value为false, 将当前标签输出到页面中\n	* v-show: 就会在标签中添加display样式, 如果vlaue为true, display=block, 否则是none\nv-for : 遍历\n	* 遍历数组 : v-for=\"(person, index) in persons\"   \n	* 遍历对象 : v-for=\"value in person\"   $key\nv-on : 绑定事件监听\n	* v-on:事件名, 可以缩写为: @事件名\n	* 监视具体的按键: @keyup.keyCode   @keyup.enter\n	* 停止事件的冒泡和阻止事件默认行为: @click.stop   @click.prevent\n	* 隐含对象: $event\nv-bind : 强制绑定解析表达式  \n	* html标签属性是不支持表达式的, 就可以使用v-bind\n	* 可以缩写为:  :id=\'name\'\n	* :class\n	  * :class=\"a\"\n		* :class=\"{classA : isA, classB : isB}\"\n		* :class=\"[classA, classB]\"\n	* :style\n		:style=\"{color : color}\"\nv-model\n	* 双向数据绑定\n	* 自动收集用户输入数据\nref : 标识某个标签\n	* ref=\'xxx\'\n	* 读取得到标签对象: this.$refs.xxx\n```\n\n# 8. 自定义指令\n\n## 1). 注册全局指令\n\n```javascript\nVue.directive(\'my-directive\', function(el, binding){\n  el.innerHTML = binding.value.toUpperCase()\n})\n```\n\n## 2). 注册局部指令\n\n```javascript\ndirectives : {\n  \'my-directive\' : function(el, binding) {\n      el.innerHTML = binding.value.toUpperCase()\n  }\n}\n```\n\n## 3). 使用指令\n\n```html\n<div v-my-directive=\'xxx\'>\n```', '', 0, '', '', 'http://luna.iszychen.club/blog/upload/2020/06/vue-9a440de4cde848ba8c82070eaff13656.jpg', 'vue.js', 0, NULL, 37, 0, NULL, NULL, 'vuestart');
INSERT INTO `posts` VALUES (0, 49, '2020-08-06 18:36:47', 0, '2020-08-06 18:36:47', 0, 0, '2020-08-06 18:36:47', '<h3 id=\"1如何将教务系统信息导入系统怎么保证这些信息的安全\">1.如何将教务系统信息导入系统？怎么保证这些信息的安全？</h3>\n<p>我们采用Excel模板解析导入, 并使用apache的poi解析工具, 解析上传的数据并存入数据库</p>\n<ul>\n<li>数据库存储密码等信息采用sha256加密，保证信息安全。</li>\n<li>项目部署的服务器位于校大数据中心，使用内网访问，安全性高。外部人员需要使用内部人员提供的vpn账号才能使用。</li>\n<li>云数据库符合企业级安全标准，高效防御 SQL 注入、暴力破解等数据库攻击行为，极大减少用户因数据库攻击带来的业务中断和损失。</li>\n<li>每日自动备份数据，确保数据存储安全。</li>\n</ul>\n<h3 id=\"2-使用人脸识别技术实现人脸点名进行人脸检测那么你们使用的人脸检测技术是什么\">2. 使用人脸识别技术实现人脸点名，进行人脸检测，那么你们使用的人脸检测技术是什么？</h3>\n<ul>\n<li>我们使用的是Face++的开放平台</li>\n<li>它是一个免费的开放平台,开发者可利用试用的appkey调用所有服务,例如人脸识别服务</li>\n<li>传入参数是base64编码后的图片，返回是一串json，接收后解析为java的实体，获取人脸信息</li>\n</ul>\n<h3 id=\"3-face流程怎么调用的\">3. Face++流程，怎么调用的？</h3>\n<ul>\n<li>face++对用户透明，通过官网提供的HttpUtils类，利用post方法，直接调用。返回json数据，经解析为java对象。</li>\n</ul>\n<h3 id=\"4-视频数据来源过程\">4. 视频/数据来源？过程</h3>\n<ul>\n<li>从摄像头拍摄后的视频流（tcp流）处理后去掉配置信息，留下视频数据，拼接后成为多少秒的视频，然后保存到服务器的文件夹里。然后前端通过url接收到视频，是一个有延时的实时。更好的处理是视频传到前端进行处理，然后在网页上显示。保存到话就是前端的视频流保存到本地。</li>\n<li>预期的实时显示，是把程序写到摄像头里。或者做一个中间的硬件设备，由他专门处理，就是<strong>边缘计算</strong>。</li>\n</ul>\n<h3 id=\"5-如何评定学生的听课质量数据可视化是用什么实现的\">5. 如何评定学生的听课质量？数据可视化是用什么实现的？</h3>\n<ul>\n<li>课程开始后，每隔五分钟拍摄学生当前时刻的照片，利用Face++中人体抠图的功能将图片中的所有学生分割开来，依次调用状态检测模型，返回学生们当前时刻的状态，并将数据存入数据库中。</li>\n<li>数据可视化为前端从后端得到数据库中的数据，利用百度的Echars数据图表可视化工具多方面展示,比如学生上课状态,教师知识点范围等。</li>\n</ul>\n<h3 id=\"6是怎么使用权限管理模块实现增删角色并赋权的\">6.是怎么使用权限管理模块实现增删角色并赋权的？</h3>\n<ul>\n<li>用户在登录系统时，会将用户的账号和密码传递给shiro框架自带的subject类的实例对象并将该对象以参数的形式传递给shiro。</li>\n<li>shiro将其与数据库中的用户表中信息进行比对验证该用户身份，验证成功后从数据库中获得该用户的权限信息。为了减少系统开销，对齐进行权限缓存。通过shiro与thymeleaf整合的依赖对前端菜单进行动态渲染展示该用户对应权限的功能。</li>\n</ul>\n<h3 id=\"7-模型是如何调用的\">7. 模型是如何调用的</h3>\n<ol>\n<li>python模型保存成Py文件</li>\n<li>在Tensorflow官网下载对应的java jar包(libtensorflow-1.12.0.jar)和在运行目录下添加tensorflow_ini.dll文件</li>\n<li>python在定义输入张量(输入数据，即图片)时，指定参数</li>\n<li>在java中传入参数</li>\n<li>将模型返回的数据结果</li>\n<li>得到输出张量把输出张量转化为java的float数组得到的数组里，一共有四个值（分别代表四种状态的概率）取其中概率最大的一个，当作学生的状态</li>\n</ol>\n<h3 id=\"8摄像头无法远程控制的原因\">8.摄像头无法远程控制的原因</h3>\n<ul>\n<li>我们部署的项目在服务部在学校的云计算中心的(8G， 4核， 100G)的虚拟机</li>\n<li>摄像头部在107实验室，同在校园网内，所以程序可以控制摄像头</li>\n<li>但是现在外网不能访问到校园网的虚拟机，需要网络中心进行公网的地址映射。指导老师跟网络中心联系时候才知道要走审批流程，到目前为止还没审批下来。</li>\n</ul>\n<h3 id=\"9摄像头控制程序如何实现\">9.摄像头控制程序如何实现？</h3>\n<ol>\n<li>通过ip地址和端口号连接摄像头</li>\n<li>根据命令行输入的字符串，调用对应的程序接口</li>\n<li>断开连接，释放资源</li>\n</ol>\n<h3 id=\"10为何无法显示摄像头实况\">10.为何无法显示摄像头实况？</h3>\n<ul>\n<li>摄像头厂商提供的接口都是windows平台的接口，项目是通过java调用exe文件，但是服务器是Linux的，无法运行exe文件。</li>\n<li>后期可以利用opencv 获取摄像推流的方式展示实时数据</li>\n</ul>\n<h3 id=\"11ocr识别原理\">11.ocr识别原理</h3>\n<ol>\n<li>\n<p>版面分析：把一整张图像拆分为行；便于后面行处理。在图像没有明显倾斜扭曲时，可以先使用**笔画等宽算法(swt算法)**把非笔迹的像素过滤掉，再使用投影直方图进行分行。</p>\n</li>\n<li>\n<p>使用<strong>连通域分析或者直方图投影</strong>进行行拆分为字符</p>\n</li>\n<li>\n<p>识别字符： 识别字符就在于生成样本+选择识别算法，由于时间因素，我们采用了百度已经训练好是文字识别算法</p>\n</li>\n<li>\n<p>识别后的人工矫正</p>\n</li>\n</ol>\n<h3 id=\"12-状态检测模型训练\">12. 状态检测模型训练</h3>\n<ul>\n<li>制作数据集。实验视频是使用1920（水平）×1080（垂直）的球机采集的。拍摄对象共60名，让学生在座位上分别做出认真听课、打瞌睡、玩手机、发呆的动作，每个动作持续4-6秒，在动作间切换3次，获取18s-24s的视频。将所有视频每秒抽取20帧，将得到的图片在进行人工标注状态，得到符合条件的2500张图片。</li>\n<li>选取模型训练方法。考虑到VGG16的拓展性强，容易迁移到其他数据图片上，同时由于<strong>其使用小卷积核和更深的网络进行的正则化</strong>，使用与训练得到的数据进行参数的初始化，VGG16网络较其他网络有更高的准确性和更快的速度，因此，选用VGG16对学生状态检测模型进行训练，是一个明智的选择。</li>\n<li>将数据集放入VGG16网络进行训练，最终训练出学生状态检测模型，经测试，正确率能够达到89.34%。训练出的模型只需将某个学生的状态图输入，即可获取该学生此时刻对应的上课状态。</li>\n<li>但是，由于我们现在是单人单图的训练，并且在人体抠图的过程中还是存在着遮挡的现象等问题，所以在实际应用中正确率往往达不到这么高，但我们也会积极的进行改进。</li>\n</ul>\n<h3 id=\"13-知识图谱构建\">13. 知识图谱构建</h3>\n<ol>\n<li>**信息抽取：实体抽取、关系抽取、属性抽取；信息抽取:**需信息抽来有教师预设的知识点自动化信息地从半结构化和无结构数据中抽取实体、关系以及实体属性等结构化信息。</li>\n<li><strong>知识融合：实体链接（相似度计算）、知识合并：<strong>在获取实体、关系与属性等知识要素后，经过知识融合，消除实体</strong>指称项</strong>与<strong>实体对象之间</strong>的歧义，得到一系列基本的事实表达。然而事实本身并不等于知识。要想最终获得结构化，网络化的知识体系，还需要进一步的人工优化去重。</li>\n<li><strong>知识加工：本体构建、知识推理、质量评估。</strong></li>\n<li>然后将各个父子节点直接的联系导入xml数据，Echars关系图利用xml的数据关系生成可视化展示，最终达到演示视频所展示的可视化效果</li>\n<li>我们之后还会有需教师的个人理解和相关资料后的进一步改善,也会根据重新生成的知识图谱,进一步的引导教师挖掘知识点之间的联系.</li>\n</ol>\n<h3 id=\"14-可视化展示那些方面\">14. 可视化展示那些方面</h3>\n<ul>\n<li>学生最近一次课程学生状态统计</li>\n<li>不同班级对不同知识点组合所产生学生学习状态的影响</li>\n<li>最近一周的知识点分布</li>\n<li>最近一周知识点难易程度分配</li>\n</ul>\n<h3 id=\"15-是否已经投入使用\">15. 是否已经投入使用</h3>\n<ul>\n<li>我们在项目完成后经学生同意后，对参与的志愿者进行了一系列的实验</li>\n<li>在学校的监管下有部分班级已经开始用</li>\n<li>并产生了一系列的结果数据集用于展示</li>\n<li>但由于现阶段我们服务器负载较小只能小范围进行测试使用</li>\n<li>待后期系统更加完善后会进行响应的服务器扩容,来进行更大范围的测试</li>\n</ul>\n<h3 id=\"16运行过程中出现的问题\">16.运行过程中出现的问题</h3>\n<ul>\n<li><strong>Ocr识别中对于视频知识点出现误差</strong>,我们使用ocr对同一段时间进行比对两次, 如果相差10秒以内,则进行第三次比对.对第三次识别的结果取平均值</li>\n</ul>\n<h3 id=\"17-对于学生隐私的问题是否考虑过学生的感受\">17. 对于学生隐私的问题,是否考虑过学生的感受</h3>\n<ul>\n<li>我们再使用本系统是已争取学生同意</li>\n<li>我们使用权限控制模块,已保证教师只能查看数据的识别结果集,而不能针对单个学生的结果展示,对于学生的学习状态由短信单独通知.</li>\n<li>我们拍摄所产生的数据在运算完成后进行实时的删除</li>\n<li>系统部署于学校内网中,识别产生数据结果集保存在腾讯云数据库中</li>\n<li>云数据库符合企业级安全标准，高效防御 SQL 注入、暴力破解等数据库攻击行为，极大减少用户因数据库攻击带来的业务中断和损失。</li>\n<li>每日自动备份数据，确保数据存储安全。</li>\n</ul>\n<h3 id=\"18-项目优势\">18. 项目优势</h3>\n<ul>\n<li>本系统能够帮助教师了解学生在教学过程中对某一知识点的掌握情况，及时调整教学内容和教学方法，合理分配，重新组合知识点教学，构建和调整课程知识图谱，优化学生与老师的学习与授课体验。其次能提供一个高效且安全的学生数据采集处理平台，为学校及时了解学生近况和相关措施的有效实施作为有力保障。更能帮助落实教育改革，利用人工智能改善教学方式，引导和推动教育内容和模式的变革</li>\n</ul>\n<h3 id=\"19-人脸识别过程\">19. 人脸识别过程</h3>\n<ul>\n<li>\n<p>(1)首先建立人脸的面像档案。即用摄像机采集单位人员的人脸的面像文件或取他们的照片形成面像文件，并将这些面像文件生成面纹(Faceprint)编码贮存起来。</p>\n</li>\n<li>\n<p>(2)获取当前的人体面像。即用摄像机捕捉的当前出入人员的面像，或取照片输入，并将当前的面像文件生成面纹编码。</p>\n</li>\n<li>\n<p>(3)用当前的面纹编码与档案库存的比对。即将当前的面像的面纹编码与档案库存中的面纹编码进行检索比对。上述的“面纹编码”方式是根据人脸脸部的本质特征和开头来工作的。这种面纹编码可以抵抗光线、皮肤色调、面部毛发、发型、眼镜、表情和姿态的变化，具有强大的可靠性，从而使它可以从百万人中精确地辨认出某个人。人脸的识别过程，利用普通的图像处理设备就能自动、连续、实时地完成。</p>\n</li>\n</ul>\n<h3 id=\"20-用到很多第三方接口为什么不自己创建接口\">20. 用到很多第三方接口,为什么不自己创建接口</h3>\n<ul>\n<li>因为我们再设计项目之初想快速构建系统架构,从而选择了较多的第三方服务完善系统架构</li>\n<li>在选择接口的同时,我们也对相关接口进行了一个同等级测试,包括性能,速度等方面,最终选择了现阶段的相关接口</li>\n<li>再后期构建完善后,会引入openCV等开源框架,自定义相关人脸识别接口,从而降低相关成本</li>\n</ul>\n<h3 id=\"21-项目涉及范围太大\">21. 项目涉及范围太大</h3>\n<ul>\n<li>我们在设计项目之初,只是为了想通过教师讲授的知识点构建知识图谱,从而帮助老师更好的教学,但在逐步的项目开发中,我们发现要实现这一功能需要更多的数据前提,包括知识点识别,学生状态采集等多方面内容,由此我们的项目范围也是逐步扩大,最终形成了一个相对完善的项目.来达到我们的需求</li>\n<li>我们的项目是一个循序渐进的过程，学生状态检测功能能够有效提取困难知识点分布数据，有助于完成知识点检测，而知识点检测功能是知识图谱功能的前提，通过知识点检测功能得到的信息以及教师预设的知识点自动化信息来知识融合并加工，最终实现知识图谱功能</li>\n</ul>\n', 0, '### 1.如何将教务系统信息导入系统？怎么保证这些信息的安全？\n\n我们采用Excel模板解析导入, 并使用apache的poi解析工具, 解析上传的数据并存入数据库\n\n- 数据库存储密码等信息采用sha256加密，保证信息安全。\n- 项目部署的服务器位于校大数据中心，使用内网访问，安全性高。外部人员需要使用内部人员提供的vpn账号才能使用。\n- 云数据库符合企业级安全标准，高效防御 SQL 注入、暴力破解等数据库攻击行为，极大减少用户因数据库攻击带来的业务中断和损失。\n- 每日自动备份数据，确保数据存储安全。\n\n### 2. 使用人脸识别技术实现人脸点名，进行人脸检测，那么你们使用的人脸检测技术是什么？\n\n- 我们使用的是Face++的开放平台\n- 它是一个免费的开放平台,开发者可利用试用的appkey调用所有服务,例如人脸识别服务\n- 传入参数是base64编码后的图片，返回是一串json，接收后解析为java的实体，获取人脸信息\n\n### 3. Face++流程，怎么调用的？\n\n- face++对用户透明，通过官网提供的HttpUtils类，利用post方法，直接调用。返回json数据，经解析为java对象。\n\n### 4. 视频/数据来源？过程\n\n- 从摄像头拍摄后的视频流（tcp流）处理后去掉配置信息，留下视频数据，拼接后成为多少秒的视频，然后保存到服务器的文件夹里。然后前端通过url接收到视频，是一个有延时的实时。更好的处理是视频传到前端进行处理，然后在网页上显示。保存到话就是前端的视频流保存到本地。\n- 预期的实时显示，是把程序写到摄像头里。或者做一个中间的硬件设备，由他专门处理，就是**边缘计算**。\n\n### 5. 如何评定学生的听课质量？数据可视化是用什么实现的？\n\n- 课程开始后，每隔五分钟拍摄学生当前时刻的照片，利用Face++中人体抠图的功能将图片中的所有学生分割开来，依次调用状态检测模型，返回学生们当前时刻的状态，并将数据存入数据库中。\n- 数据可视化为前端从后端得到数据库中的数据，利用百度的Echars数据图表可视化工具多方面展示,比如学生上课状态,教师知识点范围等。\n\n### 6.是怎么使用权限管理模块实现增删角色并赋权的？\n\n- 用户在登录系统时，会将用户的账号和密码传递给shiro框架自带的subject类的实例对象并将该对象以参数的形式传递给shiro。\n- shiro将其与数据库中的用户表中信息进行比对验证该用户身份，验证成功后从数据库中获得该用户的权限信息。为了减少系统开销，对齐进行权限缓存。通过shiro与thymeleaf整合的依赖对前端菜单进行动态渲染展示该用户对应权限的功能。\n\n### 7. 模型是如何调用的\n\n1. python模型保存成Py文件\n2. 在Tensorflow官网下载对应的java jar包(libtensorflow-1.12.0.jar)和在运行目录下添加tensorflow_ini.dll文件\n3. python在定义输入张量(输入数据，即图片)时，指定参数\n4. 在java中传入参数\n5. 将模型返回的数据结果\n6. 得到输出张量把输出张量转化为java的float数组得到的数组里，一共有四个值（分别代表四种状态的概率）取其中概率最大的一个，当作学生的状态\n\n### 8.摄像头无法远程控制的原因\n\n- 我们部署的项目在服务部在学校的云计算中心的(8G， 4核， 100G)的虚拟机\n- 摄像头部在107实验室，同在校园网内，所以程序可以控制摄像头\n- 但是现在外网不能访问到校园网的虚拟机，需要网络中心进行公网的地址映射。指导老师跟网络中心联系时候才知道要走审批流程，到目前为止还没审批下来。\n\n### 9.摄像头控制程序如何实现？\n\n1. 通过ip地址和端口号连接摄像头\n2. 根据命令行输入的字符串，调用对应的程序接口\n3. 断开连接，释放资源\n\n### 10.为何无法显示摄像头实况？\n\n- 摄像头厂商提供的接口都是windows平台的接口，项目是通过java调用exe文件，但是服务器是Linux的，无法运行exe文件。\n- 后期可以利用opencv 获取摄像推流的方式展示实时数据\n\n### 11.ocr识别原理\n\n1. 版面分析：把一整张图像拆分为行；便于后面行处理。在图像没有明显倾斜扭曲时，可以先使用**笔画等宽算法(swt算法)**把非笔迹的像素过滤掉，再使用投影直方图进行分行。\n\n2. 使用**连通域分析或者直方图投影**进行行拆分为字符\n\n3. 识别字符： 识别字符就在于生成样本+选择识别算法，由于时间因素，我们采用了百度已经训练好是文字识别算法\n\n4. 识别后的人工矫正\n\n### 12. 状态检测模型训练\n\n- 制作数据集。实验视频是使用1920（水平）×1080（垂直）的球机采集的。拍摄对象共60名，让学生在座位上分别做出认真听课、打瞌睡、玩手机、发呆的动作，每个动作持续4-6秒，在动作间切换3次，获取18s-24s的视频。将所有视频每秒抽取20帧，将得到的图片在进行人工标注状态，得到符合条件的2500张图片。\n- 选取模型训练方法。考虑到VGG16的拓展性强，容易迁移到其他数据图片上，同时由于**其使用小卷积核和更深的网络进行的正则化**，使用与训练得到的数据进行参数的初始化，VGG16网络较其他网络有更高的准确性和更快的速度，因此，选用VGG16对学生状态检测模型进行训练，是一个明智的选择。\n- 将数据集放入VGG16网络进行训练，最终训练出学生状态检测模型，经测试，正确率能够达到89.34%。训练出的模型只需将某个学生的状态图输入，即可获取该学生此时刻对应的上课状态。\n- 但是，由于我们现在是单人单图的训练，并且在人体抠图的过程中还是存在着遮挡的现象等问题，所以在实际应用中正确率往往达不到这么高，但我们也会积极的进行改进。\n\n### 13. 知识图谱构建\n\n1. **信息抽取：实体抽取、关系抽取、属性抽取；信息抽取:**需信息抽来有教师预设的知识点自动化信息地从半结构化和无结构数据中抽取实体、关系以及实体属性等结构化信息。 \n2. **知识融合：实体链接（相似度计算）、知识合并：**在获取实体、关系与属性等知识要素后，经过知识融合，消除实体**指称项**与**实体对象之间**的歧义，得到一系列基本的事实表达。然而事实本身并不等于知识。要想最终获得结构化，网络化的知识体系，还需要进一步的人工优化去重。\n3. **知识加工：本体构建、知识推理、质量评估。**\n4. 然后将各个父子节点直接的联系导入xml数据，Echars关系图利用xml的数据关系生成可视化展示，最终达到演示视频所展示的可视化效果\n5. 我们之后还会有需教师的个人理解和相关资料后的进一步改善,也会根据重新生成的知识图谱,进一步的引导教师挖掘知识点之间的联系.\n\n\n### 14. 可视化展示那些方面\n\n- 学生最近一次课程学生状态统计\n- 不同班级对不同知识点组合所产生学生学习状态的影响\n- 最近一周的知识点分布\n- 最近一周知识点难易程度分配\n\n### 15. 是否已经投入使用\n\n- 我们在项目完成后经学生同意后，对参与的志愿者进行了一系列的实验\n- 在学校的监管下有部分班级已经开始用\n- 并产生了一系列的结果数据集用于展示 \n- 但由于现阶段我们服务器负载较小只能小范围进行测试使用\n- 待后期系统更加完善后会进行响应的服务器扩容,来进行更大范围的测试\n\n### 16.运行过程中出现的问题\n\n- **Ocr识别中对于视频知识点出现误差**,我们使用ocr对同一段时间进行比对两次, 如果相差10秒以内,则进行第三次比对.对第三次识别的结果取平均值\n\n### 17. 对于学生隐私的问题,是否考虑过学生的感受\n\n- 我们再使用本系统是已争取学生同意\n- 我们使用权限控制模块,已保证教师只能查看数据的识别结果集,而不能针对单个学生的结果展示,对于学生的学习状态由短信单独通知.\n- 我们拍摄所产生的数据在运算完成后进行实时的删除\n- 系统部署于学校内网中,识别产生数据结果集保存在腾讯云数据库中\n- 云数据库符合企业级安全标准，高效防御 SQL 注入、暴力破解等数据库攻击行为，极大减少用户因数据库攻击带来的业务中断和损失。\n- 每日自动备份数据，确保数据存储安全。\n\n### 18. 项目优势\n\n- 本系统能够帮助教师了解学生在教学过程中对某一知识点的掌握情况，及时调整教学内容和教学方法，合理分配，重新组合知识点教学，构建和调整课程知识图谱，优化学生与老师的学习与授课体验。其次能提供一个高效且安全的学生数据采集处理平台，为学校及时了解学生近况和相关措施的有效实施作为有力保障。更能帮助落实教育改革，利用人工智能改善教学方式，引导和推动教育内容和模式的变革\n\n### 19. 人脸识别过程\n\n- (1)首先建立人脸的面像档案。即用摄像机采集单位人员的人脸的面像文件或取他们的照片形成面像文件，并将这些面像文件生成面纹(Faceprint)编码贮存起来。\n\n- (2)获取当前的人体面像。即用摄像机捕捉的当前出入人员的面像，或取照片输入，并将当前的面像文件生成面纹编码。\n\n- (3)用当前的面纹编码与档案库存的比对。即将当前的面像的面纹编码与档案库存中的面纹编码进行检索比对。上述的“面纹编码”方式是根据人脸脸部的本质特征和开头来工作的。这种面纹编码可以抵抗光线、皮肤色调、面部毛发、发型、眼镜、表情和姿态的变化，具有强大的可靠性，从而使它可以从百万人中精确地辨认出某个人。人脸的识别过程，利用普通的图像处理设备就能自动、连续、实时地完成。\n\n### 20. 用到很多第三方接口,为什么不自己创建接口\n\n- 因为我们再设计项目之初想快速构建系统架构,从而选择了较多的第三方服务完善系统架构\n- 在选择接口的同时,我们也对相关接口进行了一个同等级测试,包括性能,速度等方面,最终选择了现阶段的相关接口\n- 再后期构建完善后,会引入openCV等开源框架,自定义相关人脸识别接口,从而降低相关成本\n\n### 21. 项目涉及范围太大\n\n- 我们在设计项目之初,只是为了想通过教师讲授的知识点构建知识图谱,从而帮助老师更好的教学,但在逐步的项目开发中,我们发现要实现这一功能需要更多的数据前提,包括知识点识别,学生状态采集等多方面内容,由此我们的项目范围也是逐步扩大,最终形成了一个相对完善的项目.来达到我们的需求\n- 我们的项目是一个循序渐进的过程，学生状态检测功能能够有效提取困难知识点分布数据，有助于完成知识点检测，而知识点检测功能是知识图谱功能的前提，通过知识点检测功能得到的信息以及教师预设的知识点自动化信息来知识融合并加工，最终实现知识图谱功能', '', 0, '', '', 'http://luna.iszychen.club/blog/upload/2020/2/photo-1580960551585-df9b647cc082-9ffb60634bae401e88ca69c6d2ebbcbf.jfif', 'replay', 0, NULL, 35, 0, NULL, NULL, 'replay');

-- ----------------------------
-- Table structure for tags
-- ----------------------------
DROP TABLE IF EXISTS `tags`;
CREATE TABLE `tags`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `create_time` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0),
  `deleted` tinyint(4) NULL DEFAULT 0,
  `update_time` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0),
  `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `slug_name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `slug` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `thumbnail` varchar(1023) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `UK_sn0d91hxu700qcw0n4pebp5vc`(`slug`) USING BTREE,
  UNIQUE INDEX `UK_54qchb4q4k64rot34qbfxyl6y`(`slug_name`) USING BTREE,
  INDEX `tags_name`(`name`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 8 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of tags
-- ----------------------------
INSERT INTO `tags` VALUES (1, '2019-12-06 18:56:12', 0, '2020-02-06 15:35:40', 'world', 'world', 'world', NULL);
INSERT INTO `tags` VALUES (2, '2019-12-06 18:56:25', 0, '2020-02-06 15:35:31', 'Java', 'code', 'code', NULL);
INSERT INTO `tags` VALUES (3, '2019-12-06 19:02:13', 0, '2020-02-06 15:35:54', 'welcome', 'welcome', 'welcome', NULL);
INSERT INTO `tags` VALUES (4, '2019-12-06 19:36:49', 0, '2019-12-06 19:36:49', 'Linux', 'linux', 'linux', NULL);
INSERT INTO `tags` VALUES (5, '2019-12-06 20:15:14', 0, '2020-02-06 15:35:11', 'project', '1575634513497', '1575634513497', NULL);
INSERT INTO `tags` VALUES (6, '2020-02-06 15:36:02', 0, '2020-02-06 15:36:02', 'Js', 'Js', 'Js', NULL);
INSERT INTO `tags` VALUES (7, '2020-02-06 15:36:32', 0, '2020-02-06 15:36:32', '软件', 'software', 'software', NULL);

-- ----------------------------
-- Table structure for theme_settings
-- ----------------------------
DROP TABLE IF EXISTS `theme_settings`;
CREATE TABLE `theme_settings`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `create_time` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0),
  `deleted` tinyint(4) NULL DEFAULT 0,
  `update_time` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0),
  `setting_key` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `theme_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `setting_value` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `theme_settings_setting_key`(`setting_key`) USING BTREE,
  INDEX `theme_settings_theme_id`(`theme_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 83 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of theme_settings
-- ----------------------------
INSERT INTO `theme_settings` VALUES (1, '2019-12-06 20:03:32', 0, '2019-12-06 20:03:32', 'post_title_uppper', 'caicai_anatole', 'true');
INSERT INTO `theme_settings` VALUES (2, '2019-12-06 20:03:32', 0, '2019-12-06 20:03:32', 'scrollbar', 'caicai_anatole', '#3798e8');
INSERT INTO `theme_settings` VALUES (3, '2019-12-06 20:03:32', 0, '2019-12-06 20:03:32', 'avatar_circle', 'caicai_anatole', 'false');
INSERT INTO `theme_settings` VALUES (4, '2019-12-06 20:03:32', 0, '2019-12-06 20:03:32', 'blog_title_uppper', 'caicai_anatole', 'true');
INSERT INTO `theme_settings` VALUES (5, '2019-12-06 20:03:32', 0, '2019-12-06 20:03:32', 'hitokoto', 'caicai_anatole', 'false');
INSERT INTO `theme_settings` VALUES (6, '2019-12-06 20:03:32', 0, '2019-12-06 20:03:32', 'rss', 'caicai_anatole', 'true');
INSERT INTO `theme_settings` VALUES (7, '2019-12-06 20:03:32', 0, '2019-12-06 20:03:32', 'google_color', 'caicai_anatole', '#ffffff');
INSERT INTO `theme_settings` VALUES (8, '2019-12-06 20:03:32', 0, '2019-12-06 20:03:32', 'code_pretty', 'caicai_anatole', 'Default');
INSERT INTO `theme_settings` VALUES (9, '2019-12-06 20:03:32', 0, '2019-12-06 20:03:32', 'email', 'caicai_anatole', '15696756582@163.com');
INSERT INTO `theme_settings` VALUES (10, '2019-12-06 20:03:32', 0, '2019-12-06 20:03:32', 'github', 'caicai_anatole', 'czy1024');
INSERT INTO `theme_settings` VALUES (11, '2019-12-06 20:03:32', 0, '2019-12-06 20:03:32', 'qq', 'caicai_anatole', '1173282254');
INSERT INTO `theme_settings` VALUES (12, '2019-12-09 12:07:49', 0, '2019-12-09 12:07:49', 'focus_height', 'louie_senpai_siren', 'true');
INSERT INTO `theme_settings` VALUES (13, '2019-12-09 12:07:50', 0, '2019-12-09 12:07:50', 'feature_title', 'louie_senpai_siren', '聚焦');
INSERT INTO `theme_settings` VALUES (14, '2019-12-09 12:07:50', 0, '2019-12-09 12:07:50', 'focus_infos', 'louie_senpai_siren', 'true');
INSERT INTO `theme_settings` VALUES (15, '2019-12-09 12:07:50', 0, '2019-12-09 12:07:50', 'feature2_link', 'louie_senpai_siren', '#');
INSERT INTO `theme_settings` VALUES (16, '2019-12-09 12:07:50', 0, '2019-12-09 12:07:50', 'pagenav_style', 'louie_senpai_siren', 'ajax');
INSERT INTO `theme_settings` VALUES (17, '2019-12-09 12:07:50', 0, '2019-12-09 12:07:50', 'post_nepre', 'louie_senpai_siren', 'true');
INSERT INTO `theme_settings` VALUES (18, '2019-12-09 12:07:50', 0, '2019-12-09 12:07:50', 'patternimg', 'louie_senpai_siren', 'true');
INSERT INTO `theme_settings` VALUES (19, '2019-12-09 12:07:50', 0, '2019-12-09 12:07:50', 'theme_skin', 'louie_senpai_siren', '#fe9600');
INSERT INTO `theme_settings` VALUES (20, '2019-12-09 12:07:50', 0, '2019-12-09 12:07:50', 'focus_img_filter', 'louie_senpai_siren', 'filter-nothing');
INSERT INTO `theme_settings` VALUES (21, '2019-12-09 12:07:50', 0, '2019-12-09 12:07:50', 'focus_img_1', 'louie_senpai_siren', '/louie_senpai_siren/images/hd.jpg');
INSERT INTO `theme_settings` VALUES (22, '2019-12-09 12:07:50', 0, '2019-12-09 12:07:50', 'top_feature', 'louie_senpai_siren', 'true');
INSERT INTO `theme_settings` VALUES (23, '2019-12-09 12:07:50', 0, '2019-12-09 12:07:50', 'feature1_link', 'louie_senpai_siren', '#');
INSERT INTO `theme_settings` VALUES (24, '2019-12-09 12:07:50', 0, '2019-12-09 12:07:50', 'feature2_title', 'louie_senpai_siren', 'feature2');
INSERT INTO `theme_settings` VALUES (25, '2019-12-09 12:07:50', 0, '2019-12-09 12:07:50', 'post_list_style', 'louie_senpai_siren', 'standard');
INSERT INTO `theme_settings` VALUES (26, '2019-12-09 12:07:50', 0, '2019-12-09 12:07:50', 'code_pretty', 'louie_senpai_siren', 'Default');
INSERT INTO `theme_settings` VALUES (27, '2019-12-09 12:07:50', 0, '2019-12-09 12:07:50', 'post_share', 'louie_senpai_siren', 'true');
INSERT INTO `theme_settings` VALUES (28, '2019-12-09 12:07:50', 0, '2019-12-09 12:07:50', 'head_notice', 'louie_senpai_siren', 'false');
INSERT INTO `theme_settings` VALUES (29, '2019-12-09 12:07:50', 0, '2019-12-09 12:07:50', 'feature3_link', 'louie_senpai_siren', '#');
INSERT INTO `theme_settings` VALUES (30, '2019-12-09 12:07:50', 0, '2019-12-09 12:07:50', 'list_type', 'louie_senpai_siren', 'round');
INSERT INTO `theme_settings` VALUES (31, '2019-12-09 12:07:50', 0, '2019-12-09 12:07:50', 'top_search', 'louie_senpai_siren', 'true');
INSERT INTO `theme_settings` VALUES (32, '2019-12-09 12:07:50', 0, '2019-12-09 12:07:50', 'poi_pjax', 'louie_senpai_siren', 'false');
INSERT INTO `theme_settings` VALUES (33, '2019-12-09 12:07:50', 0, '2019-12-09 12:07:50', 'author_profile', 'louie_senpai_siren', 'true');
INSERT INTO `theme_settings` VALUES (34, '2019-12-09 12:07:50', 0, '2019-12-09 12:07:50', 'feature1_title', 'louie_senpai_siren', 'feature1');
INSERT INTO `theme_settings` VALUES (35, '2019-12-09 12:07:50', 0, '2019-12-09 12:07:50', 'feature3_title', 'louie_senpai_siren', 'feature3');
INSERT INTO `theme_settings` VALUES (36, '2019-12-09 12:07:50', 0, '2019-12-09 12:07:50', 'head_focus', 'louie_senpai_siren', 'true');
INSERT INTO `theme_settings` VALUES (37, '2019-12-09 12:07:50', 0, '2019-12-09 12:07:50', 'shownav', 'louie_senpai_siren', 'true');
INSERT INTO `theme_settings` VALUES (38, '2019-12-09 12:07:50', 0, '2019-12-09 12:07:50', 'archives_patternimg', 'louie_senpai_siren', 'http://111.229.114.126/upload/2019/12/201286912381462-9ead83976db44e889ebff05d6d56386c.jpg');
INSERT INTO `theme_settings` VALUES (39, '2019-12-09 12:07:50', 0, '2019-12-09 12:07:50', 'qq', 'louie_senpai_siren', '1173282254');
INSERT INTO `theme_settings` VALUES (40, '2019-12-09 12:07:50', 0, '2019-12-09 12:07:50', 'qzone', 'louie_senpai_siren', '1173282254');
INSERT INTO `theme_settings` VALUES (41, '2019-12-09 12:07:50', 0, '2019-12-09 12:07:50', 'github', 'louie_senpai_siren', 'czy1024');
INSERT INTO `theme_settings` VALUES (42, '2019-12-09 12:07:50', 0, '2019-12-09 12:07:50', 'googleplus', 'louie_senpai_siren', 'Iszychen@gmail.com');
INSERT INTO `theme_settings` VALUES (43, '2020-02-07 17:03:56', 0, '2020-02-07 17:03:56', 'other_sidebar_postcount', 'viosey_material', 'true');
INSERT INTO `theme_settings` VALUES (44, '2020-02-07 17:03:56', 0, '2020-02-07 17:03:56', 'scheme', 'viosey_material', 'Paradox');
INSERT INTO `theme_settings` VALUES (45, '2020-02-07 17:03:56', 0, '2020-03-13 17:47:41', 'uiux_android_chrome_color', 'viosey_material', '#0097a7');
INSERT INTO `theme_settings` VALUES (46, '2020-02-07 17:03:56', 0, '2020-02-07 17:03:56', 'sns_share_qq', 'viosey_material', 'true');
INSERT INTO `theme_settings` VALUES (47, '2020-02-07 17:03:56', 0, '2020-03-13 17:47:41', 'uiux_hyperlink_color', 'viosey_material', '#00838f');
INSERT INTO `theme_settings` VALUES (48, '2020-02-07 17:03:56', 0, '2020-02-07 17:03:56', 'uiux_card_elevation', 'viosey_material', '2');
INSERT INTO `theme_settings` VALUES (49, '2020-02-07 17:03:56', 0, '2020-03-13 17:47:41', 'uiux_theme_sub_color', 'viosey_material', '#00838f');
INSERT INTO `theme_settings` VALUES (50, '2020-02-07 17:03:56', 0, '2020-02-07 17:03:56', 'hanabi_line_number', 'viosey_material', 'true');
INSERT INTO `theme_settings` VALUES (51, '2020-02-07 17:03:56', 0, '2020-02-07 17:03:56', 'sns_share_telegram', 'viosey_material', 'true');
INSERT INTO `theme_settings` VALUES (52, '2020-02-07 17:03:56', 0, '2020-03-13 17:51:08', 'background_bing', 'viosey_material', 'true');
INSERT INTO `theme_settings` VALUES (53, '2020-02-07 17:03:56', 0, '2020-02-07 17:03:56', 'sns_share_googleplus', 'viosey_material', 'true');
INSERT INTO `theme_settings` VALUES (54, '2020-02-07 17:03:56', 0, '2020-03-13 17:47:41', 'sns_share_linkedin', 'viosey_material', 'false');
INSERT INTO `theme_settings` VALUES (55, '2020-02-07 17:03:56', 0, '2020-02-07 17:03:56', 'sns_share_weibo', 'viosey_material', 'true');
INSERT INTO `theme_settings` VALUES (56, '2020-02-07 17:03:56', 0, '2020-02-07 17:03:56', 'uiux_nprogress_buffer', 'viosey_material', '800');
INSERT INTO `theme_settings` VALUES (57, '2020-02-07 17:03:56', 0, '2020-03-13 17:47:41', 'sns_share_twitter', 'viosey_material', 'false');
INSERT INTO `theme_settings` VALUES (58, '2020-02-07 17:03:56', 0, '2020-03-13 17:51:08', 'prettify_enable', 'viosey_material', 'true');
INSERT INTO `theme_settings` VALUES (59, '2020-02-07 17:03:56', 0, '2020-03-13 17:47:41', 'uiux_theme_color', 'viosey_material', '#0097a7');
INSERT INTO `theme_settings` VALUES (60, '2020-02-07 17:03:56', 0, '2020-02-07 17:03:56', 'uiux_button_color', 'viosey_material', '#757575');
INSERT INTO `theme_settings` VALUES (61, '2020-02-07 17:03:56', 0, '2020-03-13 17:47:41', 'prettify_theme', 'viosey_material', 'github');
INSERT INTO `theme_settings` VALUES (62, '2020-02-07 17:03:56', 0, '2020-03-13 17:47:41', 'uiux_slogan', 'viosey_material', 'Hi, welcome to my blog');
INSERT INTO `theme_settings` VALUES (63, '2020-02-07 17:03:56', 0, '2020-02-07 17:03:56', 'other_sidebar_cates', 'viosey_material', 'true');
INSERT INTO `theme_settings` VALUES (64, '2020-02-07 17:03:56', 0, '2020-03-13 17:47:41', 'other_mathjax', 'viosey_material', 'true');
INSERT INTO `theme_settings` VALUES (65, '2020-02-07 17:03:56', 0, '2020-03-13 17:47:41', 'sns_share_facebook', 'viosey_material', 'false');
INSERT INTO `theme_settings` VALUES (66, '2020-02-07 17:03:56', 0, '2020-03-13 17:47:41', 'uiux_nprogress_color', 'viosey_material', '#2299dd');
INSERT INTO `theme_settings` VALUES (67, '2020-02-07 17:03:56', 0, '2020-02-07 17:03:56', 'other_js_smoothscroll', 'viosey_material', 'true');
INSERT INTO `theme_settings` VALUES (68, '2020-02-07 17:03:56', 0, '2020-02-07 17:03:56', 'other_js_fade', 'viosey_material', 'true');
INSERT INTO `theme_settings` VALUES (69, '2020-02-07 17:03:56', 0, '2020-03-13 17:47:41', 'background_purecolor', 'viosey_material', '#f5f5f5');
INSERT INTO `theme_settings` VALUES (70, '2020-02-07 17:03:56', 0, '2020-03-13 17:47:41', 'hanabi_enable', 'viosey_material', 'true');
INSERT INTO `theme_settings` VALUES (71, '2020-02-07 17:03:56', 0, '2020-02-07 17:03:56', 'post_qrcode_enable', 'viosey_material', 'true');
INSERT INTO `theme_settings` VALUES (72, '2020-02-07 17:03:56', 0, '2020-04-15 10:12:31', 'daily_pic', 'viosey_material', 'http://111.229.114.126:8089/upload/2020/2/designclass-ZmtPKmVO2Ac-unsplash-a68a6dd1377b4a9d9f7e6864d4c3abae.jpg');
INSERT INTO `theme_settings` VALUES (73, '2020-02-07 17:03:56', 0, '2020-04-15 10:12:30', 'sidebar_header', 'viosey_material', 'http://111.229.114.126:8089/upload/2020/2/photo-1580874841344-df5968a8d7b7-bc0ba4a870304fce979e7c182d502917.jfif');
INSERT INTO `theme_settings` VALUES (74, '2020-02-07 17:03:56', 0, '2020-04-15 10:12:29', 'footer_image', 'viosey_material', 'http://111.229.114.126:8089/upload/2020/2/photo-1580960551585-df9b647cc082-9ffb60634bae401e88ca69c6d2ebbcbf.jfif');
INSERT INTO `theme_settings` VALUES (75, '2020-02-07 17:11:26', 0, '2020-04-15 10:12:30', 'favicon', 'viosey_material', 'http://111.229.114.126:8089/upload/2020/2/u=3180060526,1572949481&fm=26&gp=0-344db8692ba341b8b5202bc64ea4f681.jpg');
INSERT INTO `theme_settings` VALUES (76, '2020-03-13 17:47:41', 0, '2020-04-15 10:12:31', 'high_res_favicon', 'viosey_material', 'http://111.229.114.126:8089/upload/2020/2/u=3180060526,1572949481&fm=26&gp=0-344db8692ba341b8b5202bc64ea4f681.jpg');
INSERT INTO `theme_settings` VALUES (77, '2020-03-13 17:47:41', 0, '2020-04-15 10:12:31', 'apple_touch_icon', 'viosey_material', 'http://111.229.114.126:8089/upload/2020/2/u=3180060526,1572949481&fm=26&gp=0-344db8692ba341b8b5202bc64ea4f681.jpg');
INSERT INTO `theme_settings` VALUES (78, '2020-03-13 17:47:41', 0, '2020-03-13 17:47:41', 'thumbnail_purecolor', 'viosey_material', '#000000');
INSERT INTO `theme_settings` VALUES (79, '2020-03-13 17:47:41', 0, '2020-03-13 17:47:41', 'sns_email', 'viosey_material', '15696756582@163.com');
INSERT INTO `theme_settings` VALUES (80, '2020-03-13 17:47:41', 0, '2020-03-13 17:47:41', 'sns_googleplus', 'viosey_material', 'Iszychen@gmail.com');
INSERT INTO `theme_settings` VALUES (81, '2020-03-13 17:47:41', 0, '2020-04-13 01:54:40', 'sns_github', 'viosey_material', 'http://github.com/czy1024');
INSERT INTO `theme_settings` VALUES (82, '2020-03-13 17:51:08', 0, '2020-03-13 17:51:08', 'background_bgimg', 'viosey_material', 'http://111.229.114.126/upload/2020/2/photo-1580960551585-df9b647cc082-9ffb60634bae401e88ca69c6d2ebbcbf.jfif');

-- ----------------------------
-- Table structure for users
-- ----------------------------
DROP TABLE IF EXISTS `users`;
CREATE TABLE `users`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `create_time` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0),
  `deleted` tinyint(4) NULL DEFAULT 0,
  `update_time` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0),
  `avatar` varchar(1023) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '',
  `description` varchar(1023) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '',
  `email` varchar(127) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '',
  `expire_time` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0),
  `nickname` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `password` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `username` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `mfa_key` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `mfa_type` int(11) NOT NULL DEFAULT 0,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 3 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of users
-- ----------------------------
INSERT INTO `users` VALUES (1, '2019-12-06 18:53:43', 0, '2020-04-15 09:32:38', 'http://luna.iszychen.club:8089/upload/2019/12/panda-99b045e335e64ca6a15c009f3b4de066.JPG', '本博客系统用于Alter Software小组编辑调试文档需求使用,欢迎访问~', '15696756582@163.com', '2019-12-06 18:53:43', 'Luna', '$2a$10$I/J7ghdE7oMVl/tpqBuqJO8lzO7b129eJEJ9sVUxyRyePtYIDMYYi', 'Luna', NULL, 0);

SET FOREIGN_KEY_CHECKS = 1;
